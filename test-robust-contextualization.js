import dotenv from 'dotenv';
import { ClinicContextManager } from './services/core/clinicContextManager.js';
import { LLMOrchestratorService } from './services/core/llmOrchestratorService.js';

dotenv.config();

async function testRobustContextualization() {
  console.log('üß™ TESTE ROBUSTO DE CONTEXTUALIZA√á√ÉO');
  console.log('=====================================');
  console.log('üîç Simulando EXATAMENTE o que o sistema fazia ANTES das altera√ß√µes');
  
  try {
    // 1. Inicializar servi√ßos
    console.log('\n1Ô∏è‚É£ Inicializando servi√ßos...');
    await ClinicContextManager.initialize();
    console.log('‚úÖ ClinicContextManager inicializado');
    
    // 2. Buscar cl√≠nica por WhatsApp
    console.log('\n2Ô∏è‚É£ Buscando cl√≠nica CardioPrime...');
    const clinicName = await ClinicContextManager.getClinicByWhatsApp('+554730915628');
    console.log('‚úÖ Cl√≠nica encontrada:', clinicName);
    
    if (!clinicName) {
      console.log('‚ùå Nenhuma cl√≠nica encontrada');
      return;
    }
    
    // 3. Carregar contexto COMPLETO
    console.log('\n3Ô∏è‚É£ Carregando contexto COMPLETO...');
    const context = await ClinicContextManager.getClinicContext(clinicName);
    
    console.log('üìä CONTEXTO CARREGADO:');
    console.log('   - Nome:', context?.name);
    console.log('   - Endere√ßo:', context?.address?.completo);
    console.log('   - Telefone:', context?.contacts?.telefone);
    console.log('   - Servi√ßos:', context?.services?.length || 0);
    console.log('   - Profissionais:', context?.professionals?.length || 0);
    
    // 4. MAPEAR TODOS OS CAMPOS DO JSON (como fazia antes)
    console.log('\n4Ô∏è‚É£ MAPEANDO TODOS OS CAMPOS DO JSON:');
    
    if (context?.servicesDetails) {
      console.log('üìã SERVI√áOS DETALHADOS:');
      console.log('   - Consultas:', context.servicesDetails.consultas?.length || 0);
      console.log('   - Exames:', context.servicesDetails.exames?.length || 0);
      console.log('   - Procedimentos:', context.servicesDetails.procedimentos?.length || 0);
      
      if (context.servicesDetails.consultas) {
        console.log('   üìù CONSULTAS:');
        context.servicesDetails.consultas.forEach((consulta, i) => {
          console.log(`      ${i + 1}. ${consulta.nome} - ${consulta.duracao || 'N/A'}`);
        });
      }
      
      if (context.servicesDetails.exames) {
        console.log('   üî¨ EXAMES:');
        context.servicesDetails.exames.forEach((exame, i) => {
          console.log(`      ${i + 1}. ${exame.nome} - ${exame.tipo || 'N/A'}`);
        });
      }
    }
    
    if (context?.professionalsDetails) {
      console.log('üë®‚Äç‚öïÔ∏è PROFISSIONAIS DETALHADOS:');
      context.professionalsDetails.forEach((prof, i) => {
        console.log(`   ${i + 1}. ${prof.nome_completo || prof.nome} - ${prof.especialidade || 'N/A'}`);
      });
    }
    
    // 5. TESTAR SE O LLM RECEBERIA ESSAS INFORMA√á√ïES
    console.log('\n5Ô∏è‚É£ VERIFICANDO SE LLM RECEBERIA INFORMA√á√ïES:');
    console.log('   - hasServices:', !!context?.services?.length);
    console.log('   - hasProfessionals:', !!context?.professionals?.length);
    console.log('   - hasServicesDetails:', !!context?.servicesDetails);
    console.log('   - hasProfessionalsDetails:', !!context?.professionalsDetails);
    
    // 6. SIMULAR PROCESSAMENTO DE MENSAGEM (como o sistema fazia)
    console.log('\n6Ô∏è‚É£ SIMULANDO PROCESSAMENTO DE MENSAGEM...');
    
    const testMessage = "Gostaria de informa√ß√µes sobre pre√ßos dos exames";
    console.log('üì§ Mensagem de teste:', testMessage);
    
    // 7. VERIFICAR SE O CONTEXTO EST√Å SENDO PASSADO PARA O LLM
    console.log('\n7Ô∏è‚É£ VERIFICANDO CONTEXTO PARA LLM:');
    
    // Simular o que o LLM receberia
    const contextForLLM = {
      clinicName: context.name,
      services: context.services || [],
      professionals: context.professionals || [],
      servicesDetails: context.servicesDetails || {},
      professionalsDetails: context.professionalsDetails || [],
      address: context.address?.completo,
      phone: context.contacts?.telefone
    };
    
    console.log('üìã CONTEXTO QUE O LLM DEVERIA RECEBER:');
    console.log('   - Nome da cl√≠nica:', contextForLLM.clinicName);
    console.log('   - Servi√ßos dispon√≠veis:', contextForLLM.services.length);
    console.log('   - Profissionais:', contextForLLM.professionals.length);
    console.log('   - Detalhes dos servi√ßos:', Object.keys(contextForLLM.servicesDetails).length);
    console.log('   - Detalhes dos profissionais:', contextForLLM.professionalsDetails.length);
    
    // 8. RESULTADO FINAL
    console.log('\nüéØ RESULTADO FINAL:');
    
    const hasCompleteContext = contextForLLM.services.length > 0 && 
                              contextForLLM.professionals.length > 0 &&
                              Object.keys(contextForLLM.servicesDetails).length > 0;
    
    if (hasCompleteContext) {
      console.log('‚úÖ CONTEXTUALIZA√á√ÉO COMPLETA FUNCIONANDO!');
      console.log('   O LLM deve conseguir responder sobre:');
      console.log('   - Servi√ßos dispon√≠veis');
      console.log('   - Profissionais da cl√≠nica');
      console.log('   - Informa√ß√µes detalhadas');
    } else {
      console.log('‚ùå CONTEXTUALIZA√á√ÉO INCOMPLETA!');
      console.log('   O LLM N√ÉO conseguir√° responder adequadamente');
    }
    
    // 9. DEBUG: Verificar se h√° dados faltando
    if (!hasCompleteContext) {
      console.log('\nüîç DEBUG - DADOS FALTANDO:');
      console.log('   - services.length:', contextForLLM.services.length);
      console.log('   - professionals.length:', contextForLLM.professionals.length);
      console.log('   - servicesDetails keys:', Object.keys(contextForLLM.servicesDetails));
      console.log('   - professionalsDetails.length:', contextForLLM.professionalsDetails.length);
    }
    
  } catch (error) {
    console.error('üí• ERRO NO TESTE ROBUSTO:', error);
  }
}

testRobustContextualization();
