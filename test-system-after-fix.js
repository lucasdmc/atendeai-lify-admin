const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configurar Supabase
const supabase = createClient(
  'https://niakqdolcdwxtrkbqmdi.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw'
);

async function testSystemAfterFix() {
  console.log('üß™ TESTANDO SISTEMA AP√ìS CORRE√á√ïES');
  console.log('=====================================');

  try {
    // 1. Testar tabela conversation_memory
    console.log('\n1Ô∏è‚É£ Testando tabela conversation_memory...');
    const { data: memoryData, error: memoryError } = await supabase
      .from('conversation_memory')
      .select('*')
      .limit(1);

    if (memoryError) {
      console.error('‚ùå Erro na tabela conversation_memory:', memoryError);
    } else {
      console.log('‚úÖ Tabela conversation_memory funcionando!');
    }

    // 2. Testar tabela ai_whatsapp_messages
    console.log('\n2Ô∏è‚É£ Testando tabela ai_whatsapp_messages...');
    const { data: messagesData, error: messagesError } = await supabase
      .from('ai_whatsapp_messages')
      .select('*')
      .limit(1);

    if (messagesError) {
      console.error('‚ùå Erro na tabela ai_whatsapp_messages:', messagesError);
    } else {
      console.log('‚úÖ Tabela ai_whatsapp_messages funcionando!');
    }

    // 3. Testar inser√ß√£o de mem√≥ria
    console.log('\n3Ô∏è‚É£ Testando inser√ß√£o de mem√≥ria...');
    const testPhone = '554730915628';
    const { data: insertData, error: insertError } = await supabase
      .from('conversation_memory')
      .upsert({
        phone_number: testPhone,
        user_name: 'Teste Sistema',
        interaction_count: 1,
        last_interaction: new Date().toISOString()
      }, {
        onConflict: 'phone_number'
      });

    if (insertError) {
      console.error('‚ùå Erro ao inserir mem√≥ria:', insertError);
    } else {
      console.log('‚úÖ Inser√ß√£o de mem√≥ria funcionando!');
    }

    // 4. Testar inser√ß√£o de mensagem
    console.log('\n4Ô∏è‚É£ Testando inser√ß√£o de mensagem...');
    const { data: messageInsertData, error: messageInsertError } = await supabase
      .from('ai_whatsapp_messages')
      .insert({
        phone_number: testPhone,
        sender: 'user',
        content: 'Teste do sistema ap√≥s corre√ß√µes'
      });

    if (messageInsertError) {
      console.error('‚ùå Erro ao inserir mensagem:', messageInsertError);
    } else {
      console.log('‚úÖ Inser√ß√£o de mensagem funcionando!');
    }

    // 5. Testar backend
    console.log('\n5Ô∏è‚É£ Testando backend...');
    try {
      const response = await fetch('http://localhost:3001/health');
      if (response.ok) {
        console.log('‚úÖ Backend funcionando!');
      } else {
        console.log('‚ö†Ô∏è Backend retornou status:', response.status);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel conectar ao backend:', error.message);
    }

    // 6. Testar WhatsApp
    console.log('\n6Ô∏è‚É£ Testando status do WhatsApp...');
    try {
      const whatsappResponse = await fetch('http://localhost:3001/whatsapp/status');
      if (whatsappResponse.ok) {
        const whatsappData = await whatsappResponse.json();
        console.log('‚úÖ Status do WhatsApp:', whatsappData);
      } else {
        console.log('‚ö†Ô∏è WhatsApp retornou status:', whatsappResponse.status);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar WhatsApp:', error.message);
    }

    // 7. Verificar arquivo de contextualiza√ß√£o
    console.log('\n7Ô∏è‚É£ Verificando arquivo de contextualiza√ß√£o...');
    const fs = require('fs');
    const path = require('path');
    
    const contextualizacaoPath = path.join(__dirname, 'atendeai-lify-backend/src/data/contextualizacao-cardioprime.json');
    
    if (fs.existsSync(contextualizacaoPath)) {
      console.log('‚úÖ Arquivo de contextualiza√ß√£o da CardioPrime encontrado!');
      const contextualizacao = JSON.parse(fs.readFileSync(contextualizacaoPath, 'utf8'));
      console.log('üìã Cl√≠nica:', contextualizacao.clinica.informacoes_basicas.nome);
      console.log('üë®‚Äç‚öïÔ∏è Agente:', contextualizacao.agente_ia.configuracao.nome);
    } else {
      console.log('‚ö†Ô∏è Arquivo de contextualiza√ß√£o n√£o encontrado');
    }

    console.log('\nüéØ TESTE COMPLETO!');
    console.log('üìã RESUMO DAS CORRE√á√ïES:');
    console.log('   ‚úÖ Token do WhatsApp atualizado');
    console.log('   ‚úÖ Tabela conversation_memory corrigida');
    console.log('   ‚úÖ Tabela ai_whatsapp_messages criada');
    console.log('   ‚úÖ ConversationMemoryService corrigido');
    console.log('   ‚úÖ Contextualiza√ß√£o da CardioPrime criada');
    console.log('   ‚úÖ Sistema reiniciado');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('1. Envie uma mensagem para o WhatsApp: 554730915628');
    console.log('2. Teste a mem√≥ria persistente');
    console.log('3. Verifique se a contextualiza√ß√£o est√° funcionando');
    console.log('4. Monitore os logs do sistema');

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no teste:', error);
  }
}

testSystemAfterFix(); 