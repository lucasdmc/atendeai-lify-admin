#!/usr/bin/env node

/**
 * Script para debugar permiss√µes de cl√≠nicas
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîç DEBUGANDO PERMISS√ïES DE CL√çNICAS\n');

async function debugClinicPermissions() {
  try {
    // 1. Verificar se h√° cl√≠nicas no banco
    console.log('1Ô∏è‚É£ Verificando cl√≠nicas no banco...');
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*');

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', clinicsError);
      return;
    }

    console.log(`‚úÖ Total de cl√≠nicas no banco: ${clinics?.length || 0}`);
    
    if (clinics && clinics.length > 0) {
      console.log('\nüìã Cl√≠nicas encontradas:');
      clinics.forEach((clinic, index) => {
        console.log(`${index + 1}. ${clinic.name} (ID: ${clinic.id})`);
        console.log(`   - Ativa: ${clinic.is_active ? 'Sim' : 'N√£o'}`);
        console.log(`   - Criada em: ${clinic.created_at}`);
        console.log('');
      });
    }

    // 2. Verificar se o usu√°rio atual pode ver cl√≠nicas
    console.log('2Ô∏è‚É£ Verificando permiss√µes do usu√°rio atual...');
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError);
      return;
    }

    if (user) {
      console.log(`‚úÖ Usu√°rio logado: ${user.email} (ID: ${user.id})`);
      
      // 3. Verificar perfil do usu√°rio
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (profileError) {
        console.error('‚ùå Erro ao buscar perfil:', profileError);
      } else {
        console.log(`‚úÖ Perfil encontrado: ${profile.role}`);
        console.log(`‚úÖ Permiss√µes: ${profile.permissions?.join(', ') || 'Nenhuma'}`);
      }
    } else {
      console.log('‚ùå Nenhum usu√°rio logado');
    }

    // 4. Tentar buscar cl√≠nicas com diferentes filtros
    console.log('\n3Ô∏è‚É£ Testando diferentes consultas de cl√≠nicas...');
    
    // Teste 1: Buscar todas as cl√≠nicas
    const { data: allClinics, error: allError } = await supabase
      .from('clinics')
      .select('*');
    
    console.log(`üìä Busca sem filtro: ${allClinics?.length || 0} cl√≠nicas`);
    if (allError) console.log(`‚ùå Erro: ${allError.message}`);

    // Teste 2: Buscar apenas cl√≠nicas ativas
    const { data: activeClinics, error: activeError } = await supabase
      .from('clinics')
      .select('*')
      .eq('is_active', true);
    
    console.log(`üìä Busca cl√≠nicas ativas: ${activeClinics?.length || 0} cl√≠nicas`);
    if (activeError) console.log(`‚ùå Erro: ${activeError.message}`);

    // Teste 3: Buscar apenas o nome das cl√≠nicas
    const { data: clinicNames, error: namesError } = await supabase
      .from('clinics')
      .select('name');
    
    console.log(`üìä Busca apenas nomes: ${clinicNames?.length || 0} cl√≠nicas`);
    if (namesError) console.log(`‚ùå Erro: ${namesError.message}`);

    // 5. Verificar se h√° problemas de RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    console.log('üí° Se houver erro 400, pode ser problema de RLS ou permiss√µes');
    console.log('üí° Verifique as pol√≠ticas da tabela clinics no painel do Supabase');

    console.log('\nüìã RESUMO:');
    console.log(`‚úÖ Cl√≠nicas no banco: ${clinics?.length || 0}`);
    console.log(`‚úÖ Usu√°rio logado: ${user ? 'Sim' : 'N√£o'}`);
    console.log(`‚úÖ Pode ver cl√≠nicas: ${allClinics ? 'Sim' : 'N√£o'}`);
    
    if (clinics && clinics.length > 0) {
      console.log('\nüéâ PROBLEMA RESOLVIDO!');
      console.log('H√° cl√≠nicas no banco. O erro 400 pode ser tempor√°rio ou de cache.');
      console.log('Tente recarregar a p√°gina do frontend.');
    } else {
      console.log('\nüö® PROBLEMA PERSISTE:');
      console.log('N√£o h√° cl√≠nicas no banco ou n√£o consegue acess√°-las.');
    }

  } catch (error) {
    console.error('‚ùå Erro durante debug:', error);
  }
}

// Executar debug
debugClinicPermissions(); 