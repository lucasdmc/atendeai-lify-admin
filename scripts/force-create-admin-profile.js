import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function forceCreateAdminProfile() {
  console.log('üîß For√ßando cria√ß√£o do perfil admin_lify...\n');

  try {
    // 1. Verificar se h√° sess√£o ativa
    console.log('1Ô∏è‚É£ Verificando sess√£o ativa...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro ao verificar sess√£o:', sessionError);
      return;
    }

    if (!session) {
      console.log('‚ö†Ô∏è  Nenhuma sess√£o ativa encontrada');
      console.log('üí° Fa√ßa login no frontend primeiro');
      return;
    }

    console.log('‚úÖ Sess√£o ativa encontrada');
    console.log(`üë§ User ID: ${session.user.id}`);
    console.log(`üìß Email: ${session.user.email}\n`);

    // 2. Deletar perfil existente (se houver)
    console.log('2Ô∏è‚É£ Deletando perfil existente...');
    const { error: deleteError } = await supabase
      .from('user_profiles')
      .delete()
      .eq('user_id', session.user.id);

    if (deleteError) {
      console.log('‚ö†Ô∏è  Erro ao deletar perfil (pode n√£o existir):', deleteError.message);
    } else {
      console.log('‚úÖ Perfil existente deletado');
    }

    // 3. Criar novo perfil como admin_lify
    console.log('3Ô∏è‚É£ Criando novo perfil como admin_lify...');
    const { data: newProfile, error: createError } = await supabase
      .from('user_profiles')
      .insert({
        user_id: session.user.id,
        email: session.user.email,
        name: 'Lucas Admin Lify',
        role: 'admin_lify',
        status: true
      })
      .select('*')
      .single();

    if (createError) {
      console.error('‚ùå Erro ao criar perfil:', createError);
      return;
    }

    console.log('‚úÖ Perfil criado com sucesso:', newProfile);

    // 4. Verificar se as permiss√µes existem
    console.log('4Ô∏è‚É£ Verificando permiss√µes...');
    const { data: permissions, error: permError } = await supabase
      .from('role_permissions')
      .select('*')
      .eq('role', 'admin_lify');

    if (permError) {
      console.error('‚ùå Erro ao buscar permiss√µes:', permError);
    } else {
      console.log(`‚úÖ ${permissions.length} permiss√µes encontradas para admin_lify`);
    }

    // 5. Testar acesso ao perfil
    console.log('5Ô∏è‚É£ Testando acesso ao perfil...');
    const { data: testProfile, error: testError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', session.user.id)
      .single();

    if (testError) {
      console.error('‚ùå Erro ao testar acesso:', testError);
    } else {
      console.log('‚úÖ Acesso ao perfil funcionando:', testProfile);
    }

    console.log('\nüéâ Perfil admin_lify criado com sucesso!');
    console.log('üîÑ Recarregue a p√°gina para ver as mudan√ßas no sidebar.');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar
forceCreateAdminProfile().catch(console.error); 