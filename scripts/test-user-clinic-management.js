import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testUserClinicManagement() {
  console.log('üß™ Testando Sistema de Gest√£o de Usu√°rios e Cl√≠nicas\n');

  try {
    // 1. Verificar estrutura das tabelas
    console.log('1Ô∏è‚É£ Verificando estrutura das tabelas...');
    
    const { data: userProfiles, error: userProfilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(5);

    if (userProfilesError) {
      console.error('‚ùå Erro ao buscar user_profiles:', userProfilesError);
      return;
    }

    console.log(`‚úÖ user_profiles: ${userProfiles?.length || 0} registros encontrados`);

    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .limit(5);

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar clinics:', clinicsError);
      return;
    }

    console.log(`‚úÖ clinics: ${clinics?.length || 0} registros encontrados`);

    const { data: clinicUsers, error: clinicUsersError } = await supabase
      .from('clinic_users')
      .select('*')
      .limit(5);

    if (clinicUsersError) {
      console.error('‚ùå Erro ao buscar clinic_users:', clinicUsersError);
      return;
    }

    console.log(`‚úÖ clinic_users: ${clinicUsers?.length || 0} registros encontrados`);

    // 2. Verificar usu√°rios e suas associa√ß√µes
    console.log('\n2Ô∏è‚É£ Verificando associa√ß√µes de usu√°rios...');
    
    const { data: userAssociations, error: associationsError } = await supabase
      .from('user_profiles')
      .select(`
        *,
        clinics(name)
      `)
      .order('role', { ascending: true });

    if (associationsError) {
      console.error('‚ùå Erro ao buscar associa√ß√µes:', associationsError);
      return;
    }

    console.log('üìã Usu√°rios e suas associa√ß√µes:');
    userAssociations?.forEach(user => {
      const clinicName = user.clinics?.name || 'Sem cl√≠nica (Usu√°rio Mestre)';
      const isMaster = user.role === 'admin_lify' || user.role === 'suporte_lify';
      console.log(`   - ${user.name} (${user.email})`);
      console.log(`     Role: ${user.role} | Cl√≠nica: ${clinicName} | Mestre: ${isMaster ? 'Sim' : 'N√£o'}`);
    });

    // 3. Verificar cl√≠nicas dispon√≠veis
    console.log('\n3Ô∏è‚É£ Verificando cl√≠nicas dispon√≠veis...');
    
    const { data: allClinics, error: allClinicsError } = await supabase
      .from('clinics')
      .select('id, name, email')
      .order('name', { ascending: true });

    if (allClinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', allClinicsError);
      return;
    }

    console.log('üè• Cl√≠nicas dispon√≠veis:');
    allClinics?.forEach(clinic => {
      console.log(`   - ${clinic.name} (ID: ${clinic.id})`);
    });

    // 4. Testar cria√ß√£o de usu√°rio via Edge Function
    console.log('\n4Ô∏è‚É£ Testando cria√ß√£o de usu√°rio via Edge Function...');
    
    const testUserData = {
      name: 'Usu√°rio Teste Cl√≠nica',
      email: `teste.clinica.${Date.now()}@exemplo.com`,
      password: '123456',
      role: 'atendente',
      clinicId: allClinics?.[0]?.id
    };

    console.log('üìù Dados do usu√°rio de teste:', testUserData);

    try {
      const { data: createResult, error: createError } = await supabase.functions.invoke('create-user-auth', {
        body: testUserData
      });

      if (createError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createError);
      } else if (createResult?.success) {
        console.log('‚úÖ Usu√°rio criado com sucesso:', createResult.user);
        
        // Verificar se a associa√ß√£o foi criada
        const { data: newUserProfile } = await supabase
          .from('user_profiles')
          .select('*, clinics(name)')
          .eq('user_id', createResult.user.id)
          .single();

        if (newUserProfile) {
          console.log('‚úÖ Perfil criado:', {
            name: newUserProfile.name,
            role: newUserProfile.role,
            clinic: newUserProfile.clinics?.name || 'Sem cl√≠nica'
          });
        }

        // Verificar associa√ß√£o na tabela clinic_users
        const { data: clinicAssociation } = await supabase
          .from('clinic_users')
          .select('*')
          .eq('user_id', createResult.user.id)
          .single();

        if (clinicAssociation) {
          console.log('‚úÖ Associa√ß√£o clinic_users criada:', {
            clinic_id: clinicAssociation.clinic_id,
            role: clinicAssociation.role,
            is_active: clinicAssociation.is_active
          });
        }

        // Limpar usu√°rio de teste
        console.log('üßπ Limpando usu√°rio de teste...');
        await supabase.auth.admin.deleteUser(createResult.user.id);
        await supabase.from('user_profiles').delete().eq('user_id', createResult.user.id);
        await supabase.from('clinic_users').delete().eq('user_id', createResult.user.id);
        console.log('‚úÖ Usu√°rio de teste removido');
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar cria√ß√£o:', error);
    }

    // 5. Verificar fun√ß√µes auxiliares
    console.log('\n5Ô∏è‚É£ Verificando fun√ß√µes auxiliares...');
    
    try {
      // Testar fun√ß√£o has_global_clinic_access
      const { data: globalAccessTest } = await supabase
        .rpc('has_global_clinic_access', { 
          user_uuid: userAssociations?.find(u => u.role === 'admin_lify')?.user_id 
        });

      console.log('‚úÖ Fun√ß√£o has_global_clinic_access:', globalAccessTest);

      // Testar fun√ß√£o requires_clinic_association
      const { data: requiresClinicTest } = await supabase
        .rpc('requires_clinic_association', { 
          user_uuid: userAssociations?.find(u => u.role === 'atendente')?.user_id 
        });

      console.log('‚úÖ Fun√ß√£o requires_clinic_association:', requiresClinicTest);
    } catch (error) {
      console.log('‚ö†Ô∏è Fun√ß√µes auxiliares n√£o dispon√≠veis:', error.message);
    }

    // 6. Resumo final
    console.log('\n6Ô∏è‚É£ Resumo do Sistema:');
    console.log('‚úÖ Estrutura implementada:');
    console.log('   - Tabela user_profiles com coluna clinic_id');
    console.log('   - Tabela clinic_users para associa√ß√µes');
    console.log('   - Pol√≠ticas RLS configuradas');
    console.log('   - Edge Function atualizada');
    console.log('   - Interface de gest√£o de usu√°rios atualizada');
    
    console.log('\nüìã Regras de neg√≥cio:');
    console.log('   - Admin Lify e Suporte Lify: Usu√°rios mestres (sem cl√≠nica espec√≠fica)');
    console.log('   - Demais usu√°rios: Devem estar associados a uma cl√≠nica espec√≠fica');
    console.log('   - Seletor de cl√≠nicas: Apenas para usu√°rios mestres');
    console.log('   - Gest√£o de usu√°rios: Permite selecionar cl√≠nica na cria√ß√£o/edi√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testUserClinicManagement(); 