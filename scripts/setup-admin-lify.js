import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupAdminLify() {
  console.log('üëë Configurando perfil admin_lify...')
  
  try {
    // 1. Verificar se o usu√°rio existe
    console.log('\n1Ô∏è‚É£ Verificando usu√°rio...')
    
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.error('‚ùå Erro ao verificar usu√°rio:', userError)
      console.log('üí° Fa√ßa login no frontend primeiro')
      return
    }
    
    if (!user) {
      console.log('‚ùå Nenhum usu√°rio logado')
      console.log('üí° Fa√ßa login no frontend primeiro')
      return
    }
    
    console.log('‚úÖ Usu√°rio encontrado')
    console.log(`   Email: ${user.email}`)
    console.log(`   ID: ${user.id}`)
    
    // 2. Verificar perfil atual
    console.log('\n2Ô∏è‚É£ Verificando perfil atual...')
    
    const { data: currentProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .single()
    
    if (profileError && profileError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar perfil:', profileError)
    } else if (currentProfile) {
      console.log('üìã Perfil atual:')
      console.log(`   Email: ${currentProfile.email}`)
      console.log(`   Role: ${currentProfile.role}`)
      console.log(`   Criado em: ${currentProfile.created_at}`)
    } else {
      console.log('‚ùå Perfil n√£o encontrado - ser√° criado')
    }
    
    // 3. Criar/atualizar perfil como admin_lify
    console.log('\n3Ô∏è‚É£ Configurando perfil admin_lify...')
    
    const { data: newProfile, error: upsertError } = await supabase
      .from('user_profiles')
      .upsert({
        user_id: user.id,
        email: user.email,
        role: 'admin_lify',
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id'
      })
      .select()
      .single()
    
    if (upsertError) {
      console.error('‚ùå Erro ao configurar perfil:', upsertError)
      console.log('üí° Execute o SQL manual no Supabase Dashboard')
      return
    }
    
    console.log('‚úÖ Perfil admin_lify configurado com sucesso!')
    console.log(`   Email: ${newProfile.email}`)
    console.log(`   Role: ${newProfile.role}`)
    console.log(`   Atualizado em: ${newProfile.updated_at}`)
    
    // 4. Verificar permiss√µes
    console.log('\n4Ô∏è‚É£ Verificando permiss√µes...')
    
    const tables = ['clinics', 'users', 'conversations', 'messages', 'appointments', 'user_profiles']
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1)
        
        if (error && error.code === '42501') {
          console.log(`‚ùå Sem permiss√£o para ${table}`)
        } else if (error && error.code === '42P01') {
          console.log(`‚ö†Ô∏è  Tabela ${table} n√£o existe`)
        } else if (error) {
          console.log(`‚ö†Ô∏è  Erro ao acessar ${table}:`, error.message)
        } else {
          console.log(`‚úÖ Acesso permitido a ${table}`)
        }
      } catch (err) {
        console.log(`‚ùå Erro ao verificar ${table}:`, err.message)
      }
    }
    
    // 5. Instru√ß√µes finais
    console.log('\n5Ô∏è‚É£ Configura√ß√£o completa!')
    console.log('üéâ Seu perfil agora tem role admin_lify')
    console.log('üìã Permiss√µes inclu√≠das:')
    console.log('   - Acesso total a todas as cl√≠nicas')
    console.log('   - Gerenciamento de usu√°rios')
    console.log('   - Visualiza√ß√£o de todas as conversas')
    console.log('   - Acesso a todos os agendamentos')
    console.log('   - Configura√ß√µes do sistema')
    console.log('')
    console.log('üí° Pr√≥ximos passos:')
    console.log('   1. Recarregue a p√°gina do frontend')
    console.log('   2. Verifique se todas as funcionalidades est√£o dispon√≠veis')
    console.log('   3. Teste a cria√ß√£o de cl√≠nicas e usu√°rios')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

setupAdminLify() 