import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function testDisconnectFix() {
  console.log('üß™ Testando corre√ß√£o da funcionalidade de desconectar calend√°rios...')
  
  const userId = '5cd566ec-0064-4c9f-946b-182deaf204d4'
  
  try {
    // 1. Verificar estado inicial
    console.log('\n1Ô∏è‚É£ Verificando estado inicial...')
    
    const { data: userCalendars, error: calendarsError } = await supabase
      .from('user_calendars')
      .select('*')
      .eq('user_id', userId)
    
    if (calendarsError) {
      console.error('‚ùå Erro ao buscar calend√°rios:', calendarsError)
    } else {
      console.log(`üìä Calend√°rios na tabela user_calendars: ${userCalendars?.length || 0}`)
    }
    
    const { data: syncLogs, error: logsError } = await supabase
      .from('calendar_sync_logs')
      .select('*')
      .eq('user_calendar_id', userCalendars?.[0]?.id || 'none')
    
    if (logsError) {
      console.error('‚ùå Erro ao buscar logs de sincroniza√ß√£o:', logsError)
    } else {
      console.log(`üìù Logs de sincroniza√ß√£o: ${syncLogs?.length || 0}`)
    }
    
    // 2. Simular o processo de desconex√£o
    console.log('\n2Ô∏è‚É£ Simulando processo de desconex√£o...')
    
    if (userCalendars && userCalendars.length > 0) {
      console.log('üîç Encontrados calend√°rios para desconectar...')
      
      // Primeiro deletar logs de sincroniza√ß√£o
      const { error: deleteLogsError } = await supabase
        .from('calendar_sync_logs')
        .delete()
        .in('user_calendar_id', userCalendars.map(cal => cal.id))
      
      if (deleteLogsError) {
        console.error('‚ùå Erro ao deletar logs de sincroniza√ß√£o:', deleteLogsError)
      } else {
        console.log('‚úÖ Logs de sincroniza√ß√£o deletados com sucesso')
      }
      
      // Depois deletar calend√°rios
      const { error: deleteCalendarsError } = await supabase
        .from('user_calendars')
        .delete()
        .eq('user_id', userId)
      
      if (deleteCalendarsError) {
        console.error('‚ùå Erro ao deletar calend√°rios:', deleteCalendarsError)
      } else {
        console.log('‚úÖ Calend√°rios deletados com sucesso')
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhum calend√°rio encontrado para desconectar')
    }
    
    // 3. Verificar estado final
    console.log('\n3Ô∏è‚É£ Verificando estado final...')
    
    const { data: finalCalendars, error: finalCalendarsError } = await supabase
      .from('user_calendars')
      .select('*')
      .eq('user_id', userId)
    
    if (finalCalendarsError) {
      console.error('‚ùå Erro ao verificar calend√°rios finais:', finalCalendarsError)
    } else {
      console.log(`üìä Calend√°rios finais: ${finalCalendars?.length || 0}`)
    }
    
    // 4. Conclus√£o
    console.log('\n4Ô∏è‚É£ Conclus√£o:')
    
    if ((finalCalendars?.length || 0) === 0) {
      console.log('‚úÖ Funcionalidade de desconex√£o funcionando corretamente!')
      console.log('üí° O problema de foreign key foi resolvido')
      console.log('üéØ Agora √© seguro usar a funcionalidade de desconectar calend√°rios')
    } else {
      console.log('‚ö†Ô∏è  Ainda h√° calend√°rios - verificar se h√° outros problemas')
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testDisconnectFix() 