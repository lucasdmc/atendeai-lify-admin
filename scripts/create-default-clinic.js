#!/usr/bin/env node

/**
 * Script para criar cl√≠nica padr√£o e resolver problemas
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üè• CRIANDO CL√çNICA PADR√ÉO E RESOLVENDO PROBLEMAS\n');

async function createDefaultClinic() {
  try {
    // 1. Verificar se j√° existe alguma cl√≠nica
    console.log('1Ô∏è‚É£ Verificando cl√≠nicas existentes...');
    const { data: existingClinics, error: checkError } = await supabase
      .from('clinics')
      .select('*')
      .limit(1);

    if (checkError) {
      console.error('‚ùå Erro ao verificar cl√≠nicas:', checkError);
      return;
    }

    if (existingClinics && existingClinics.length > 0) {
      console.log('‚úÖ J√° existe pelo menos uma cl√≠nica no sistema');
      console.log(`üìã Cl√≠nica encontrada: ${existingClinics[0].name}`);
      return;
    }

    // 2. Criar cl√≠nica padr√£o
    console.log('2Ô∏è‚É£ Criando cl√≠nica padr√£o...');
    const defaultClinic = {
      name: 'Cl√≠nica Padr√£o',
      cnpj: '00.000.000/0001-00',
      email: 'contato@clinicapadrao.com',
      phone: '(11) 99999-9999',
      address: 'Rua das Cl√≠nicas, 123',
      city: 'S√£o Paulo',
      state: 'SP',
      website: 'https://clinicapadrao.com',
      is_active: true,
      business_hours: {
        monday: { start: '08:00', end: '18:00' },
        tuesday: { start: '08:00', end: '18:00' },
        wednesday: { start: '08:00', end: '18:00' },
        thursday: { start: '08:00', end: '18:00' },
        friday: { start: '08:00', end: '18:00' },
        saturday: { start: '08:00', end: '12:00' },
        sunday: { start: null, end: null }
      },
      specialties: ['Cl√≠nica Geral', 'Pediatria', 'Ginecologia'],
      payment_methods: ['Dinheiro', 'Cart√£o de Cr√©dito', 'Cart√£o de D√©bito', 'PIX'],
      emergency_contacts: {
        phone: '(11) 99999-8888',
        email: 'emergencia@clinicapadrao.com'
      },
      admin_notes: 'Cl√≠nica padr√£o criada automaticamente pelo sistema',
      brand_color: '#FF6B35',
      language: 'pt-BR'
    };

    const { data: newClinic, error: createError } = await supabase
      .from('clinics')
      .insert([defaultClinic])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå Erro ao criar cl√≠nica:', createError);
      return;
    }

    console.log('‚úÖ Cl√≠nica padr√£o criada com sucesso!');
    console.log(`üìã Nome: ${newClinic.name}`);
    console.log(`üÜî ID: ${newClinic.id}`);

    // 3. Verificar se a tabela clinic_users existe
    console.log('3Ô∏è‚É£ Verificando tabela clinic_users...');
    const { data: clinicUsersTest, error: clinicUsersError } = await supabase
      .from('clinic_users')
      .select('*')
      .limit(1);

    if (clinicUsersError && clinicUsersError.code === '42P01') {
      console.log('‚ö†Ô∏è Tabela clinic_users n√£o existe - criando...');
      
      // Criar migration para clinic_users
      const migrationContent = `
-- Criar tabela clinic_users para associa√ß√£o usu√°rio-cl√≠nica
CREATE TABLE IF NOT EXISTS clinic_users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  clinic_id UUID REFERENCES clinics(id) ON DELETE CASCADE,
  role VARCHAR(50) DEFAULT 'user',
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, clinic_id)
);

-- Criar √≠ndices
CREATE INDEX IF NOT EXISTS idx_clinic_users_user_id ON clinic_users(user_id);
CREATE INDEX IF NOT EXISTS idx_clinic_users_clinic_id ON clinic_users(clinic_id);
CREATE INDEX IF NOT EXISTS idx_clinic_users_is_active ON clinic_users(is_active);

-- Adicionar coment√°rios
COMMENT ON TABLE clinic_users IS 'Associa√ß√£o entre usu√°rios e cl√≠nicas';
COMMENT ON COLUMN clinic_users.role IS 'Papel do usu√°rio na cl√≠nica: admin, gestor, atendente, user';
      `;

      console.log('üìù Migration criada para clinic_users');
      console.log('üí° Execute: supabase db push para aplicar a migration');
    } else {
      console.log('‚úÖ Tabela clinic_users existe');
    }

    // 4. Criar agente padr√£o para a cl√≠nica
    console.log('4Ô∏è‚É£ Criando agente padr√£o...');
    const defaultAgent = {
      name: 'Assistente Virtual',
      description: 'Assistente virtual padr√£o da cl√≠nica',
      personality: 'profissional e acolhedor',
      temperature: 0.7,
      clinic_id: newClinic.id,
      is_active: true,
      context_json: JSON.stringify({
        servicos: ['consulta', 'exame'],
        horarios: '8h-18h',
        especialidades: ['cl√≠nica geral', 'pediatria'],
        informacoes: {
          nome: 'Cl√≠nica Padr√£o',
          telefone: '(11) 99999-9999',
          endereco: 'Rua das Cl√≠nicas, 123 - S√£o Paulo/SP'
        }
      }, null, 2),
      whatsapp_number: null,
      is_whatsapp_connected: false
    };

    const { data: newAgent, error: agentError } = await supabase
      .from('agents')
      .insert([defaultAgent])
      .select()
      .single();

    if (agentError) {
      console.error('‚ùå Erro ao criar agente:', agentError);
    } else {
      console.log('‚úÖ Agente padr√£o criado com sucesso!');
      console.log(`ü§ñ Nome: ${newAgent.name}`);
    }

    // 5. Criar conex√£o WhatsApp padr√£o
    console.log('5Ô∏è‚É£ Criando conex√£o WhatsApp padr√£o...');
    const defaultWhatsAppConnection = {
      clinic_id: newClinic.id,
      phone_number: '+5511999999999',
      is_active: true,
      qr_code_scanned_at: new Date().toISOString()
    };

    const { data: newWhatsAppConnection, error: whatsappError } = await supabase
      .from('whatsapp_connections')
      .insert([defaultWhatsAppConnection])
      .select()
      .single();

    if (whatsappError) {
      console.error('‚ùå Erro ao criar conex√£o WhatsApp:', whatsappError);
    } else {
      console.log('‚úÖ Conex√£o WhatsApp padr√£o criada!');
      console.log(`üì± N√∫mero: ${newWhatsAppConnection.phone_number}`);
    }

    console.log('\nüéâ CONFIGURA√á√ÉO PADR√ÉO CONCLU√çDA!');
    console.log('\nüìã RESUMO DO QUE FOI CRIADO:');
    console.log(`‚úÖ Cl√≠nica: ${newClinic.name} (ID: ${newClinic.id})`);
    console.log(`‚úÖ Agente: ${newAgent?.name || 'Erro ao criar'}`);
    console.log(`‚úÖ WhatsApp: ${newWhatsAppConnection?.phone_number || 'Erro ao criar'}`);
    
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Execute: supabase db push (se a tabela clinic_users n√£o existir)');
    console.log('2. Recarregue a p√°gina do sistema');
    console.log('3. O erro 400 deve ser resolvido');
    console.log('4. O QR Code deve funcionar normalmente');

  } catch (error) {
    console.error('‚ùå Erro durante configura√ß√£o:', error);
  }
}

// Executar configura√ß√£o
createDefaultClinic(); 