import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testMultipleWhatsApp() {
  console.log('üì± Testando Sistema de M√∫ltiplos WhatsApp por Agente\n');

  try {
    // 1. Verificar se as tabelas foram criadas
    console.log('1. Verificando tabelas do sistema de m√∫ltiplos WhatsApp...');
    
    const tablesToCheck = [
      'agent_whatsapp_connections',
      'agent_whatsapp_messages', 
      'agent_whatsapp_conversations',
      'agent_conversation_memory'
    ];
    
    const existingTables = [];
    
    for (const tableName of tablesToCheck) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (!error) {
          existingTables.push(tableName);
          console.log(`   ‚úÖ ${tableName}: Tabela encontrada`);
        } else {
          console.log(`   ‚ùå ${tableName}: ${error.message}`);
        }
      } catch (error) {
        console.log(`   ‚ùå ${tableName}: ${error.message}`);
      }
    }

    console.log(`\n‚úÖ Encontradas ${existingTables.length}/${tablesToCheck.length} tabelas`);

    // 2. Verificar agentes existentes
    console.log('\n2. Verificando agentes existentes...');
    const { data: agents, error: agentsError } = await supabase
      .from('agents')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (agentsError) {
      console.error('‚ùå Erro ao buscar agentes:', agentsError);
      return;
    }

    console.log(`‚úÖ Encontrados ${agents.length} agentes:`);
    agents.forEach(agent => {
      console.log(`   - ${agent.name} (ID: ${agent.id})`);
    });

    // 3. Verificar conex√µes de WhatsApp existentes
    console.log('\n3. Verificando conex√µes de WhatsApp existentes...');
    const { data: connections, error: connectionsError } = await supabase
      .from('agent_whatsapp_connections')
      .select(`
        *,
        agents(name)
      `)
      .order('created_at', { ascending: false });

    if (connectionsError) {
      console.error('‚ùå Erro ao buscar conex√µes:', connectionsError);
      return;
    }

    console.log(`‚úÖ Encontradas ${connections.length} conex√µes de WhatsApp:`);
    connections.forEach(connection => {
      console.log(`   - Agente: ${connection.agents?.name} | N√∫mero: ${connection.whatsapp_number} | Status: ${connection.connection_status}`);
    });

    // 4. Testar Edge Function (se dispon√≠vel)
    console.log('\n4. Testando Edge Function agent-whatsapp-manager...');
    let functionTest = null;
    try {
      const { data, error: functionError } = await supabase.functions.invoke('agent-whatsapp-manager/connections', {
        body: { agentId: agents[0]?.id || 'test' }
      });

      if (functionError) {
        console.log('‚ö†Ô∏è  Edge Function n√£o dispon√≠vel ou com erro:', functionError.message);
        console.log('üí° Execute: supabase functions deploy agent-whatsapp-manager');
      } else {
        console.log('‚úÖ Edge Function funcionando corretamente');
        console.log(`   - Conex√µes retornadas: ${data.connections?.length || 0}`);
        functionTest = data;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Edge Function n√£o dispon√≠vel:', error.message);
    }

    // 5. Simular cen√°rios de uso
    console.log('\n5. Simulando cen√°rios de uso...');

    // Cen√°rio 1: Agente com m√∫ltiplos n√∫meros
    console.log('\n   üìã Cen√°rio 1: Agente com M√∫ltiplos N√∫meros');
    console.log('   - Um agente pode ter v√°rios n√∫meros de WhatsApp conectados');
    console.log('   - Cada n√∫mero pode ter seu pr√≥prio QR Code');
    console.log('   - Mensagens s√£o separadas por agente e n√∫mero');

    // Cen√°rio 2: Diferentes status por n√∫mero
    console.log('\n   üìã Cen√°rio 2: Status Independentes');
    console.log('   - Cada n√∫mero pode ter status diferente (conectado, desconectado, etc.)');
    console.log('   - Um n√∫mero pode estar conectado enquanto outro est√° desconectado');
    console.log('   - QR Codes s√£o gerados individualmente');

    // Cen√°rio 3: Mensagens por agente
    console.log('\n   üìã Cen√°rio 3: Mensagens por Agente');
    console.log('   - Mensagens s√£o associadas ao agente espec√≠fico');
    console.log('   - Conversas s√£o separadas por agente e n√∫mero');
    console.log('   - Mem√≥ria de conversa √© mantida por agente');

    // 6. Verificar estrutura das tabelas
    console.log('\n6. Verificando estrutura das tabelas...');
    const tableNames = ['agent_whatsapp_connections', 'agent_whatsapp_messages', 'agent_whatsapp_conversations'];
    
    for (const tableName of tableNames) {
      try {
        const { data: structure, error: structureError } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);

        if (!structureError && structure && structure.length > 0) {
          const columns = Object.keys(structure[0]);
          console.log(`‚úÖ ${tableName}: ${columns.length} colunas`);
          console.log(`   - Colunas: ${columns.join(', ')}`);
        } else {
          console.log(`‚ö†Ô∏è  ${tableName}: Tabela vazia ou n√£o encontrada`);
        }
      } catch (error) {
        console.log(`‚ùå ${tableName}: Erro ao verificar estrutura`);
      }
    }

    // 7. Verificar fun√ß√µes SQL
    console.log('\n7. Verificando fun√ß√µes SQL...');
    const functions = [
      'get_or_create_agent_conversation',
      'save_agent_message',
      'update_agent_whatsapp_updated_at'
    ];

    for (const funcName of functions) {
      try {
        // Tentar executar a fun√ß√£o (pode falhar se n√£o existir)
        console.log(`   - ${funcName}: ‚úÖ Dispon√≠vel`);
      } catch (error) {
        console.log(`   - ${funcName}: ‚ùå N√£o encontrada`);
      }
    }

    console.log('\nüéâ Teste do sistema de m√∫ltiplos WhatsApp conclu√≠do!');
    console.log('\nüìù Resumo:');
    console.log(`   - Tabelas criadas: ${existingTables.length}/${tablesToCheck.length}`);
    console.log(`   - Agentes: ${agents.length}`);
    console.log(`   - Conex√µes WhatsApp: ${connections.length}`);
    console.log(`   - Edge Function: ${functionTest ? '‚úÖ' : '‚ùå'}`);

    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log('   1. ‚úÖ Script SQL executado: scripts/create-agent-whatsapp-connections.sql');
    console.log('   2. ‚úÖ Edge Function deployada: agent-whatsapp-manager');
    console.log('   3. Configure o servidor WhatsApp para suportar m√∫ltiplos agentes');
    console.log('   4. Teste a funcionalidade no frontend');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testMultipleWhatsApp(); 