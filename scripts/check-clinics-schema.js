#!/usr/bin/env node

/**
 * Script para verificar estrutura da tabela clinics
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîç VERIFICANDO ESTRUTURA DA TABELA CLINICS\n');

async function checkClinicsSchema() {
  try {
    // 1. Tentar buscar uma cl√≠nica para ver a estrutura
    console.log('1Ô∏è‚É£ Verificando estrutura da tabela clinics...');
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .limit(1);

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', clinicsError);
      
      // 2. Tentar criar uma cl√≠nica com apenas o campo name
      console.log('\n2Ô∏è‚É£ Tentando criar cl√≠nica apenas com nome...');
      const { data: newClinic, error: createError } = await supabase
        .from('clinics')
        .insert([{ name: 'Cl√≠nica Padr√£o' }])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Erro ao criar cl√≠nica m√≠nima:', createError);
        
        // 3. Verificar se a tabela existe
        console.log('\n3Ô∏è‚É£ Verificando se a tabela clinics existe...');
        const { data: tableCheck, error: tableError } = await supabase
          .rpc('get_table_info', { table_name: 'clinics' });

        if (tableError) {
          console.error('‚ùå Erro ao verificar tabela:', tableError);
          console.log('\nüí° A tabela clinics pode n√£o existir ou ter problemas de permiss√£o');
        }
      } else {
        console.log('‚úÖ Cl√≠nica criada com sucesso!');
        console.log(`üìã Nome: ${newClinic.name}`);
        console.log(`üÜî ID: ${newClinic.id}`);
      }
    } else {
      console.log('‚úÖ Tabela clinics existe e est√° acess√≠vel');
      console.log(`üìä Total de cl√≠nicas: ${clinics?.length || 0}`);
      
      if (clinics && clinics.length > 0) {
        console.log('\nüìã Estrutura da primeira cl√≠nica:');
        const clinic = clinics[0];
        Object.keys(clinic).forEach(key => {
          console.log(`   - ${key}: ${typeof clinic[key]} = ${clinic[key]}`);
        });
      }
    }

    // 4. Verificar outras tabelas relacionadas
    console.log('\n4Ô∏è‚É£ Verificando outras tabelas...');
    
    const tables = ['agents', 'whatsapp_connections', 'users'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Tabela ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${table}: ${data?.length || 0} registros`);
        }
      } catch (err) {
        console.log(`‚ùå Tabela ${table}: Erro ao verificar`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
checkClinicsSchema(); 