import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function debugEdgeFunction() {
  console.log('üîç Debugando Edge Function create-user-auth\n');

  try {
    // 1. Verificar se a fun√ß√£o existe
    console.log('1Ô∏è‚É£ Verificando se a fun√ß√£o existe...');
    
    try {
      const { data: functions, error } = await supabase.functions.list();
      if (error) {
        console.error('‚ùå Erro ao listar fun√ß√µes:', error);
        return;
      }
      
      const createUserFunction = functions.find(f => f.name === 'create-user-auth');
      if (createUserFunction) {
        console.log('‚úÖ Fun√ß√£o create-user-auth encontrada');
        console.log('   Status:', createUserFunction.status);
        console.log('   Vers√£o:', createUserFunction.version);
      } else {
        console.log('‚ùå Fun√ß√£o create-user-auth n√£o encontrada');
        return;
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar fun√ß√µes:', error);
      return;
    }

    // 2. Verificar estrutura das tabelas
    console.log('\n2Ô∏è‚É£ Verificando estrutura das tabelas...');
    
    const { data: userProfiles, error: userProfilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);

    if (userProfilesError) {
      console.error('‚ùå Erro ao verificar user_profiles:', userProfilesError);
    } else {
      console.log('‚úÖ user_profiles acess√≠vel');
      console.log('   Colunas:', Object.keys(userProfiles[0] || {}));
    }

    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .limit(1);

    if (clinicsError) {
      console.error('‚ùå Erro ao verificar clinics:', clinicsError);
    } else {
      console.log('‚úÖ clinics acess√≠vel');
      console.log('   Colunas:', Object.keys(clinics[0] || {}));
    }

    const { data: clinicUsers, error: clinicUsersError } = await supabase
      .from('clinic_users')
      .select('*')
      .limit(1);

    if (clinicUsersError) {
      console.error('‚ùå Erro ao verificar clinic_users:', clinicUsersError);
    } else {
      console.log('‚úÖ clinic_users acess√≠vel');
      console.log('   Colunas:', Object.keys(clinicUsers[0] || {}));
    }

    // 3. Testar cria√ß√£o de usu√°rio sem cl√≠nica (usu√°rio mestre)
    console.log('\n3Ô∏è‚É£ Testando cria√ß√£o de usu√°rio mestre (sem cl√≠nica)...');
    
    const masterUserData = {
      name: 'Usu√°rio Mestre Teste',
      email: `mestre.teste.${Date.now()}@exemplo.com`,
      password: '123456',
      role: 'admin_lify'
      // Sem clinicId
    };

    console.log('üìù Dados do usu√°rio mestre:', masterUserData);

    try {
      const { data: masterResult, error: masterError } = await supabase.functions.invoke('create-user-auth', {
        body: masterUserData
      });

      if (masterError) {
        console.error('‚ùå Erro ao criar usu√°rio mestre:', masterError);
        console.error('   Detalhes:', masterError.message);
      } else if (masterResult?.success) {
        console.log('‚úÖ Usu√°rio mestre criado com sucesso:', masterResult.user);
        
        // Limpar usu√°rio de teste
        await supabase.auth.admin.deleteUser(masterResult.user.id);
        await supabase.from('user_profiles').delete().eq('user_id', masterResult.user.id);
        console.log('‚úÖ Usu√°rio mestre removido');
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar cria√ß√£o de usu√°rio mestre:', error);
    }

    // 4. Testar cria√ß√£o de usu√°rio com cl√≠nica
    console.log('\n4Ô∏è‚É£ Testando cria√ß√£o de usu√°rio normal (com cl√≠nica)...');
    
    // Buscar uma cl√≠nica para usar no teste
    const { data: availableClinics } = await supabase
      .from('clinics')
      .select('id, name')
      .limit(1);

    if (!availableClinics || availableClinics.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma cl√≠nica dispon√≠vel para teste');
      return;
    }

    const normalUserData = {
      name: 'Usu√°rio Normal Teste',
      email: `normal.teste.${Date.now()}@exemplo.com`,
      password: '123456',
      role: 'atendente',
      clinicId: availableClinics[0].id
    };

    console.log('üìù Dados do usu√°rio normal:', normalUserData);

    try {
      const { data: normalResult, error: normalError } = await supabase.functions.invoke('create-user-auth', {
        body: normalUserData
      });

      if (normalError) {
        console.error('‚ùå Erro ao criar usu√°rio normal:', normalError);
        console.error('   Detalhes:', normalError.message);
        
        // Tentar obter mais detalhes do erro
        if (normalError.context) {
          console.error('   Contexto:', normalError.context);
        }
      } else if (normalResult?.success) {
        console.log('‚úÖ Usu√°rio normal criado com sucesso:', normalResult.user);
        
        // Verificar se a associa√ß√£o foi criada
        const { data: newUserProfile } = await supabase
          .from('user_profiles')
          .select('*, clinics(name)')
          .eq('user_id', normalResult.user.id)
          .single();

        if (newUserProfile) {
          console.log('‚úÖ Perfil criado:', {
            name: newUserProfile.name,
            role: newUserProfile.role,
            clinic: newUserProfile.clinics?.name || 'Sem cl√≠nica'
          });
        }

        // Verificar associa√ß√£o na tabela clinic_users
        const { data: clinicAssociation } = await supabase
          .from('clinic_users')
          .select('*')
          .eq('user_id', normalResult.user.id)
          .single();

        if (clinicAssociation) {
          console.log('‚úÖ Associa√ß√£o clinic_users criada:', {
            clinic_id: clinicAssociation.clinic_id,
            role: clinicAssociation.role,
            is_active: clinicAssociation.is_active
          });
        }

        // Limpar usu√°rio de teste
        await supabase.auth.admin.deleteUser(normalResult.user.id);
        await supabase.from('user_profiles').delete().eq('user_id', normalResult.user.id);
        await supabase.from('clinic_users').delete().eq('user_id', normalResult.user.id);
        console.log('‚úÖ Usu√°rio normal removido');
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar cria√ß√£o de usu√°rio normal:', error);
    }

    // 5. Verificar logs da fun√ß√£o
    console.log('\n5Ô∏è‚É£ Verificando logs da fun√ß√£o...');
    console.log('üí° Para ver logs em tempo real, execute:');
    console.log('   npx supabase functions logs create-user-auth --follow');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

debugEdgeFunction(); 