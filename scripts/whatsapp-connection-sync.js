const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Configura√ß√£o do backend WhatsApp
const WHATSAPP_BACKEND_URL = 'http://31.97.241.19:3001';

async function checkBackendStatus() {
  try {
    const response = await fetch(`${WHATSAPP_BACKEND_URL}/api/whatsapp/status`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error('‚ùå Erro ao verificar status do backend:', error.message);
    return null;
  }
}

async function getBackendConnections() {
  try {
    const response = await fetch(`${WHATSAPP_BACKEND_URL}/api/whatsapp/connections`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error('‚ùå Erro ao buscar conex√µes do backend:', error.message);
    return { connections: [] };
  }
}

async function getDatabaseConnections() {
  try {
    const { data, error } = await supabase
      .from('agent_whatsapp_connections')
      .select('*')
      .eq('connection_status', 'connected');

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå Erro ao buscar conex√µes do banco:', error.message);
    return [];
  }
}

async function updateConnectionStatus(connectionId, status, backendInfo = null) {
  try {
    const updateData = {
      connection_status: status,
      updated_at: new Date().toISOString()
    };

    if (backendInfo) {
      updateData.client_info = backendInfo;
      updateData.last_connection_at = new Date().toISOString();
    }

    const { error } = await supabase
      .from('agent_whatsapp_connections')
      .update(updateData)
      .eq('id', connectionId);

    if (error) throw error;
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao atualizar conex√£o ${connectionId}:`, error.message);
    return false;
  }
}

async function deleteConnection(connectionId) {
  try {
    const { error } = await supabase
      .from('agent_whatsapp_connections')
      .delete()
      .eq('id', connectionId);

    if (error) throw error;
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao deletar conex√£o ${connectionId}:`, error.message);
    return false;
  }
}

async function syncConnections() {
  console.log('üîÑ SINCRONIZANDO CONEX√ïES WHATSAPP');
  console.log('=' .repeat(50));

  // 1. Verificar status do backend
  console.log('üì° Verificando status do backend...');
  const backendStatus = await checkBackendStatus();
  
  if (!backendStatus) {
    console.log('‚ùå Backend n√£o est√° acess√≠vel');
    return;
  }

  console.log(`‚úÖ Backend: ${backendStatus.status}`);
  console.log(`üì± Conectado: ${backendStatus.connected ? 'Sim' : 'N√£o'}`);

  // 2. Buscar conex√µes do backend
  console.log('\nüì° Buscando conex√µes do backend...');
  const backendConnections = await getBackendConnections();
  console.log(`üìä Conex√µes no backend: ${backendConnections.connections?.length || 0}`);

  // 3. Buscar conex√µes do banco
  console.log('\nüóÑÔ∏è Buscando conex√µes do banco de dados...');
  const dbConnections = await getDatabaseConnections();
  console.log(`üìä Conex√µes no banco: ${dbConnections.length}`);

  // 4. Verificar cada conex√£o do banco
  console.log('\nüîç Verificando integridade das conex√µes...');
  
  for (const dbConnection of dbConnections) {
    console.log(`\nüì± Verificando: ${dbConnection.whatsapp_number} (${dbConnection.whatsapp_name})`);
    
    // Verificar se existe no backend
    const backendConnection = backendConnections.connections?.find(
      conn => conn.whatsapp_number === dbConnection.whatsapp_number
    );

    if (backendConnection) {
      console.log(`‚úÖ Encontrado no backend - Status: ${backendConnection.status}`);
      
      // Atualizar status se necess√°rio
      if (backendConnection.status !== dbConnection.connection_status) {
        console.log(`üîÑ Atualizando status: ${dbConnection.connection_status} ‚Üí ${backendConnection.status}`);
        await updateConnectionStatus(dbConnection.id, backendConnection.status, backendConnection);
      }
    } else {
      console.log(`‚ùå N√£o encontrado no backend - Marcando como desconectado`);
      await updateConnectionStatus(dbConnection.id, 'disconnected');
    }
  }

  // 5. Verificar conex√µes √≥rf√£s no backend (n√£o est√£o no banco)
  console.log('\nüîç Verificando conex√µes √≥rf√£s no backend...');
  
  if (backendConnections.connections) {
    for (const backendConn of backendConnections.connections) {
      const dbConnection = dbConnections.find(
        conn => conn.whatsapp_number === backendConn.whatsapp_number
      );

      if (!dbConnection) {
        console.log(`‚ö†Ô∏è Conex√£o √≥rf√£ encontrada: ${backendConn.whatsapp_number}`);
        console.log('üí° Esta conex√£o n√£o est√° registrada no banco de dados');
      }
    }
  }

  // 6. Relat√≥rio final
  console.log('\nüìä RELAT√ìRIO FINAL');
  console.log('=' .repeat(30));
  
  const finalDbConnections = await getDatabaseConnections();
  console.log(`‚úÖ Conex√µes ativas no banco: ${finalDbConnections.length}`);
  
  if (finalDbConnections.length > 0) {
    console.log('\nüì± Conex√µes ativas:');
    finalDbConnections.forEach(conn => {
      console.log(`   ‚Ä¢ ${conn.whatsapp_number} (${conn.whatsapp_name})`);
    });
  } else {
    console.log('üì± Nenhuma conex√£o ativa encontrada');
  }

  console.log('\n‚úÖ Sincroniza√ß√£o conclu√≠da!');
}

// Executar sincroniza√ß√£o
syncConnections().catch(console.error); 