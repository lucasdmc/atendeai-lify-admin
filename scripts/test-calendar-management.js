import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function testCalendarManagement() {
  console.log('üß™ Testando gerenciamento de calend√°rios...')
  
  try {
    // 1. Verificar usu√°rio
    console.log('\n1Ô∏è‚É£ Verificando usu√°rio...')
    
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.error('‚ùå Erro ao verificar usu√°rio:', userError)
      console.log('üí° Fa√ßa login no frontend primeiro')
      return
    }
    
    if (!user) {
      console.log('‚ùå Nenhum usu√°rio logado')
      console.log('üí° Fa√ßa login no frontend primeiro')
      return
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', user.email)
    
    // 2. Verificar calend√°rios atuais
    console.log('\n2Ô∏è‚É£ Verificando calend√°rios atuais...')
    
    const { data: userCalendars, error: calendarsError } = await supabase
      .from('user_calendars')
      .select('*')
      .eq('user_id', user.id)
    
    if (calendarsError) {
      console.error('‚ùå Erro ao buscar calend√°rios:', calendarsError)
    } else {
      console.log(`üìä Calend√°rios conectados: ${userCalendars?.length || 0}`)
      if (userCalendars && userCalendars.length > 0) {
        userCalendars.forEach((cal, index) => {
          console.log(`   ${index + 1}. ${cal.calendar_name} (${cal.google_calendar_id}) - Ativo: ${cal.is_active}`)
        })
      }
    }
    
    // 3. Verificar tokens
    console.log('\n3Ô∏è‚É£ Verificando tokens...')
    
    const { data: tokens, error: tokensError } = await supabase
      .from('google_calendar_tokens')
      .select('*')
      .eq('user_id', user.id)
    
    if (tokensError) {
      console.error('‚ùå Erro ao buscar tokens:', tokensError)
    } else {
      console.log(`üîë Tokens encontrados: ${tokens?.length || 0}`)
      if (tokens && tokens.length > 0) {
        tokens.forEach((token, index) => {
          const expiresAt = new Date(token.expires_at)
          const isExpired = expiresAt < new Date()
          console.log(`   ${index + 1}. Criado em: ${token.created_at} - Expira em: ${expiresAt.toLocaleString()} - Expirado: ${isExpired}`)
        })
      }
    }
    
    // 4. Simular desconex√£o seletiva
    console.log('\n4Ô∏è‚É£ Simulando desconex√£o seletiva...')
    
    if (userCalendars && userCalendars.length > 0) {
      const firstCalendar = userCalendars[0]
      console.log(`üîÑ Simulando desconex√£o do calend√°rio: ${firstCalendar.calendar_name}`)
      
      // Simular a l√≥gica de desconex√£o seletiva
      const calendarIdsToDisconnect = [firstCalendar.google_calendar_id]
      
      console.log('   - Buscando calend√°rios para desconectar...')
      const { data: calendarsToDelete, error: fetchError } = await supabase
        .from('user_calendars')
        .select('id, google_calendar_id, calendar_name')
        .eq('user_id', user.id)
        .in('google_calendar_id', calendarIdsToDisconnect)
      
      if (fetchError) {
        console.error('   ‚ùå Erro ao buscar calend√°rios:', fetchError)
      } else {
        console.log(`   ‚úÖ Encontrados ${calendarsToDelete?.length || 0} calend√°rios para desconectar`)
        
        if (calendarsToDelete && calendarsToDelete.length > 0) {
          const calendarIdsToDelete = calendarsToDelete.map(cal => cal.id)
          console.log('   - IDs dos calend√°rios para deletar:', calendarIdsToDelete)
          
          // Verificar se h√° logs de sincroniza√ß√£o
          const { data: syncLogs, error: syncLogsError } = await supabase
            .from('calendar_sync_logs')
            .select('*')
            .in('user_calendar_id', calendarIdsToDelete)
          
          if (syncLogsError) {
            console.log('   ‚ö†Ô∏è  Erro ao verificar logs de sincroniza√ß√£o:', syncLogsError.message)
          } else {
            console.log(`   üìù Logs de sincroniza√ß√£o encontrados: ${syncLogs?.length || 0}`)
          }
          
          // Verificar se h√° eventos de calend√°rio
          try {
            const { data: calendarEvents, error: eventsError } = await supabase
              .from('calendar_events')
              .select('*')
              .in('user_calendar_id', calendarIdsToDelete)
            
            if (eventsError) {
              console.log('   ‚ö†Ô∏è  Erro ao verificar eventos:', eventsError.message)
            } else {
              console.log(`   üìÖ Eventos de calend√°rio encontrados: ${calendarEvents?.length || 0}`)
            }
          } catch (eventsError) {
            console.log('   ‚ÑπÔ∏è  Tabela calendar_events n√£o existe')
          }
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhum calend√°rio para testar desconex√£o')
    }
    
    // 5. Resumo das funcionalidades
    console.log('\n5Ô∏è‚É£ Resumo das funcionalidades implementadas:')
    console.log('‚úÖ Desconex√£o seletiva de calend√°rios')
    console.log('   - Selecionar calend√°rios espec√≠ficos para desconectar')
    console.log('   - Manter outros calend√°rios conectados')
    console.log('   - Deletar logs e eventos relacionados')
    console.log('')
    console.log('‚úÖ Conex√£o de novos calend√°rios')
    console.log('   - Bot√£o "Adicionar" sempre dispon√≠vel')
    console.log('   - Pode conectar calend√°rios a qualquer momento')
    console.log('   - Mant√©m calend√°rios existentes')
    console.log('')
    console.log('‚úÖ Interface melhorada')
    console.log('   - Duas se√ß√µes separadas: visualiza√ß√£o e desconex√£o')
    console.log('   - Checkboxes independentes para cada a√ß√£o')
    console.log('   - Contador de calend√°rios selecionados')
    console.log('   - Feedback visual com cores diferentes')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testCalendarManagement() 