#!/bin/bash

# Script de Health Check Autom√°tico
# Verifica se todos os endpoints est√£o funcionando

VPS_HOST="atendeai-backend-production.up.railway.app"
VPS_USER="root"
PORT=3001

echo "üîç Health Check Autom√°tico - $(date)"
echo "=================================="

# 1. Verificar se o servidor est√° rodando
echo "1Ô∏è‚É£ Verificando se o servidor est√° rodando..."
if curl -s http://$VPS_HOST:$PORT/health > /dev/null; then
    echo "‚úÖ Servidor est√° rodando"
else
    echo "‚ùå Servidor n√£o est√° respondendo"
    exit 1
fi

# 2. Verificar endpoint /health
echo ""
echo "2Ô∏è‚É£ Testando endpoint /health..."
HEALTH_RESPONSE=$(curl -s http://$VPS_HOST:$PORT/health)
if echo "$HEALTH_RESPONSE" | jq -e '.status' > /dev/null; then
    echo "‚úÖ Endpoint /health funcionando"
    echo "   Status: $(echo "$HEALTH_RESPONSE" | jq -r '.status')"
    echo "   Uptime: $(echo "$HEALTH_RESPONSE" | jq -r '.uptime')s"
    echo "   Active Sessions: $(echo "$HEALTH_RESPONSE" | jq -r '.activeSessions')"
else
    echo "‚ùå Endpoint /health n√£o est√° retornando JSON v√°lido"
    echo "   Resposta: $HEALTH_RESPONSE"
fi

# 3. Verificar endpoint /api/whatsapp/generate-qr
echo ""
echo "3Ô∏è‚É£ Testando endpoint /api/whatsapp/generate-qr..."
QR_RESPONSE=$(curl -s -X POST http://$VPS_HOST:$PORT/api/whatsapp/generate-qr \
  -H "Content-Type: application/json" \
  -d '{"agentId":"health-check-test"}')
if echo "$QR_RESPONSE" | jq -e '.success' > /dev/null; then
    echo "‚úÖ Endpoint /api/whatsapp/generate-qr funcionando"
    echo "   Success: $(echo "$QR_RESPONSE" | jq -r '.success')"
    echo "   Message: $(echo "$QR_RESPONSE" | jq -r '.message')"
else
    echo "‚ùå Endpoint /api/whatsapp/generate-qr n√£o est√° retornando JSON v√°lido"
    echo "   Resposta: $QR_RESPONSE"
fi

# 4. Verificar PM2
echo ""
echo "4Ô∏è‚É£ Verificando PM2..."
PM2_STATUS=$(ssh $VPS_USER@$VPS_HOST "pm2 list" 2>/dev/null)
if echo "$PM2_STATUS" | grep -q "atendeai-backend.*online"; then
    echo "‚úÖ PM2: atendeai-backend est√° online"
else
    echo "‚ùå PM2: atendeai-backend n√£o est√° online"
    echo "$PM2_STATUS"
fi

# 5. Verificar porta
echo ""
echo "5Ô∏è‚É£ Verificando porta $PORT..."
PORT_STATUS=$(ssh $VPS_USER@$VPS_HOST "netstat -tuln | grep :$PORT" 2>/dev/null)
if [ -n "$PORT_STATUS" ]; then
    echo "‚úÖ Porta $PORT est√° escutando"
    echo "   $PORT_STATUS"
else
    echo "‚ùå Porta $PORT n√£o est√° escutando"
fi

# 6. Verificar logs recentes
echo ""
echo "6Ô∏è‚É£ Verificando logs recentes..."
RECENT_LOGS=$(ssh $VPS_USER@$VPS_HOST "pm2 logs atendeai-backend --lines 5" 2>/dev/null)
if [ -n "$RECENT_LOGS" ]; then
    echo "‚úÖ Logs dispon√≠veis"
    echo "   √öltimos logs:"
    echo "$RECENT_LOGS" | tail -3
else
    echo "‚ùå N√£o foi poss√≠vel obter logs"
fi

# 7. Resumo
echo ""
echo "=================================="
echo "üìä Resumo do Health Check"
echo "=================================="

# Contar quantos testes passaram
PASSED=0
TOTAL=6

if curl -s http://$VPS_HOST:$PORT/health > /dev/null; then PASSED=$((PASSED + 1)); fi
if echo "$HEALTH_RESPONSE" | jq -e '.status' > /dev/null; then PASSED=$((PASSED + 1)); fi
if echo "$QR_RESPONSE" | jq -e '.success' > /dev/null; then PASSED=$((PASSED + 1)); fi
if echo "$PM2_STATUS" | grep -q "atendeai-backend.*online"; then PASSED=$((PASSED + 1)); fi
if [ -n "$PORT_STATUS" ]; then PASSED=$((PASSED + 1)); fi
if [ -n "$RECENT_LOGS" ]; then PASSED=$((PASSED + 1)); fi

echo "‚úÖ Testes passaram: $PASSED/$TOTAL"

if [ $PASSED -eq $TOTAL ]; then
    echo "üéâ Sistema est√° funcionando perfeitamente!"
    exit 0
elif [ $PASSED -ge 4 ]; then
    echo "‚ö†Ô∏è  Sistema est√° funcionando com pequenos problemas"
    exit 1
else
    echo "‚ùå Sistema tem problemas significativos"
    exit 2
fi 