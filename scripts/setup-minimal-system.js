import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupMinimalSystem() {
  console.log('üîß Configurando sistema m√≠nimo...')
  
  try {
    // 1. Verificar se o usu√°rio existe
    console.log('\n1Ô∏è‚É£ Verificando usu√°rio principal...')
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå Erro ao verificar sess√£o:', sessionError)
    } else if (session) {
      console.log('‚úÖ Sess√£o ativa encontrada')
      console.log(`   Usu√°rio: ${session.user.email} (${session.user.id})`)
    } else {
      console.log('‚ùå Nenhuma sess√£o ativa')
      console.log('üí° Fa√ßa login no frontend primeiro')
      return
    }
    
    // 2. Verificar perfil do usu√°rio
    console.log('\n2Ô∏è‚É£ Verificando perfil do usu√°rio...')
    
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', session.user.id)
      .single()
    
    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError)
      console.log('üí° Execute o SQL manual no Supabase Dashboard para criar o perfil')
    } else if (profile) {
      console.log('‚úÖ Perfil encontrado')
      console.log(`   Email: ${profile.email}`)
      console.log(`   Role: ${profile.role}`)
    } else {
      console.log('‚ùå Perfil n√£o encontrado')
      console.log('üí° Execute o SQL manual no Supabase Dashboard para criar o perfil')
    }
    
    // 3. Verificar estrutura do banco
    console.log('\n3Ô∏è‚É£ Verificando estrutura do banco...')
    
    const tables = ['clinics', 'users', 'conversations', 'messages', 'appointments', 'calendar_sync_logs', 'calendar_events']
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1)
        
        if (error && error.code === '42P01') {
          console.log(`‚ùå Tabela ${table} n√£o existe`)
        } else if (error) {
          console.log(`‚ö†Ô∏è  Erro ao verificar ${table}:`, error.message)
        } else {
          console.log(`‚úÖ Tabela ${table} existe`)
        }
      } catch (err) {
        console.log(`‚ùå Erro ao verificar ${table}:`, err.message)
      }
    }
    
    // 4. Instru√ß√µes finais
    console.log('\n4Ô∏è‚É£ Sistema m√≠nimo configurado!')
    console.log('üìã Status atual:')
    console.log(`   - Usu√°rio: ${session?.user?.email || 'n√£o encontrado'}`)
    console.log(`   - Perfil: ${profile ? 'criado' : 'n√£o encontrado'}`)
    console.log(`   - Tabelas: ${tables.length} verificadas`)
    console.log('')
    console.log('üí° Para completar a configura√ß√£o:')
    console.log('   1. Execute o SQL no Supabase Dashboard se necess√°rio')
    console.log('   2. V√° para http://localhost:8080')
    console.log('   3. Fa√ßa login com: lucasdmc@lify.com / lify@1234')
    console.log('   4. Teste as funcionalidades b√°sicas')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

setupMinimalSystem() 