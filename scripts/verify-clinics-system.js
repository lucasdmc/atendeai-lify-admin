import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verifyClinicsSystem() {
  try {
    console.log('üîç Verificando sistema de cl√≠nicas...');
    
    // 1. Verificar estrutura da tabela clinics
    console.log('\n1Ô∏è‚É£ Verificando estrutura da tabela clinics...');
    
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .order('name');

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', clinicsError);
      return;
    }

    console.log(`‚úÖ Encontradas ${clinics.length} cl√≠nicas:`);
    clinics.forEach(clinic => {
      const addressStatus = clinic.address ? '‚úÖ Com endere√ßo' : '‚ùå Sem endere√ßo';
      const phoneStatus = clinic.phone ? '‚úÖ Com telefone' : '‚ùå Sem telefone';
      const emailStatus = clinic.email ? '‚úÖ Com email' : '‚ùå Sem email';
      
      console.log(`   - ${clinic.name} (${clinic.id})`);
      console.log(`     ${addressStatus} | ${phoneStatus} | ${emailStatus}`);
      console.log(`     Timezone: ${clinic.timezone || 'N/A'}`);
      console.log(`     Language: ${clinic.language || 'N/A'}`);
      console.log(`     Criado: ${clinic.created_at}`);
      console.log('');
    });

    // 2. Verificar agentes e suas associa√ß√µes com cl√≠nicas
    console.log('\n2Ô∏è‚É£ Verificando agentes e suas cl√≠nicas...');
    
    const { data: agents, error: agentsError } = await supabase
      .from('agents')
      .select('id, name, clinic_id, is_active, created_at')
      .order('name');

    if (agentsError) {
      console.error('‚ùå Erro ao buscar agentes:', agentsError);
      return;
    }

    console.log(`‚úÖ Encontrados ${agents.length} agentes:`);
    agents.forEach(agent => {
      const clinicStatus = agent.clinic_id ? '‚úÖ Com cl√≠nica' : '‚ùå Sem cl√≠nica';
      const activeStatus = agent.is_active ? '‚úÖ Ativo' : '‚ùå Inativo';
      
      console.log(`   - ${agent.name} (${agent.id})`);
      console.log(`     ${clinicStatus} | ${activeStatus} | Criado: ${agent.created_at}`);
    });

    // 3. Verificar associa√ß√µes agentes-cl√≠nicas
    console.log('\n3Ô∏è‚É£ Verificando associa√ß√µes agentes-cl√≠nicas...');
    
    const { data: agentsWithClinics, error: agentsWithClinicsError } = await supabase
      .from('agents')
      .select(`
        id,
        name,
        clinic_id,
        is_active,
        clinics!inner (
          id,
          name,
          timezone,
          language
        )
      `)
      .not('clinic_id', 'is', null);

    if (agentsWithClinicsError) {
      console.error('‚ùå Erro ao buscar agentes com cl√≠nicas:', agentsWithClinicsError);
    } else {
      console.log(`‚úÖ Agentes com cl√≠nicas associadas: ${agentsWithClinics.length}`);
      agentsWithClinics.forEach(agent => {
        console.log(`   - ${agent.name} ‚Üí ${agent.clinics.name} (${agent.clinics.timezone})`);
      });
    }

    // 4. Verificar agentes sem cl√≠nica
    const agentsWithoutClinic = agents.filter(agent => !agent.clinic_id);
    if (agentsWithoutClinic.length > 0) {
      console.log('\n‚ö†Ô∏è  Agentes sem cl√≠nica associada:');
      agentsWithoutClinic.forEach(agent => {
        console.log(`   - ${agent.name} (${agent.id})`);
      });
    } else {
      console.log('\n‚úÖ Todos os agentes t√™m cl√≠nica associada');
    }

    // 5. Verificar integridade dos dados
    console.log('\n4Ô∏è‚É£ Verificando integridade dos dados...');
    
    const clinicsWithoutCreator = clinics.filter(clinic => !clinic.created_by);
    const clinicsWithoutTimezone = clinics.filter(clinic => !clinic.timezone);
    const clinicsWithoutLanguage = clinics.filter(clinic => !clinic.language);
    
    console.log(`   - Cl√≠nicas sem criador: ${clinicsWithoutCreator.length}`);
    console.log(`   - Cl√≠nicas sem timezone: ${clinicsWithoutTimezone.length}`);
    console.log(`   - Cl√≠nicas sem language: ${clinicsWithoutLanguage.length}`);
    console.log(`   - Agentes sem cl√≠nica: ${agentsWithoutClinic.length}`);
    
    if (clinicsWithoutCreator.length > 0) {
      console.log('   ‚ö†Ô∏è  Cl√≠nicas sem criador:');
      clinicsWithoutCreator.forEach(clinic => {
        console.log(`     - ${clinic.name} (${clinic.id})`);
      });
    }
    
    if (clinicsWithoutTimezone.length > 0) {
      console.log('   ‚ö†Ô∏è  Cl√≠nicas sem timezone:');
      clinicsWithoutTimezone.forEach(clinic => {
        console.log(`     - ${clinic.name} (${clinic.id})`);
      });
    }

    // 6. Resumo final
    console.log('\nüìä RESUMO DO SISTEMA DE CL√çNICAS:');
    console.log(`   - Total de cl√≠nicas: ${clinics.length}`);
    console.log(`   - Cl√≠nicas com endere√ßo: ${clinics.filter(c => c.address).length}`);
    console.log(`   - Cl√≠nicas com telefone: ${clinics.filter(c => c.phone).length}`);
    console.log(`   - Cl√≠nicas com email: ${clinics.filter(c => c.email).length}`);
    console.log(`   - Total de agentes: ${agents.length}`);
    console.log(`   - Agentes com cl√≠nica: ${agents.filter(a => a.clinic_id).length}`);
    console.log(`   - Agentes ativos: ${agents.filter(a => a.is_active).length}`);
    
    // 7. Sugest√µes de melhorias
    console.log('\nüí° SUGEST√ïES DE MELHORIAS:');
    
    if (clinics.length === 0) {
      console.log('   - Criar pelo menos uma cl√≠nica padr√£o');
    }
    
    if (agentsWithoutClinic.length > 0 && clinics.length > 0) {
      console.log('   - Associar agentes sem cl√≠nica a uma cl√≠nica padr√£o');
    }
    
    if (clinicsWithoutCreator.length > 0) {
      console.log('   - Associar cl√≠nicas sem criador a um usu√°rio padr√£o');
    }
    
    if (clinicsWithoutTimezone.length > 0) {
      console.log('   - Definir timezone para cl√≠nicas que n√£o possuem');
    }
    
    if (clinicsWithoutLanguage.length > 0) {
      console.log('   - Definir language para cl√≠nicas que n√£o possuem');
    }

    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
verifyClinicsSystem(); 