import { createClient } from '@supabase/supabase-js';
import AIChatService from '../src/services/aiChatService.js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAISystem() {
  console.log('üß™ Iniciando testes do sistema de IA refatorado...\n');

  try {
    // Teste 1: Verificar conex√£o com Supabase
    console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
    const { data, error } = await supabase.from('contextualization_data').select('count').limit(1);
    if (error) {
      throw new Error(`Erro na conex√£o: ${error.message}`);
    }
    console.log('‚úÖ Conex√£o com Supabase OK\n');

    // Teste 2: Verificar se as tabelas do sistema de IA existem
    console.log('2Ô∏è‚É£ Verificando tabelas do sistema de IA...');
    const tables = [
      'whatsapp_conversation_memory',
      'clinic_knowledge_base',
      'ai_interactions',
      'user_personalization_profiles',
      'ai_tools',
      'escalation_logs'
    ];

    for (const table of tables) {
      const { error } = await supabase.from(table).select('count').limit(1);
      if (error) {
        console.log(`‚ö†Ô∏è  Tabela ${table} n√£o encontrada - ser√° criada pelo script SQL`);
      } else {
        console.log(`‚úÖ Tabela ${table} existe`);
      }
    }
    console.log('');

    // Teste 3: Testar processamento de mensagem
    console.log('3Ô∏è‚É£ Testando processamento de mensagem...');
    const testPhone = '5511999999999';
    const testMessage = 'Ol√°, gostaria de agendar uma consulta';
    
    const response = await AIChatService.processMessage(testPhone, testMessage);
    console.log(`üì± Mensagem: "${testMessage}"`);
    console.log(`ü§ñ Resposta: "${response}"`);
    console.log('‚úÖ Processamento de mensagem OK\n');

    // Teste 4: Testar busca de hist√≥rico
    console.log('4Ô∏è‚É£ Testando busca de hist√≥rico...');
    const history = await AIChatService.getConversationHistory(testPhone);
    console.log(`üìö Hist√≥rico encontrado: ${history.length} mensagens`);
    console.log('‚úÖ Busca de hist√≥rico OK\n');

    // Teste 5: Testar estat√≠sticas
    console.log('5Ô∏è‚É£ Testando estat√≠sticas...');
    const stats = await AIChatService.getConversationStats(testPhone);
    console.log(`üìä Estat√≠sticas:`, stats);
    console.log('‚úÖ Estat√≠sticas OK\n');

    // Teste 6: Testar diferentes tipos de mensagens
    console.log('6Ô∏è‚É£ Testando diferentes tipos de mensagens...');
    const testMessages = [
      'Qual o hor√°rio de funcionamento?',
      'Quero cancelar minha consulta',
      'Voc√™s aceitam meu conv√™nio?',
      'Preciso reagendar um hor√°rio'
    ];

    for (const message of testMessages) {
      console.log(`\nüìù Testando: "${message}"`);
      const response = await AIChatService.processMessage(testPhone, message);
      console.log(`ü§ñ Resposta: "${response.substring(0, 100)}..."`);
    }
    console.log('‚úÖ Testes de mensagens OK\n');

    // Teste 7: Verificar logs de intera√ß√£o
    console.log('7Ô∏è‚É£ Verificando logs de intera√ß√£o...');
    const { data: interactions } = await supabase
      .from('ai_interactions')
      .select('*')
      .eq('phone_number', testPhone)
      .order('created_at', { ascending: false })
      .limit(5);

    console.log(`üìã Intera√ß√µes registradas: ${interactions?.length || 0}`);
    if (interactions && interactions.length > 0) {
      console.log(`üìä √öltima intera√ß√£o: ${interactions[0].model} - ${interactions[0].tokens_used} tokens`);
    }
    console.log('‚úÖ Logs de intera√ß√£o OK\n');

    console.log('üéâ Todos os testes passaram! O sistema de IA est√° funcionando corretamente.');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Fun√ß√£o para testar Edge Functions
async function testEdgeFunctions() {
  console.log('\nüîß Testando Edge Functions...\n');

  try {
    // Teste da Edge Function de chat
    console.log('1Ô∏è‚É£ Testando Edge Function ai-chat-gpt4...');
    const { data: chatResponse, error: chatError } = await supabase.functions.invoke('ai-chat-gpt4', {
      body: {
        messages: [
          { role: 'system', content: 'Voc√™ √© um assistente virtual de uma cl√≠nica m√©dica.' },
          { role: 'user', content: 'Ol√°, como posso agendar uma consulta?' }
        ],
        phoneNumber: '5511999999999'
      }
    });

    if (chatError) {
      console.log(`‚ö†Ô∏è  Edge Function ai-chat-gpt4: ${chatError.message}`);
    } else {
      console.log(`‚úÖ Edge Function ai-chat-gpt4: ${chatResponse.response?.substring(0, 100)}...`);
    }

    // Teste da Edge Function de RAG
    console.log('\n2Ô∏è‚É£ Testando Edge Function rag-search...');
    const { data: ragResponse, error: ragError } = await supabase.functions.invoke('rag-search', {
      body: {
        query: 'hor√°rio de funcionamento',
        intent: 'INFO_HOURS',
        entities: {}
      }
    });

    if (ragError) {
      console.log(`‚ö†Ô∏è  Edge Function rag-search: ${ragError.message}`);
    } else {
      console.log(`‚úÖ Edge Function rag-search: ${ragResponse.sources?.length || 0} fontes encontradas`);
    }

  } catch (error) {
    console.error('‚ùå Erro ao testar Edge Functions:', error.message);
  }
}

// Executar testes
async function runAllTests() {
  await testAISystem();
  await testEdgeFunctions();
  
  console.log('\nüìã Resumo dos testes:');
  console.log('‚úÖ Sistema de IA refatorado implementado');
  console.log('‚úÖ Servi√ßos de mem√≥ria, personaliza√ß√£o e RAG funcionando');
  console.log('‚úÖ Edge Functions configuradas');
  console.log('‚úÖ Banco de dados preparado');
  console.log('\nüöÄ Sistema pronto para uso!');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllTests().catch(console.error);
}

export { testAISystem, testEdgeFunctions, runAllTests }; 