import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function restoreBasicAuth() {
  console.log('üîß Restaurando estrutura b√°sica de autentica√ß√£o...')
  
  try {
    // 1. Criar usu√°rio de teste via signup
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de teste...')
    
    const testEmail = 'admin@teste.com'
    const testPassword = '123456789'
    
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          role: 'admin_lify'
        }
      }
    })
    
    if (signupError) {
      console.error('‚ùå Erro ao criar usu√°rio:', signupError)
      
      // Se o usu√°rio j√° existe, tentar fazer login
      console.log('üîÑ Tentando fazer login com usu√°rio existente...')
      const { data: signinData, error: signinError } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })
      
      if (signinError) {
        console.error('‚ùå Erro ao fazer login:', signinError)
        return
      } else {
        console.log('‚úÖ Login realizado com sucesso')
        console.log(`   Usu√°rio: ${signinData.user.email} (${signinData.user.id})`)
      }
    } else {
      console.log('‚úÖ Usu√°rio criado com sucesso')
      console.log(`   Usu√°rio: ${signupData.user.email} (${signupData.user.id})`)
      
      // Confirmar email (em desenvolvimento, pode n√£o ser necess√°rio)
      if (signupData.user && !signupData.user.email_confirmed_at) {
        console.log('üìß Usu√°rio criado, mas email precisa ser confirmado')
        console.log('üí° Em desenvolvimento, voc√™ pode confirmar manualmente no Supabase Dashboard')
      }
    }
    
    // 2. Verificar se a tabela user_profiles existe, se n√£o, criar
    console.log('\n2Ô∏è‚É£ Verificando tabela user_profiles...')
    
    try {
      const { data: profiles, error: profilesError } = await supabase
        .from('user_profiles')
        .select('*')
        .limit(1)
      
      if (profilesError && profilesError.code === '42P01') {
        console.log('‚ö†Ô∏è  Tabela user_profiles n√£o existe, criando...')
        
        // Criar a tabela via SQL
        const createTableSQL = `
          CREATE TABLE IF NOT EXISTS public.user_profiles (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
            email TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'user',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            UNIQUE(user_id)
          );
          
          -- √çndices
          CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON public.user_profiles(user_id);
          CREATE INDEX IF NOT EXISTS idx_user_profiles_email ON public.user_profiles(email);
          
          -- RLS
          ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
          
          -- Pol√≠ticas
          DROP POLICY IF EXISTS "Users can view own profile" ON public.user_profiles;
          CREATE POLICY "Users can view own profile" ON public.user_profiles
            FOR SELECT USING (auth.uid() = user_id);
          
          DROP POLICY IF EXISTS "Users can update own profile" ON public.user_profiles;
          CREATE POLICY "Users can update own profile" ON public.user_profiles
            FOR UPDATE USING (auth.uid() = user_id);
          
          DROP POLICY IF EXISTS "Users can insert own profile" ON public.user_profiles;
          CREATE POLICY "Users can insert own profile" ON public.user_profiles
            FOR INSERT WITH CHECK (auth.uid() = user_id);
        `
        
        // Como n√£o temos acesso direto ao SQL, vamos criar via Edge Function ou manualmente
        console.log('üí° Tabela user_profiles precisa ser criada manualmente')
        console.log('üîß Op√ß√µes:')
        console.log('   1. Executar SQL manualmente no Supabase Dashboard')
        console.log('   2. Usar Edge Function para criar a tabela')
        console.log('   3. Fazer signup no frontend (criar√° automaticamente)')
        
      } else if (profilesError) {
        console.error('‚ùå Erro ao verificar user_profiles:', profilesError)
      } else {
        console.log('‚úÖ Tabela user_profiles existe')
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar user_profiles:', error)
    }
    
    // 3. Verificar sess√£o atual
    console.log('\n3Ô∏è‚É£ Verificando sess√£o atual...')
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå Erro ao buscar sess√£o:', sessionError)
    } else if (session) {
      console.log('‚úÖ Sess√£o ativa encontrada')
      console.log(`   Usu√°rio: ${session.user.email} (${session.user.id})`)
      console.log(`   Role: ${session.user.user_metadata?.role || 'n√£o definido'}`)
    } else {
      console.log('‚ùå Nenhuma sess√£o ativa')
    }
    
    // 4. Instru√ß√µes finais
    console.log('\n4Ô∏è‚É£ Pr√≥ximos passos:')
    console.log('‚úÖ Usu√°rio de teste criado: admin@teste.com / 123456789')
    console.log('üí° Para acessar o sistema:')
    console.log('   1. V√° para http://localhost:8080')
    console.log('   2. Fa√ßa login com: admin@teste.com / 123456789')
    console.log('   3. Se necess√°rio, confirme o email no Supabase Dashboard')
    console.log('   4. Teste a navega√ß√£o para /agendamentos')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

restoreBasicAuth() 