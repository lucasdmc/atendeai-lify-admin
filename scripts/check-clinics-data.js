#!/usr/bin/env node

/**
 * Script para verificar dados de cl√≠nicas no banco
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîç VERIFICANDO DADOS DE CL√çNICAS NO BANCO\n');

async function checkClinicsData() {
  try {
    // 1. Verificar se a tabela clinics existe
    console.log('1Ô∏è‚É£ Verificando tabela clinics...');
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .limit(5);

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', clinicsError);
      return;
    }

    console.log(`‚úÖ Tabela clinics existe`);
    console.log(`üìä Total de cl√≠nicas encontradas: ${clinics?.length || 0}`);

    if (clinics && clinics.length > 0) {
      console.log('\nüìã Cl√≠nicas encontradas:');
      clinics.forEach((clinic, index) => {
        console.log(`${index + 1}. ${clinic.name} (ID: ${clinic.id})`);
        console.log(`   - Ativa: ${clinic.is_active ? 'Sim' : 'N√£o'}`);
        console.log(`   - Email: ${clinic.email || 'N√£o informado'}`);
        console.log(`   - Telefone: ${clinic.phone || 'N√£o informado'}`);
        console.log('');
      });
    } else {
      console.log('‚ö†Ô∏è Nenhuma cl√≠nica encontrada no banco');
      console.log('üí° Voc√™ precisa criar pelo menos uma cl√≠nica para usar o sistema');
    }

    // 2. Verificar tabela clinic_users
    console.log('2Ô∏è‚É£ Verificando tabela clinic_users...');
    const { data: clinicUsers, error: clinicUsersError } = await supabase
      .from('clinic_users')
      .select('*')
      .limit(5);

    if (clinicUsersError) {
      console.error('‚ùå Erro ao buscar clinic_users:', clinicUsersError);
    } else {
      console.log(`üìä Total de associa√ß√µes clinic_users: ${clinicUsers?.length || 0}`);
    }

    // 3. Verificar tabela users
    console.log('3Ô∏è‚É£ Verificando tabela users...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .limit(5);

    if (usersError) {
      console.error('‚ùå Erro ao buscar users:', usersError);
    } else {
      console.log(`üìä Total de usu√°rios: ${users?.length || 0}`);
    }

    // 4. Verificar tabela agents
    console.log('4Ô∏è‚É£ Verificando tabela agents...');
    const { data: agents, error: agentsError } = await supabase
      .from('agents')
      .select('*')
      .limit(5);

    if (agentsError) {
      console.error('‚ùå Erro ao buscar agents:', agentsError);
    } else {
      console.log(`üìä Total de agentes: ${agents?.length || 0}`);
    }

    // 5. Verificar tabela whatsapp_connections
    console.log('5Ô∏è‚É£ Verificando tabela whatsapp_connections...');
    const { data: whatsappConnections, error: whatsappError } = await supabase
      .from('whatsapp_connections')
      .select('*')
      .limit(5);

    if (whatsappError) {
      console.error('‚ùå Erro ao buscar whatsapp_connections:', whatsappError);
    } else {
      console.log(`üìä Total de conex√µes WhatsApp: ${whatsappConnections?.length || 0}`);
    }

    console.log('\nüìã RESUMO:');
    console.log(`‚úÖ Tabela clinics: ${clinics?.length || 0} registros`);
    console.log(`‚úÖ Tabela clinic_users: ${clinicUsers?.length || 0} registros`);
    console.log(`‚úÖ Tabela users: ${users?.length || 0} registros`);
    console.log(`‚úÖ Tabela agents: ${agents?.length || 0} registros`);
    console.log(`‚úÖ Tabela whatsapp_connections: ${whatsappConnections?.length || 0} registros`);

    if (!clinics || clinics.length === 0) {
      console.log('\nüö® PROBLEMA IDENTIFICADO:');
      console.log('N√£o h√° cl√≠nicas cadastradas no banco de dados.');
      console.log('Isso est√° causando o erro 400 ao carregar cl√≠nicas.');
      console.log('\nüí° SOLU√á√ÉO:');
      console.log('1. Acesse a se√ß√£o "Cl√≠nicas" no sistema');
      console.log('2. Clique em "Nova Cl√≠nica"');
      console.log('3. Crie pelo menos uma cl√≠nica');
      console.log('4. Ou execute o script de cria√ß√£o de cl√≠nica padr√£o');
    }

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
checkClinicsData(); 