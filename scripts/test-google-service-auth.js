import dotenv from 'dotenv';

dotenv.config();

async function testGoogleServiceAuth() {
  console.log('üß™ Testando Edge Function google-service-auth...\n');

  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    console.log('‚ùå Vari√°veis do Supabase n√£o encontradas');
    return;
  }

  try {
    // 1. Testar se a fun√ß√£o est√° acess√≠vel
    console.log('1Ô∏è‚É£ Testando acessibilidade da fun√ß√£o...');
    
    const functionUrl = `${supabaseUrl}/functions/v1/google-service-auth`;
    
    const testResponse = await fetch(functionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
      },
      body: JSON.stringify({
        action: 'get-credentials'
      })
    });

    console.log(`   Status: ${testResponse.status}`);
    
    if (testResponse.ok) {
      console.log('   ‚úÖ Fun√ß√£o est√° acess√≠vel');
    } else {
      const errorText = await testResponse.text();
      console.log(`   ‚ö†Ô∏è  Fun√ß√£o retornou: ${errorText}`);
    }

    // 2. Testar a√ß√£o get-credentials
    console.log('\n2Ô∏è‚É£ Testando a√ß√£o get-credentials...');
    
    const credentialsResponse = await fetch(functionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
      },
      body: JSON.stringify({
        action: 'get-credentials'
      })
    });

    console.log(`   Status: ${credentialsResponse.status}`);
    
    if (credentialsResponse.ok) {
      const data = await credentialsResponse.json();
      console.log('   ‚úÖ Credenciais obtidas com sucesso');
      console.log(`   üìã Client Email: ${data.credentials?.client_email || 'N/A'}`);
      console.log(`   üìã Project ID: ${data.credentials?.project_id || 'N/A'}`);
    } else {
      const errorText = await credentialsResponse.text();
      console.log(`   ‚ùå Erro: ${errorText}`);
    }

    // 3. Testar a√ß√£o get-access-token
    console.log('\n3Ô∏è‚É£ Testando a√ß√£o get-access-token...');
    
    const tokenResponse = await fetch(functionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
      },
      body: JSON.stringify({
        action: 'get-access-token'
      })
    });

    console.log(`   Status: ${tokenResponse.status}`);
    
    if (tokenResponse.ok) {
      const data = await tokenResponse.json();
      console.log('   ‚úÖ Token obtido com sucesso');
      console.log(`   üìã Token Type: ${data.token_type || 'N/A'}`);
      console.log(`   üìã Expires In: ${data.expires_in || 'N/A'} segundos`);
    } else {
      const errorText = await tokenResponse.text();
      console.log(`   ‚ùå Erro: ${errorText}`);
    }

    // 4. Testar a√ß√£o verify-token
    console.log('\n4Ô∏è‚É£ Testando a√ß√£o verify-token...');
    
    const verifyResponse = await fetch(functionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
      },
      body: JSON.stringify({
        action: 'verify-token'
      })
    });

    console.log(`   Status: ${verifyResponse.status}`);
    
    if (verifyResponse.ok) {
      const data = await verifyResponse.json();
      console.log('   ‚úÖ Token verificado com sucesso');
      console.log(`   üìã User ID: ${data.user?.id || 'N/A'}`);
      console.log(`   üìã Email: ${data.user?.email || 'N/A'}`);
    } else {
      const errorText = await verifyResponse.text();
      console.log(`   ‚ùå Erro: ${errorText}`);
    }

    // 5. Instru√ß√µes para deploy
    console.log('\n5Ô∏è‚É£ Instru√ß√µes para deploy:');
    console.log('   üìã Para fazer o deploy da fun√ß√£o google-service-auth:');
    console.log('   1. Acesse: https://supabase.com/dashboard/project/niakqdolcdwxtrkbqmdi');
    console.log('   2. V√° em: Edge Functions');
    console.log('   3. Clique em "Create a new function"');
    console.log('   4. Nome: google-service-auth');
    console.log('   5. Cole o c√≥digo do arquivo supabase/functions/google-service-auth/index.ts');
    console.log('   6. Clique em "Deploy"');

    // 6. Vari√°veis de ambiente necess√°rias
    console.log('\n6Ô∏è‚É£ Vari√°veis de ambiente necess√°rias:');
    console.log('   üìã Configure estas vari√°veis no Supabase Dashboard:');
    console.log('   - GOOGLE_PROJECT_ID');
    console.log('   - GOOGLE_PRIVATE_KEY_ID');
    console.log('   - GOOGLE_PRIVATE_KEY');
    console.log('   - GOOGLE_CLIENT_EMAIL');
    console.log('   - GOOGLE_CLIENT_ID');
    console.log('   - GOOGLE_CLIENT_SECRET');

    // 7. Resumo
    console.log('\n7Ô∏è‚É£ Resumo:');
    console.log('   ‚úÖ Fun√ß√£o google-service-auth criada');
    console.log('   ‚úÖ Tr√™s a√ß√µes implementadas: get-credentials, get-access-token, verify-token');
    console.log('   ‚úÖ CORS configurado corretamente');
    console.log('   üìã Pr√≥ximo passo: Deploy no Supabase Dashboard');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testGoogleServiceAuth().catch(console.error); 