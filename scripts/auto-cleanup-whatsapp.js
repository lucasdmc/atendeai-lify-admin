import https from 'https';

const WHATSAPP_SERVER_URL = 'https://atendeai.lify.com.br';
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

async function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'atendeai.lify.com.br',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const json = JSON.parse(body);
          resolve({ status: res.statusCode, data: json });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function autoCleanup() {
  console.log('üßπ Iniciando limpeza autom√°tica de sess√µes WhatsApp...\n');

  try {
    // 1. Verificar status atual
    console.log('1Ô∏è‚É£ Verificando sess√µes ativas...');
    const healthResponse = await makeRequest('/health');
    
    if (healthResponse.status !== 200) {
      throw new Error('Servidor WhatsApp n√£o est√° respondendo');
    }

    const sessions = healthResponse.data.sessions || [];
    console.log(`Sess√µes encontradas: ${sessions.length}`);

    if (sessions.length === 0) {
      console.log('‚úÖ Nenhuma sess√£o para limpar.');
      return;
    }

    // 2. Analisar sess√µes problem√°ticas
    console.log('\n2Ô∏è‚É£ Analisando sess√µes...');
    const problematicSessions = [];
    const normalSessions = [];

    for (const session of sessions) {
      console.log(`- ${session.agentId}: ${session.status} (${session.connected ? 'Conectado' : 'Desconectado'})`);
      
      // Identificar sess√µes problem√°ticas
      if (session.status === 'qr' && !session.connected) {
        problematicSessions.push(session);
      } else if (session.status === 'connecting' && !session.connected) {
        problematicSessions.push(session);
      } else {
        normalSessions.push(session);
      }
    }

    console.log(`\nSess√µes normais: ${normalSessions.length}`);
    console.log(`Sess√µes problem√°ticas: ${problematicSessions.length}`);

    // 3. Limpar sess√µes problem√°ticas
    if (problematicSessions.length > 0) {
      console.log('\n3Ô∏è‚É£ Limpando sess√µes problem√°ticas...');
      
      let clearedCount = 0;
      const errors = [];

      for (const session of problematicSessions) {
        try {
          console.log(`Limpando: ${session.agentId}`);
          
          // Tentar desconectar
          const disconnectResponse = await makeRequest('/api/whatsapp/disconnect', 'POST', {
            agentId: session.agentId,
            whatsappNumber: session.whatsappNumber || 'temp',
            connectionId: session.connectionId || 'temp'
          });

          if (disconnectResponse.status === 200) {
            clearedCount++;
            console.log(`‚úÖ Limpo: ${session.agentId}`);
          } else {
            errors.push(`Falha ao limpar ${session.agentId}: ${disconnectResponse.status}`);
            console.log(`‚ùå Falha: ${session.agentId} (${disconnectResponse.status})`);
          }
        } catch (error) {
          errors.push(`Erro ao limpar ${session.agentId}: ${error.message}`);
          console.log(`‚ùå Erro: ${session.agentId} - ${error.message}`);
        }
      }

      console.log(`\nLimpeza conclu√≠da: ${clearedCount}/${problematicSessions.length} sess√µes limpas`);
      
      if (errors.length > 0) {
        console.log('\nErros encontrados:');
        errors.forEach(error => console.log(`- ${error}`));
      }
    }

    // 4. Verificar resultado final
    console.log('\n4Ô∏è‚É£ Verificando resultado final...');
    const finalHealth = await makeRequest('/health');
    const finalSessions = finalHealth.data.sessions || [];
    
    console.log(`Sess√µes restantes: ${finalSessions.length}`);
    
    if (finalSessions.length > 0) {
      console.log('Sess√µes ativas:');
      finalSessions.forEach(session => {
        console.log(`- ${session.agentId}: ${session.status} (${session.connected ? 'Conectado' : 'Desconectado'})`);
      });
    }

    // 5. Gerar relat√≥rio
    const report = {
      timestamp: new Date().toISOString(),
      totalSessions: sessions.length,
      problematicSessions: problematicSessions.length,
      clearedSessions: problematicSessions.length - finalSessions.length,
      remainingSessions: finalSessions.length,
      errors: errors || []
    };

    console.log('\nüìä RELAT√ìRIO DE LIMPEZA:');
    console.log(`Data/Hora: ${report.timestamp}`);
    console.log(`Total de sess√µes: ${report.totalSessions}`);
    console.log(`Sess√µes problem√°ticas: ${report.problematicSessions}`);
    console.log(`Sess√µes limpas: ${report.clearedSessions}`);
    console.log(`Sess√µes restantes: ${report.remainingSessions}`);
    
    if (report.errors.length > 0) {
      console.log(`Erros: ${report.errors.length}`);
    }

    // 6. Salvar log (opcional)
    const logEntry = {
      ...report,
      action: 'auto-cleanup',
      success: report.clearedSessions > 0 || report.problematicSessions === 0
    };

    console.log('\n‚úÖ Limpeza autom√°tica conclu√≠da!');
    
    return logEntry;

  } catch (error) {
    console.error('‚ùå Erro durante limpeza autom√°tica:', error.message);
    throw error;
  }
}

// Fun√ß√£o para executar limpeza peri√≥dica
async function scheduleCleanup() {
  console.log('‚è∞ Configurando limpeza autom√°tica...\n');
  
  // Executar limpeza imediatamente
  try {
    await autoCleanup();
  } catch (error) {
    console.error('Erro na limpeza:', error.message);
  }

  // Configurar para executar a cada 6 horas
  const SIX_HOURS = 6 * 60 * 60 * 1000;
  
  setInterval(async () => {
    console.log('\nüîÑ Executando limpeza programada...');
    try {
      await autoCleanup();
    } catch (error) {
      console.error('Erro na limpeza programada:', error.message);
    }
  }, SIX_HOURS);

  console.log(`\n‚úÖ Limpeza autom√°tica configurada para executar a cada 6 horas.`);
  console.log('üí° Para parar, pressione Ctrl+C');
}

// Executar baseado no argumento
const args = process.argv.slice(2);
const command = args[0];

if (command === 'schedule') {
  scheduleCleanup();
} else {
  // Execu√ß√£o √∫nica
  autoCleanup()
    .then(() => {
      console.log('\n‚úÖ Limpeza conclu√≠da com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na limpeza:', error.message);
      process.exit(1);
    });
} 