const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Configura√ß√£o do backend WhatsApp
const WHATSAPP_BACKEND_URL = 'https://atendeai-backend-production.up.railway.app';

const TARGET_NUMBER = '5547999528232';

async function checkBackendStatus() {
  try {
    const response = await fetch(`${WHATSAPP_BACKEND_URL}/api/whatsapp/status`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error('‚ùå Erro ao verificar status do backend:', error.message);
    return null;
  }
}

async function getBackendConnections() {
  try {
    const response = await fetch(`${WHATSAPP_BACKEND_URL}/api/whatsapp/connections`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error('‚ùå Erro ao buscar conex√µes do backend:', error.message);
    return { connections: [] };
  }
}

async function findNumberInDatabase() {
  try {
    const { data, error } = await supabase
      .from('agent_whatsapp_connections')
      .select('*')
      .eq('whatsapp_number', TARGET_NUMBER);

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå Erro ao buscar n√∫mero no banco:', error.message);
    return [];
  }
}

async function checkSpecificNumber() {
  console.log(`üîç VERIFICANDO N√öMERO ESPEC√çFICO: ${TARGET_NUMBER}`);
  console.log('=' .repeat(60));

  // 1. Verificar status do backend
  console.log('üì° Verificando status do backend...');
  const backendStatus = await checkBackendStatus();
  
  if (!backendStatus) {
    console.log('‚ùå Backend n√£o est√° acess√≠vel');
    return;
  }

  console.log(`‚úÖ Backend: ${backendStatus.status}`);
  console.log(`üì± Conectado: ${backendStatus.connected ? 'Sim' : 'N√£o'}`);

  // 2. Buscar conex√µes do backend
  console.log('\nüì° Buscando conex√µes do backend...');
  const backendConnections = await getBackendConnections();
  console.log(`üìä Total de conex√µes no backend: ${backendConnections.connections?.length || 0}`);

  // 3. Verificar se o n√∫mero est√° no backend
  const backendConnection = backendConnections.connections?.find(
    conn => conn.whatsapp_number === TARGET_NUMBER
  );

  if (backendConnection) {
    console.log(`‚úÖ N√∫mero encontrado no backend:`);
    console.log(`   ‚Ä¢ N√∫mero: ${backendConnection.whatsapp_number}`);
    console.log(`   ‚Ä¢ Status: ${backendConnection.status}`);
    console.log(`   ‚Ä¢ Nome: ${backendConnection.whatsapp_name || 'N/A'}`);
  } else {
    console.log(`‚ùå N√∫mero N√ÉO encontrado no backend`);
  }

  // 4. Verificar no banco de dados
  console.log('\nüóÑÔ∏è Verificando no banco de dados...');
  const dbConnections = await findNumberInDatabase();
  console.log(`üìä Registros encontrados no banco: ${dbConnections.length}`);

  if (dbConnections.length > 0) {
    console.log('\nüì± Registros no banco:');
    dbConnections.forEach((conn, index) => {
      console.log(`\n   Registro ${index + 1}:`);
      console.log(`   ‚Ä¢ ID: ${conn.id}`);
      console.log(`   ‚Ä¢ N√∫mero: ${conn.whatsapp_number}`);
      console.log(`   ‚Ä¢ Nome: ${conn.whatsapp_name}`);
      console.log(`   ‚Ä¢ Status: ${conn.connection_status}`);
      console.log(`   ‚Ä¢ Agente ID: ${conn.agent_id}`);
      console.log(`   ‚Ä¢ Criado em: ${conn.created_at}`);
      console.log(`   ‚Ä¢ Atualizado em: ${conn.updated_at}`);
    });
  } else {
    console.log(`‚ùå N√∫mero N√ÉO encontrado no banco de dados`);
  }

  // 5. An√°lise de inconsist√™ncias
  console.log('\nüîç AN√ÅLISE DE INCONSIST√äNCIAS');
  console.log('=' .repeat(40));

  const isInBackend = !!backendConnection;
  const isInDatabase = dbConnections.length > 0;
  const isConnectedInBackend = backendConnection?.status === 'connected';
  const isConnectedInDatabase = dbConnections.some(conn => conn.connection_status === 'connected');

  console.log(`üìä Resultados:`);
  console.log(`   ‚Ä¢ No backend: ${isInBackend ? 'Sim' : 'N√£o'}`);
  console.log(`   ‚Ä¢ No banco: ${isInDatabase ? 'Sim' : 'N√£o'}`);
  console.log(`   ‚Ä¢ Conectado no backend: ${isConnectedInBackend ? 'Sim' : 'N√£o'}`);
  console.log(`   ‚Ä¢ Conectado no banco: ${isConnectedInDatabase ? 'Sim' : 'N√£o'}`);

  if (isInBackend && !isInDatabase) {
    console.log(`\n‚ö†Ô∏è INCONSIST√äNCIA: N√∫mero est√° no backend mas n√£o no banco`);
  } else if (!isInBackend && isInDatabase) {
    console.log(`\n‚ö†Ô∏è INCONSIST√äNCIA: N√∫mero est√° no banco mas n√£o no backend`);
  } else if (isConnectedInBackend && !isConnectedInDatabase) {
    console.log(`\n‚ö†Ô∏è INCONSIST√äNCIA: Conectado no backend mas n√£o no banco`);
  } else if (!isConnectedInBackend && isConnectedInDatabase) {
    console.log(`\n‚ö†Ô∏è INCONSIST√äNCIA: Conectado no banco mas n√£o no backend`);
  } else if (isInBackend && isInDatabase && isConnectedInBackend && isConnectedInDatabase) {
    console.log(`\n‚úÖ SITUA√á√ÉO CORRETA: N√∫mero conectado em ambos os sistemas`);
  } else {
    console.log(`\n‚ÑπÔ∏è SITUA√á√ÉO: N√∫mero n√£o est√° conectado em nenhum sistema`);
  }

  // 6. Recomenda√ß√µes
  console.log('\nüí° RECOMENDA√á√ïES');
  console.log('=' .repeat(20));

  if (!isInBackend && !isInDatabase) {
    console.log('‚Ä¢ N√∫mero n√£o est√° em nenhum sistema - situa√ß√£o normal');
  } else if (isInBackend && !isInDatabase) {
    console.log('‚Ä¢ Sincronizar com banco de dados');
  } else if (!isInBackend && isInDatabase) {
    console.log('‚Ä¢ Limpar registro do banco de dados');
  } else if (isConnectedInBackend && !isConnectedInDatabase) {
    console.log('‚Ä¢ Atualizar status no banco para "connected"');
  } else if (!isConnectedInBackend && isConnectedInDatabase) {
    console.log('‚Ä¢ Atualizar status no banco para "disconnected"');
  }

  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
}

// Executar verifica√ß√£o
checkSpecificNumber().catch(console.error); 