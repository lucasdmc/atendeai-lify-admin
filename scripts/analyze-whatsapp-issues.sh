#!/bin/bash

echo "üîç AN√ÅLISE COMPLETA DOS PROBLEMAS DO WHATSAPP"
echo "=============================================="

# Criar diret√≥rio de an√°lise
ANALYSIS_DIR="whatsapp-analysis-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$ANALYSIS_DIR"

echo "üìÅ Criando diret√≥rio de an√°lise: $ANALYSIS_DIR"

# 1. COLETAR DADOS DO BACKEND (VPS)
echo "üîß Coletando dados do backend..."
ssh root@atendeai-backend-production.up.railway.app << 'EOF' > "$ANALYSIS_DIR/backend-status.txt" 2>&1
echo "=== STATUS DO BACKEND ==="
pm2 status
echo ""
echo "=== LOGS DO BACKEND ==="
pm2 logs LifyChatbot-Node-Server --lines 50
echo ""
echo "=== ARQUIVO DE REQUESTS ==="
cat /tmp/whatsapp-requests.log 2>/dev/null || echo "Arquivo n√£o encontrado"
echo ""
echo "=== TESTE DE CONECTIVIDADE ==="
curl -X POST http://localhost:3001/api/whatsapp/generate-qr \
  -H "Content-Type: application/json" \
  -d '{"agentId": "test-agent-local"}' \
  -w "\nStatus: %{http_code}\nTempo: %{time_total}s\n"
EOF

# 2. COLETAR DADOS DO FRONTEND
echo "üñ•Ô∏è Coletando dados do frontend..."

# Configura√ß√µes do ambiente
cp env.example "$ANALYSIS_DIR/" 2>/dev/null || echo "env.example n√£o encontrado"
cp .env "$ANALYSIS_DIR/" 2>/dev/null || echo ".env n√£o encontrado"

# C√≥digo relevante do frontend
cp -r src/services/ "$ANALYSIS_DIR/frontend-services/"
cp -r src/hooks/whatsapp/ "$ANALYSIS_DIR/frontend-whatsapp-hooks/"
cp -r src/components/whatsapp/ "$ANALYSIS_DIR/frontend-whatsapp-components/"
cp -r src/components/agentes/ "$ANALYSIS_DIR/frontend-agentes-components/"

# 3. COLETAR DADOS DO BACKEND LOCAL
echo "üè† Coletando dados do backend local..."
cp server.js "$ANALYSIS_DIR/backend-local-server.js" 2>/dev/null || echo "server.js n√£o encontrado"

# 4. COLETAR DADOS DO SUPABASE
echo "‚òÅÔ∏è Coletando dados do Supabase..."
cp -r supabase/functions/ "$ANALYSIS_DIR/supabase-functions/"

# 5. CRIAR RESUMO EXECUTIVO
echo "üìã Criando resumo executivo..."
cat > "$ANALYSIS_DIR/EXECUTIVE_SUMMARY.md" << 'EOF'
# RESUMO EXECUTIVO - PROBLEMAS DO WHATSAPP

## Problemas Identificados

### 1. QR Code Falha na Leitura
- **Sintoma**: QR Code √© gerado mas falha ao ser lido
- **Impacto**: Agente n√£o consegue conectar ao WhatsApp
- **Poss√≠veis Causas**: 
  - Timeout na sess√£o
  - Problema de autentica√ß√£o
  - Erro na biblioteca whatsapp-web.js

### 2. Erro 500 na VPS
- **Sintoma**: VPS retorna erro 500 ao tentar conex√£o
- **Impacto**: Frontend n√£o consegue se comunicar com backend
- **Poss√≠veis Causas**:
  - Problema de conectividade entre Edge Function e VPS
  - Erro no endpoint /api/whatsapp/generate-qr
  - Problema de autentica√ß√£o ou headers

### 3. Falha na Contextualiza√ß√£o
- **Sintoma**: Agente n√£o absorve arquivo de contextualiza√ß√£o
- **Impacto**: Chatbot n√£o responde adequadamente
- **Poss√≠veis Causas**:
  - Problema no carregamento do arquivo JSON
  - Erro no processamento da contextualiza√ß√£o
  - Falha na integra√ß√£o com IA

## Arquivos Relevantes para An√°lise

### Backend (VPS)
- `backend-status.txt` - Status e logs do backend
- `backend-local-server.js` - C√≥digo do servidor local

### Frontend
- `frontend-services/` - Servi√ßos de comunica√ß√£o
- `frontend-whatsapp-hooks/` - Hooks do WhatsApp
- `frontend-whatsapp-components/` - Componentes do WhatsApp
- `frontend-agentes-components/` - Componentes dos Agentes

### Supabase
- `supabase-functions/` - Edge Functions

### Configura√ß√µes
- `env.example` - Exemplo de vari√°veis de ambiente
- `.env` - Configura√ß√µes atuais (se dispon√≠vel)

## Perguntas para Claude Opus

1. **An√°lise de Conectividade**: Por que a Edge Function retorna erro 500 mas curl direto funciona?

2. **An√°lise de QR Code**: Por que o QR Code falha na leitura ap√≥s ser gerado?

3. **An√°lise de Contextualiza√ß√£o**: Como garantir que o agente absorva corretamente o arquivo de contextualiza√ß√£o?

4. **An√°lise de Arquitetura**: H√° problemas na arquitetura atual que podem estar causando esses problemas?

5. **Solu√ß√µes Recomendadas**: Quais s√£o as melhores pr√°ticas para resolver cada problema?

## Pr√≥ximos Passos

1. Compartilhar este pacote completo com Claude Opus
2. Analisar logs detalhados do backend
3. Verificar diferen√ßas entre requisi√ß√µes curl vs Edge Function
4. Testar conectividade entre componentes
5. Implementar solu√ß√µes recomendadas
EOF

# 6. CRIAR SCRIPT DE TESTE
echo "üß™ Criando script de teste..."
cat > "$ANALYSIS_DIR/test-whatsapp-flow.sh" << 'EOF'
#!/bin/bash

echo "üß™ TESTE COMPLETO DO FLUXO WHATSAPP"
echo "===================================="

# Teste 1: Backend local
echo "1. Testando backend local..."
curl -X POST http://localhost:3001/api/whatsapp/generate-qr \
  -H "Content-Type: application/json" \
  -d '{"agentId": "test-agent-local"}' \
  -w "\nStatus: %{http_code}\n"

# Teste 2: Backend VPS
echo "2. Testando backend VPS..."
curl -X POST https://atendeai-backend-production.up.railway.app/api/whatsapp/generate-qr \
  -H "Content-Type: application/json" \
  -d '{"agentId": "test-agent-vps"}' \
  -w "\nStatus: %{http_code}\n"

# Teste 3: Edge Function
echo "3. Testando Edge Function..."
curl -X POST https://your-project.supabase.co/functions/v1/agent-whatsapp-manager \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_ANON_KEY" \
  -d '{"action": "generate-qr", "agentId": "test-agent-edge"}' \
  -w "\nStatus: %{http_code}\n"
EOF

chmod +x "$ANALYSIS_DIR/test-whatsapp-flow.sh"

# 7. CRIAR CHECKLIST DE VERIFICA√á√ÉO
echo "‚úÖ Criando checklist de verifica√ß√£o..."
cat > "$ANALYSIS_DIR/VERIFICATION_CHECKLIST.md" << 'EOF'
# CHECKLIST DE VERIFICA√á√ÉO

## ‚úÖ Pr√©-requisitos
- [ ] Backend local rodando na porta 3001
- [ ] Backend VPS rodando na porta 3001
- [ ] Supabase configurado e acess√≠vel
- [ ] Vari√°veis de ambiente configuradas
- [ ] Arquivo de contextualiza√ß√£o presente

## üîß Testes de Conectividade
- [ ] Backend local responde via curl
- [ ] Backend VPS responde via curl
- [ ] Edge Function responde via curl
- [ ] Frontend consegue acessar backend local
- [ ] Frontend consegue acessar backend VPS
- [ ] Frontend consegue acessar Edge Function

## üì± Testes de WhatsApp
- [ ] QR Code √© gerado corretamente
- [ ] QR Code pode ser lido pelo WhatsApp
- [ ] Conex√£o √© estabelecida ap√≥s leitura
- [ ] Sess√£o persiste ap√≥s reconex√£o
- [ ] Agente responde a mensagens

## ü§ñ Testes de Contextualiza√ß√£o
- [ ] Arquivo JSON √© carregado corretamente
- [ ] Contexto √© aplicado ao agente
- [ ] Respostas seguem o contexto
- [ ] Mem√≥ria de conversa funciona
- [ ] Integra√ß√£o com IA funciona

## üêõ Logs e Debug
- [ ] Logs do backend s√£o gerados
- [ ] Logs da Edge Function s√£o gerados
- [ ] Logs do frontend s√£o gerados
- [ ] Erros s√£o capturados e registrados
- [ ] Timeouts s√£o configurados adequadamente
EOF

# 8. COMPRIMIR PACOTE
echo "üì¶ Comprimindo pacote de an√°lise..."
tar -czf "$ANALYSIS_DIR.tar.gz" "$ANALYSIS_DIR"

echo ""
echo "‚úÖ AN√ÅLISE CONCLU√çDA!"
echo "====================="
echo "üìÅ Diret√≥rio criado: $ANALYSIS_DIR"
echo "üì¶ Arquivo compactado: $ANALYSIS_DIR.tar.gz"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Compartilhar $ANALYSIS_DIR.tar.gz com Claude Opus"
echo "2. Executar: ./$ANALYSIS_DIR/test-whatsapp-flow.sh"
echo "3. Verificar: $ANALYSIS_DIR/VERIFICATION_CHECKLIST.md"
echo "4. Ler: $ANALYSIS_DIR/EXECUTIVE_SUMMARY.md"
echo ""
echo "üîç ARQUIVOS IMPORTANTES:"
echo "- $ANALYSIS_DIR/EXECUTIVE_SUMMARY.md (Resumo dos problemas)"
echo "- $ANALYSIS_DIR/backend-status.txt (Logs do backend)"
echo "- $ANALYSIS_DIR/VERIFICATION_CHECKLIST.md (Checklist de testes)"
echo "- $ANALYSIS_DIR/test-whatsapp-flow.sh (Script de teste)" 