import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || "https://niakqdolcdwxtrkbqmdi.supabase.co"
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw"

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkAuthStatus() {
  console.log('üîç Verificando status da autentica√ß√£o ap√≥s reset do banco...')
  
  try {
    // 1. Verificar se h√° usu√°rios na tabela auth.users
    console.log('\n1Ô∏è‚É£ Verificando usu√°rios na tabela auth.users...')
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers()
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError)
    } else {
      console.log(`üë• Usu√°rios encontrados: ${users?.users?.length || 0}`)
      if (users?.users && users.users.length > 0) {
        users.users.forEach((user, index) => {
          console.log(`   ${index + 1}. ${user.email} (${user.id}) - Criado em: ${user.created_at}`)
        })
      }
    }
    
    // 2. Verificar se h√° usu√°rios na tabela user_profiles
    console.log('\n2Ô∏è‚É£ Verificando perfis de usu√°rio...')
    
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(5)
    
    if (profilesError) {
      console.error('‚ùå Erro ao buscar perfis:', profilesError)
    } else {
      console.log(`üë§ Perfis encontrados: ${profiles?.length || 0}`)
      if (profiles && profiles.length > 0) {
        profiles.forEach((profile, index) => {
          console.log(`   ${index + 1}. ${profile.email} (${profile.user_id}) - Role: ${profile.role}`)
        })
      }
    }
    
    // 3. Verificar se h√° tokens de autentica√ß√£o
    console.log('\n3Ô∏è‚É£ Verificando tokens de autentica√ß√£o...')
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå Erro ao buscar sess√£o:', sessionError)
    } else {
      if (session) {
        console.log('‚úÖ Sess√£o ativa encontrada')
        console.log(`   Usu√°rio: ${session.user.email} (${session.user.id})`)
        console.log(`   Expira em: ${new Date(session.expires_at * 1000).toLocaleString()}`)
      } else {
        console.log('‚ùå Nenhuma sess√£o ativa encontrada')
      }
    }
    
    // 4. Verificar se h√° tokens do Google
    console.log('\n4Ô∏è‚É£ Verificando tokens do Google...')
    
    const { data: googleTokens, error: tokensError } = await supabase
      .from('google_calendar_tokens')
      .select('*')
      .limit(5)
    
    if (tokensError) {
      console.error('‚ùå Erro ao buscar tokens do Google:', tokensError)
    } else {
      console.log(`üîë Tokens do Google encontrados: ${googleTokens?.length || 0}`)
    }
    
    // 5. Recomenda√ß√µes
    console.log('\n5Ô∏è‚É£ Recomenda√ß√µes:')
    
    if ((users?.users?.length || 0) === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado no banco')
      console.log('üí° Voc√™ precisa criar um novo usu√°rio ou restaurar dados de backup')
      console.log('üîß Op√ß√µes:')
      console.log('   1. Fazer signup no frontend')
      console.log('   2. Restaurar backup do banco')
      console.log('   3. Criar usu√°rio manualmente via SQL')
    } else if ((profiles?.length || 0) === 0) {
      console.log('‚ö†Ô∏è  Usu√°rios existem mas n√£o h√° perfis')
      console.log('üí° Os perfis de usu√°rio foram perdidos no reset')
      console.log('üîß Op√ß√£o: Restaurar backup ou recriar perfis')
    } else {
      console.log('‚úÖ Usu√°rios e perfis encontrados')
      console.log('üí° O problema pode ser com a sess√£o atual')
      console.log('üîß Op√ß√£o: Fazer logout e login novamente')
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

checkAuthStatus() 