const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testClinicDelete() {
  console.log('üß™ Testando exclus√£o de cl√≠nicas...\n');

  try {
    // 1. Fazer login com o usu√°rio admin_lify
    console.log('1Ô∏è‚É£ Fazendo login...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'lucasdmc@lify.com',
      password: '123456' // Substitua pela senha correta
    });

    if (authError) {
      console.error('‚ùå Erro no login:', authError);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso');
    console.log('üë§ User ID:', authData.user.id);

    // 2. Verificar perfil do usu√°rio
    console.log('\n2Ô∏è‚É£ Verificando perfil do usu√°rio...');
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', authData.user.id)
      .single();

    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError);
      return;
    }

    console.log('‚úÖ Perfil encontrado:', profile);

    // 3. Verificar permiss√µes
    console.log('\n3Ô∏è‚É£ Verificando permiss√µes...');
    const { data: permissions, error: permissionsError } = await supabase
      .from('role_permissions')
      .select('*')
      .eq('role', profile.role);

    if (permissionsError) {
      console.error('‚ùå Erro ao buscar permiss√µes:', permissionsError);
      return;
    }

    console.log('‚úÖ Permiss√µes encontradas:', permissions.length);
    permissions.forEach(p => {
      console.log(`   - ${p.module_name}: ${p.can_access ? '‚úÖ' : '‚ùå'}`);
    });

    // 4. Listar cl√≠nicas existentes
    console.log('\n4Ô∏è‚É£ Listando cl√≠nicas...');
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*')
      .order('created_at', { ascending: false });

    if (clinicsError) {
      console.error('‚ùå Erro ao listar cl√≠nicas:', clinicsError);
      return;
    }

    console.log('‚úÖ Cl√≠nicas encontradas:', clinics.length);
    clinics.forEach(clinic => {
      console.log(`   - ${clinic.name} (ID: ${clinic.id}) - Principal: ${clinic.id === '00000000-0000-0000-0000-000000000001'}`);
    });

    // 5. Tentar excluir uma cl√≠nica de teste (se existir)
    const testClinic = clinics.find(c => c.name.includes('Teste') && c.id !== '00000000-0000-0000-0000-000000000001');
    
    if (testClinic) {
      console.log('\n5Ô∏è‚É£ Tentando excluir cl√≠nica de teste...');
      console.log('üéØ Cl√≠nica selecionada:', testClinic.name);
      
      const { error: deleteError } = await supabase
        .from('clinics')
        .delete()
        .eq('id', testClinic.id);

      if (deleteError) {
        console.error('‚ùå Erro ao excluir cl√≠nica:', deleteError);
      } else {
        console.log('‚úÖ Cl√≠nica exclu√≠da com sucesso!');
      }
    } else {
      console.log('\n5Ô∏è‚É£ Nenhuma cl√≠nica de teste encontrada para exclus√£o');
    }

    // 6. Verificar pol√≠ticas RLS
    console.log('\n6Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_table_policies', { table_name: 'clinics' })
      .catch(() => {
        console.log('‚ö†Ô∏è Fun√ß√£o get_table_policies n√£o dispon√≠vel, pulando...');
        return { data: null, error: null };
      });

    if (policies && !policiesError) {
      console.log('‚úÖ Pol√≠ticas encontradas:', policies.length);
      policies.forEach(policy => {
        console.log(`   - ${policy.policyname}: ${policy.cmd}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testClinicDelete(); 