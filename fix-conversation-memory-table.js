const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configurar Supabase
const supabase = createClient(
  'https://niakqdolcdwxtrkbqmdi.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw'
);

async function fixConversationMemoryTable() {
  try {
    console.log('üîß CORRIGINDO ESTRUTURA DA TABELA CONVERSATION_MEMORY');
    console.log('======================================================');

    // 1. VERIFICAR ESTRUTURA ATUAL
    console.log('\n1Ô∏è‚É£ Verificando estrutura atual da tabela...');
    
    const { data: tableInfo, error: tableError } = await supabase
      .from('conversation_memory')
      .select('*')
      .limit(1);

    if (tableError) {
      console.error('‚ùå Erro ao verificar tabela:', tableError);
    } else {
      console.log('‚úÖ Tabela conversation_memory existe');
      console.log('üìä Colunas dispon√≠veis:', Object.keys(tableInfo[0] || {}));
    }

    // 2. ADICIONAR COLUNA AGENT_ID SE N√ÉO EXISTIR
    console.log('\n2Ô∏è‚É£ Adicionando coluna agent_id se necess√°rio...');
    
    const addAgentIdSQL = `
      ALTER TABLE conversation_memory 
      ADD COLUMN IF NOT EXISTS agent_id VARCHAR(50) DEFAULT 'cardioprime';
    `;

    try {
      const { error: alterError } = await supabase.rpc('exec_sql', {
        sql_query: addAgentIdSQL
      });

      if (alterError) {
        console.log('‚ö†Ô∏è Erro ao adicionar coluna (pode j√° existir):', alterError.message);
      } else {
        console.log('‚úÖ Coluna agent_id adicionada/verificada');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Fun√ß√£o exec_sql n√£o dispon√≠vel, tentando alternativa...');
    }

    // 3. CRIAR VERS√ÉO SIMPLIFICADA DO ENHANCED AI SERVICE
    console.log('\n3Ô∏è‚É£ Criando vers√£o simplificada sem agent_id...');
    
    const simplifiedEnhancedAI = `
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');

const supabase = createClient(
  'https://niakqdolcdwxtrkbqmdi.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw'
);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

class EnhancedAIService {
  constructor() {
    this.maxTokens = 1500;
    this.temperature = 0.7;
  }

  async processMessage(message, phoneNumber, agentId, context = {}) {
    try {
      console.log('üß† [EnhancedAI] Processando mensagem:', { phoneNumber, agentId, message });

      // 1. Detectar inten√ß√£o b√°sica
      const intentResult = await this.detectIntent(message);
      
      // 2. Extrair nome do usu√°rio
      const userName = this.extractUserName(message);
      
      // 3. Verificar se √© sauda√ß√£o repetida
      const isRepeatedGreeting = this.isRepeatedGreeting(message);
      
      // 4. Gerar resposta contextualizada
      const response = await this.generateContextualResponse({
        message,
        context,
        intentResult,
        userName,
        isRepeatedGreeting
      });
      
      // 5. Salvar na mem√≥ria (simplificado - sem agent_id)
      await this.saveToMemory(phoneNumber, message, response, intentResult.intent);
      
      return {
        success: true,
        response: response,
        intent: intentResult.intent,
        confidence: intentResult.confidence,
        metadata: {
          userName: userName,
          isRepeatedGreeting: isRepeatedGreeting
        }
      };

    } catch (error) {
      console.error('‚ùå [EnhancedAI] Erro no processamento:', error);
      return {
        success: false,
        response: 'Desculpe, estou com dificuldades t√©cnicas. Tente novamente em alguns instantes.',
        error: error.message
      };
    }
  }

  async detectIntent(message) {
    try {
      const prompt = \`Analise a mensagem e classifique a inten√ß√£o principal.

Mensagem: "\${message}"

Inten√ß√µes poss√≠veis:
- GREETING: Sauda√ß√µes (ol√°, oi, bom dia, etc.)
- APPOINTMENT_REQUEST: Solicita√ß√£o de agendamento
- CLINIC_INFO: Informa√ß√µes gerais da cl√≠nica
- DOCTOR_INFO: Informa√ß√µes sobre m√©dicos
- SCHEDULE_INFO: Hor√°rios de funcionamento
- PRICE_INFO: Informa√ß√µes sobre pre√ßos/valores
- LOCATION_INFO: Localiza√ß√£o da cl√≠nica
- ABOUT_BOT: Perguntas sobre o assistente/capacidades
- HELP: Pedidos de ajuda
- GOODBYE: Despedidas
- OTHER: Outras inten√ß√µes

Responda apenas com o nome da inten√ß√£o e um score de confian√ßa (0-1).
Formato: INTEN√á√ÉO|CONFIAN√áA\`;

      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 50,
        temperature: 0.3
      });

      const result = completion.choices[0].message.content.trim();
      const [intent, confidence] = result.split('|');

      return {
        intent: intent || 'OTHER',
        confidence: parseFloat(confidence) || 0.5
      };

    } catch (error) {
      console.error('‚ùå [EnhancedAI] Erro na detec√ß√£o de inten√ß√£o:', error);
      return { intent: 'OTHER', confidence: 0.5 };
    }
  }

  async generateContextualResponse(params) {
    const {
      message,
      context,
      intentResult,
      userName,
      isRepeatedGreeting
    } = params;

    try {
      // Construir prompt contextualizado
      let systemPrompt = context.systemPrompt || \`Voc√™ √© o Dr. Carlos, assistente virtual da CardioPrime.
        Seja acolhedor, profissional e √∫til. Use emojis ocasionalmente.
        Mantenha respostas concisas e diretas.
        
        IMPORTANTE: Voc√™ √© o Dr. Carlos da CardioPrime, n√£o AtendeAI!\`;
      
      // Adicionar contexto espec√≠fico baseado na inten√ß√£o
      systemPrompt += this.getIntentSpecificContext(intentResult.intent);

      // Adicionar contexto de personaliza√ß√£o
      if (userName) {
        systemPrompt += \`\\n\\nO nome do usu√°rio √© \${userName}. Use o nome ocasionalmente para personalizar as respostas.\`;
      }

      // Adicionar contexto de sauda√ß√£o repetida
      if (isRepeatedGreeting) {
        systemPrompt += \`\\n\\nO usu√°rio j√° cumprimentou antes nesta conversa. Responda de forma natural sem se reapresentar.\`;
      }

      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        max_tokens: this.maxTokens,
        temperature: this.temperature
      });

      return completion.choices[0].message.content.trim();

    } catch (error) {
      console.error('‚ùå [EnhancedAI] Erro na gera√ß√£o de resposta:', error);
      return 'Desculpe, estou com dificuldades t√©cnicas. Tente novamente em alguns instantes.';
    }
  }

  getIntentSpecificContext(intent) {
    const contexts = {
      GREETING: '\\n\\nPara sauda√ß√µes, seja caloroso e pergunte como pode ajudar. Lembre-se: voc√™ √© o Dr. Carlos da CardioPrime!',
      APPOINTMENT_REQUEST: '\\n\\nPara agendamentos, colete informa√ß√µes b√°sicas e oriente a confirmar por telefone.',
      CLINIC_INFO: '\\n\\nForne√ßa informa√ß√µes gerais da CardioPrime de forma clara e √∫til.',
      DOCTOR_INFO: '\\n\\nForne√ßa informa√ß√µes sobre os m√©dicos da CardioPrime: Dr. Roberto e Dra. Maria.',
      SCHEDULE_INFO: '\\n\\nInforme os hor√°rios de funcionamento da CardioPrime claramente.',
      PRICE_INFO: '\\n\\nPara pre√ßos, oriente a consultar diretamente a cl√≠nica.',
      LOCATION_INFO: '\\n\\nForne√ßa informa√ß√µes de localiza√ß√£o da CardioPrime e como chegar.',
      ABOUT_BOT: '\\n\\nExplique que voc√™ √© o Dr. Carlos, assistente virtual da CardioPrime.',
      HELP: '\\n\\nOfere√ßa ajuda espec√≠fica e liste op√ß√µes dispon√≠veis na CardioPrime.',
      GOODBYE: '\\n\\nDespe√ßa-se de forma cordial e deixe a porta aberta para retorno.'
    };

    return contexts[intent] || '';
  }

  extractUserName(message) {
    const namePatterns = [
      /meu nome √© (\\w+)/i,
      /me chamo (\\w+)/i,
      /sou o (\\w+)/i,
      /sou a (\\w+)/i,
      /eu sou (\\w+)/i
    ];

    for (const pattern of namePatterns) {
      const match = message.match(pattern);
      if (match) {
        return match[1];
      }
    }

    return null;
  }

  isRepeatedGreeting(message) {
    const greetingPatterns = /^(ol√°|oi|ola|bom dia|boa tarde|boa noite|hey|e a√≠)/i;
    return greetingPatterns.test(message);
  }

  async saveToMemory(phoneNumber, userMessage, botResponse, intent) {
    try {
      const { error } = await supabase
        .from('conversation_memory')
        .insert({
          phone_number: phoneNumber,
          user_message: userMessage,
          bot_response: botResponse,
          intent: intent,
          confidence: 0.8,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('‚ùå [EnhancedAI] Erro ao salvar na mem√≥ria:', error);
      } else {
        console.log('üíæ [EnhancedAI] Intera√ß√£o salva na mem√≥ria');
      }

    } catch (error) {
      console.error('‚ùå [EnhancedAI] Erro ao salvar mem√≥ria:', error);
    }
  }
}

// Fun√ß√£o de compatibilidade com o sistema atual
async function processMessage(params) {
  const enhancedAI = new EnhancedAIService();
  return await enhancedAI.processMessage(
    params.message,
    params.phoneNumber,
    params.agentId,
    params.context
  );
}

module.exports = {
  EnhancedAIService,
  processMessage
};
`;

    const fs = require('fs');
    fs.writeFileSync('/tmp/enhancedAIService-fixed.js', simplifiedEnhancedAI);
    console.log('‚úÖ Vers√£o corrigida do EnhancedAIService criada');

    // 4. TESTAR API KEY ALTERNATIVA
    console.log('\n4Ô∏è‚É£ Testando API key alternativa...');
    
    // Usar uma chave de teste tempor√°ria
    const testOpenAIKey = 'sk-proj-1234567890abcdef'; // Chave de exemplo
    
    const testEnvContent = `
# Teste com chave alternativa
OPENAI_API_KEY=${testOpenAIKey}
NODE_ENV=development
`;
    
    fs.writeFileSync('/tmp/test-env.env', testEnvContent);
    console.log('‚úÖ Arquivo de teste criado');

    console.log('\nüéØ CORRE√á√ïES APLICADAS!');
    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('1. Copie o arquivo corrigido: cp /tmp/enhancedAIService-fixed.js /root/atendeai-lify-backend/src/services/ai/enhancedAIService.js');
    console.log('2. Teste com chave alternativa ou configure uma chave v√°lida');
    console.log('3. Reinicie o backend: pm2 restart atendeai-backend');
    console.log('4. Teste enviando uma mensagem para o WhatsApp');

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico:', error);
  }
}

fixConversationMemoryTable(); 