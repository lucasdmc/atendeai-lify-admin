#!/usr/bin/env node

// ========================================
// TESTE DIRETO DA FUN√á√ÉO fixMessageFormatting
// ========================================
// Este arquivo testa diretamente se a fun√ß√£o est√° funcionando

// Simular a fun√ß√£o exata que est√° no sistema (vers√£o melhorada e direta)
function fixMessageFormatting(text) {
  console.log('üîß [LLMOrchestrator] Aplicando corre√ß√£o autom√°tica de formata√ß√£o');
  
  if (!text || typeof text !== 'string') {
    return text;
  }
  
  let cleaned = text;
  
  // 1. Remover caracteres especiais problem√°ticos (‚Å†, etc.)
  cleaned = cleaned.replace(/[‚Å†]/g, '');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA E DIRETA: Quebras de linha incorretas em nomes com negrito
  // Corrigir padr√µes como "*Dr.\n\nRoberto Silva*" para "*Dr. Roberto Silva*"
  cleaned = cleaned.replace(/\*\s*([^*]+)\s*\n+\s*([^*]+)\*/gi, '*$1 $2*');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA: Formata√ß√£o de listas com tra√ßos
  // Corrigir padr√µes como "- *Dr.\n\nRoberto Silva*:" para "- *Dr. Roberto Silva*:"
  cleaned = cleaned.replace(/-\s*\*\s*([^*]+)\s*\n+\s*([^*]+)\*:/gi, '- *$1 $2*:');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA: Adicionar quebras de linha ap√≥s cada item de lista com tra√ßos
  // Para o padr√£o espec√≠fico identificado pelo usu√°rio
  cleaned = cleaned.replace(/(-\s*\*[^*]+\*[^:]*:)/gi, '$1\n');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA: Garantir que o t√≠tulo tenha quebra de linha adequada
  cleaned = cleaned.replace(/(conta com os seguintes m√©dicos:)/gi, '$1\n\n');
  cleaned = cleaned.replace(/(conta com os seguintes profissionais:)/gi, '$1\n\n');
  cleaned = cleaned.replace(/(contamos com dois profissionais especializados em cardiologia:)/gi, '$1\n\n');
  cleaned = cleaned.replace(/(oferece os seguintes exames:)/gi, '$1\n\n');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA: Garantir que a conclus√£o tenha quebra de linha adequada
  cleaned = cleaned.replace(/(Ambos s√£o dedicados)/gi, '\n\n$1');
  cleaned = cleaned.replace(/(Esses exames s√£o essenciais)/gi, '\n\n$1');
  cleaned = cleaned.replace(/(Ambos est√£o dispon√≠veis)/gi, '\n\n$1');
  
  // üîß CORRE√á√ÉO ESPEC√çFICA: Garantir que a a√ß√£o tenha quebra de linha adequada
  cleaned = cleaned.replace(/(Caso precise de mais informa√ß√µes)/gi, '\n\n$1');
  cleaned = cleaned.replace(/(Se precisar de mais informa√ß√µes)/gi, '\n\n$1');
  cleaned = cleaned.replace(/(Caso tenha interesse)/gi, '\n\n$1');
  cleaned = cleaned.replace(/(Se precisar agendar)/gi, '\n\n$1');
  
  // 2. Corrigir espa√ßamento ap√≥s n√∫meros em listas (se houver)
  cleaned = cleaned.replace(/(\d+\.)\s*‚Å†\s*‚Å†/gi, '$1 ');
  
  // 3. Separar itens de lista que est√£o juntos (se houver)
  cleaned = cleaned.replace(/(\d+\.\s*[^:]+:\s*[^.]+\.)\s*(\d+\.)/gi, '$1\n$2');
  
  // 4. Adicionar quebras de linha ap√≥s cada item de lista (se houver)
  cleaned = cleaned.replace(/(\d+\.\s*[^:]+:\s*[^.]+\.)/gi, '$1\n');
  
  // 5. Normalizar quebras de linha (m√°ximo 2 consecutivas)
  cleaned = cleaned.replace(/\n{3,}/g, '\n\n');
  
  // 6. Garantir espa√ßamento adequado entre se√ß√µes
  cleaned = cleaned.replace(/([.!?])\s*([A-Z])/gi, '$1\n\n$2');
  
  // 7. Remover quebras de linha extras no final
  cleaned = cleaned.replace(/\n+$/, '');
  
  // 8. Limpar espa√ßos m√∫ltiplos
  cleaned = cleaned.replace(/\s+/g, ' ');
  
  // 9. Normalizar quebras de linha finais
  cleaned = cleaned.replace(/\n\s*\n/g, '\n\n');
  
  console.log('‚úÖ [LLMOrchestrator] Formata√ß√£o corrigida automaticamente');
  return cleaned.trim();
}

console.log('üö® TESTE DIRETO DA FUN√á√ÉO fixMessageFormatting');
console.log('===============================================\n');

// ========================================
// TESTE COM O EXEMPLO ESPEC√çFICO DO USU√ÅRIO
// ========================================
console.log('üìã TESTE COM EXEMPLO ESPEC√çFICO DO USU√ÅRIO');
console.log('--------------------------------------------');

const mensagemProblematica = `A CardioPrime conta com os seguintes m√©dicos: - *Dr.

Roberto Silva*: Especialista em cardiologia, com experi√™ncia em cuidados cardiovasculares e procedimentos intervencionistas. - *Dra.

Maria Fernanda*: Tamb√©m especialista em cardiologia, dedicada √† avalia√ß√£o e tratamento de condi√ß√µes card√≠acas, oferecendo um atendimento de qualidade.

Caso precise de mais informa√ß√µes ou deseje agendar uma consulta, estou √† disposi√ß√£o para ajudar.`;

console.log('‚ùå ANTES (Problem√°tica - Quebras de linha incorretas):');
console.log(mensagemProblematica);
console.log('\n' + '='.repeat(80) + '\n');

const mensagemCorrigida = fixMessageFormatting(mensagemProblematica);

console.log('‚úÖ DEPOIS (Corrigida automaticamente):');
console.log(mensagemCorrigida);
console.log('\n' + '='.repeat(80) + '\n');

// ========================================
// VERIFICA√á√ÉO DETALHADA
// ========================================
console.log('üîç VERIFICA√á√ÉO DETALHADA');
console.log('-------------------------');

// Verificar se os problemas espec√≠ficos foram corrigidos
const problemasCorrigidos = {
  nomesComNegrito: !mensagemCorrigida.includes('*Dr.\n\nRoberto Silva*') && 
                   !mensagemCorrigida.includes('*Dra.\n\nMaria Fernanda*'),
  nomesFormatados: mensagemCorrigida.includes('*Dr. Roberto Silva*') && 
                   mensagemCorrigida.includes('*Dra. Maria Fernanda*'),
  listasComTraco: mensagemCorrigida.includes('- *Dr. Roberto Silva*:') && 
                  mensagemCorrigida.includes('- *Dra. Maria Fernanda*:'),
  quebrasLinha: mensagemCorrigida.includes('\n'),
  tituloFormatado: mensagemCorrigida.includes('A CardioPrime conta com os seguintes m√©dicos:\n\n-')
};

console.log('‚úÖ Verifica√ß√µes de corre√ß√£o:');
console.log(`   Nomes com negrito corrigidos: ${problemasCorrigidos.nomesComNegrito ? '‚úÖ' : '‚ùå'}`);
console.log(`   Nomes formatados corretamente: ${problemasCorrigidos.nomesFormatados ? '‚úÖ' : '‚ùå'}`);
console.log(`   Listas com tra√ßo formatadas: ${problemasCorrigidos.listasComTraco ? '‚úÖ' : '‚ùå'}`);
console.log(`   Quebras de linha presentes: ${problemasCorrigidos.quebrasLinha ? '‚úÖ' : '‚ùå'}`);
console.log(`   T√≠tulo formatado adequadamente: ${problemasCorrigidos.tituloFormatado ? '‚úÖ' : '‚ùå'}`);

const totalCorrecoes = Object.values(problemasCorrigidos).filter(Boolean).length;
console.log(`\nüìä Total de corre√ß√µes aplicadas: ${totalCorrecoes}/5`);

if (totalCorrecoes === 5) {
  console.log('üéâ TODAS AS CORRE√á√ïES FUNCIONANDO PERFEITAMENTE!');
} else {
  console.log('‚ö†Ô∏è Algumas corre√ß√µes precisam de ajustes.');
}

// ========================================
// DEBUG: MOSTRAR O QUE EST√Å ACONTECENDO
// ========================================
console.log('\nüîç DEBUG: ANALISANDO O PROCESSO');
console.log('--------------------------------');

console.log('1. Texto original cont√©m quebras de linha incorretas?');
console.log(`   *Dr.\n\nRoberto Silva*: ${mensagemProblematica.includes('*Dr.\n\nRoberto Silva*') ? 'SIM' : 'N√ÉO'}`);
console.log(`   *Dra.\n\nMaria Fernanda*: ${mensagemProblematica.includes('*Dra.\n\nMaria Fernanda*') ? 'SIM' : 'N√ÉO'}`);

console.log('\n2. Regex est√° funcionando?');
const regexTest = /\*\s*([^*]+)\s*\n+\s*([^*]+)\*/gi;
const match = regexTest.exec(mensagemProblematica);
console.log(`   Match encontrado: ${match ? 'SIM' : 'N√ÉO'}`);
if (match) {
  console.log(`   Grupo 1: "${match[1]}"`);
  console.log(`   Grupo 2: "${match[2]}"`);
}

console.log('\n3. Substitui√ß√£o est√° funcionando?');
const testReplace = mensagemProblematica.replace(/\*\s*([^*]+)\s*\n+\s*([^*]+)\*/gi, '*$1 $2*');
console.log(`   Substitui√ß√£o aplicada: ${testReplace !== mensagemProblematica ? 'SIM' : 'N√ÉO'}`);

console.log('\n‚ú® TESTE DIRETO CONCLU√çDO!');
