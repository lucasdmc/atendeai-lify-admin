import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseServiceKey = process.env.SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  console.log('üí° Execute: export SERVICE_ROLE_KEY=sua_service_role_key');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testNewWhatsAppServer() {
  try {
    console.log('üß™ Testando novo servidor WhatsApp...');
    
    const whatsappServerUrl = 'https://lify.magah.com.br';
    console.log(`üì° URL do servidor: ${whatsappServerUrl}`);
    
    // Teste 1: Verificar se o servidor est√° online
    console.log('\n1Ô∏è‚É£ Testando conectividade b√°sica...');
    try {
      const response = await fetch(`${whatsappServerUrl}/`);
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Servidor est√° online!');
        console.log('üìä Resposta:', data);
      } else {
        console.log(`‚ö†Ô∏è Servidor respondeu com status: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro ao conectar com o servidor:', error.message);
    }
    
    // Teste 2: Verificar endpoint de status
    console.log('\n2Ô∏è‚É£ Testando endpoint de status...');
    try {
      const response = await fetch(`${whatsappServerUrl}/api/whatsapp/status`);
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Endpoint de status funcionando!');
        console.log('üìä Status:', data);
      } else {
        console.log(`‚ö†Ô∏è Endpoint de status retornou: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro no endpoint de status:', error.message);
    }
    
    // Teste 3: Verificar se as Edge Functions est√£o configuradas
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√£o das Edge Functions...');
    try {
      const { data: functions, error } = await supabase.functions.list();
      if (error) {
        console.log('‚ùå Erro ao listar fun√ß√µes:', error);
      } else {
        console.log('‚úÖ Edge Functions encontradas:');
        functions.forEach(func => {
          console.log(`  - ${func.name}`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erro ao verificar Edge Functions:', error.message);
    }
    
    // Teste 4: Testar gera√ß√£o de QR Code
    console.log('\n4Ô∏è‚É£ Testando gera√ß√£o de QR Code...');
    try {
      const response = await fetch(`${whatsappServerUrl}/api/whatsapp/generate-qr`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ agentId: 'test-agent' })
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Endpoint de QR Code funcionando!');
        console.log('üìä Resposta:', data);
      } else {
        console.log(`‚ö†Ô∏è Endpoint de QR Code retornou: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro no endpoint de QR Code:', error.message);
    }
    
    console.log('\nüéâ Testes conclu√≠dos!');
    
  } catch (error) {
    console.error('‚ùå Erro geral nos testes:', error);
  }
}

// Executar os testes
testNewWhatsAppServer().catch(console.error); 