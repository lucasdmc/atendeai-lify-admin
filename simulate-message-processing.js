import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase (mesma configura√ß√£o do servi√ßo principal)
const supabaseUrl = process.env.SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw';

const supabase = createClient(supabaseUrl, supabaseKey);

// Simular o m√©todo isFirstConversationOfDay
const isFirstConversationOfDay = async (phoneNumber) => {
  try {
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    
    // Primeiro, verificar se h√° registros antigos que precisam ser atualizados
    const { data: existingRecord } = await supabase
      .from('conversation_memory')
      .select('last_interaction')
      .eq('phone_number', phoneNumber)
      .single();

    // Se h√° um registro antigo (de dias anteriores), atualizar para hoje
    if (existingRecord && existingRecord.last_interaction) {
      const recordDate = new Date(existingRecord.last_interaction);
      if (recordDate < startOfDay) {
        console.log('üîÑ Atualizando registro antigo para hoje...');
        
        await supabase
          .from('conversation_memory')
          .update({
            last_interaction: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('phone_number', phoneNumber);
      }
    }
    
    // Agora verificar se h√° intera√ß√µes hoje
    const { data } = await supabase
      .from('conversation_memory')
      .select('last_interaction')
      .eq('phone_number', phoneNumber)
      .gte('last_interaction', startOfDay.toISOString())
      .order('last_interaction', { ascending: false })
      .limit(1);

    // Se n√£o h√° intera√ß√µes hoje, √© primeira conversa
    return !data || data.length === 0;
  } catch (error) {
    console.error('‚ùå Erro ao verificar primeira conversa do dia:', error);
    return true; // Por seguran√ßa, assume que √© primeira conversa
  }
};

// Simular o m√©todo applyResponseLogic
const applyResponseLogic = async (response, clinicContext, isFirstConversationOfDay, isWithinBusinessHours, userProfile) => {
  try {
    // Obter configura√ß√µes do agente
    const agentConfig = clinicContext.agentConfig || {};
    
    console.log('üîß Configura√ß√µes do agente encontradas:', {
      nome: agentConfig.nome,
      saudacao_inicial: agentConfig.saudacao_inicial ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA',
      mensagem_despedida: agentConfig.mensagem_despedida ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA',
      mensagem_fora_horario: agentConfig.mensagem_fora_horario ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA'
    });
    
    // Se est√° fora do hor√°rio, usar mensagem fora do hor√°rio
    if (!isWithinBusinessHours) {
      const outOfHoursMessage = agentConfig.mensagem_fora_horario || 
        'No momento estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.';
      
      console.log('üïí Aplicando mensagem fora do hor√°rio');
      return outOfHoursMessage;
    }

    // Se √© primeira conversa do dia, adicionar sauda√ß√£o inicial
    if (isFirstConversationOfDay) {
      const initialGreeting = agentConfig.saudacao_inicial || 
        `Ol√°! Sou o ${agentConfig.nome || 'Assistente Virtual'}, assistente virtual da ${clinicContext.name}. Como posso ajud√°-lo hoje?`;
      
      console.log('üëã Aplicando sauda√ß√£o inicial:', initialGreeting.substring(0, 50) + '...');
      
      // Personalizar sauda√ß√£o com nome do usu√°rio se dispon√≠vel
      let personalizedGreeting = initialGreeting;
      if (userProfile?.name) {
        personalizedGreeting = initialGreeting.replace('Como posso ajud√°-lo hoje?', `Como posso ajud√°-lo hoje, ${userProfile.name}?`);
      }
      
      return personalizedGreeting + "\n\n" + response;
    }

    return response;
  } catch (error) {
    console.error('‚ùå Erro ao aplicar l√≥gica de resposta:', error);
    return response;
  }
};

const simulateMessageProcessing = async () => {
  console.log('üß™ SIMULA√á√ÉO: Processamento de mensagem');
  
  const phoneNumber = '554730915628';
  const message = 'Ol√°!';
  
  try {
    // 1. Verificar se √© primeira conversa do dia
    console.log('\nüìÖ Verificando se √© primeira conversa do dia...');
    const isFirstConversationOfDayResult = await isFirstConversationOfDay(phoneNumber);
    console.log(`üéØ isFirstConversationOfDay: ${isFirstConversationOfDayResult}`);

    // 2. Simular contexto da cl√≠nica
    console.log('\nüè• Simulando contexto da cl√≠nica...');
    const clinicContext = {
      name: 'CardioPrime',
      agentConfig: {
        nome: 'Cardio',
        saudacao_inicial: 'Ol√°! Sou o Cardio, assistente virtual da CardioPrime. Como posso cuidar da sua sa√∫de cardiovascular hoje?',
        mensagem_despedida: 'Obrigado por escolher nossa cl√≠nica. At√© breve!',
        mensagem_fora_horario: 'No momento estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.'
      }
    };

    // 3. Simular resposta do LLM
    console.log('\nü§ñ Simulando resposta do LLM...');
    const llmResponse = 'Ol√°, Lucas! Como posso ajudar voc√™ hoje com suas d√∫vidas ou necessidades relacionadas √† sa√∫de cardiovascular? Fique √† vontade para perguntar!';

    // 4. Aplicar l√≥gica de resposta
    console.log('\nüîß Aplicando l√≥gica de resposta...');
    const isWithinBusinessHours = true; // Simular que est√° dentro do hor√°rio
    const userProfile = { name: 'Lucas' };
    
    const finalResponse = await applyResponseLogic(
      llmResponse, 
      clinicContext, 
      isFirstConversationOfDayResult, 
      isWithinBusinessHours, 
      userProfile
    );

    console.log('\nüìù RESPOSTA FINAL:');
    console.log('='.repeat(50));
    console.log(finalResponse);
    console.log('='.repeat(50));

    // 5. Verificar se a resposta cont√©m sauda√ß√£o
    const hasGreeting = finalResponse.includes('Ol√°! Sou o Cardio, assistente virtual da CardioPrime');
    console.log(`\nüîç Cont√©m sauda√ß√£o? ${hasGreeting ? 'SIM' : 'N√ÉO'}`);

    if (hasGreeting && !isFirstConversationOfDayResult) {
      console.log('‚ùå PROBLEMA: Sauda√ß√£o foi aplicada mesmo n√£o sendo primeira conversa do dia!');
    } else if (!hasGreeting && isFirstConversationOfDayResult) {
      console.log('‚ùå PROBLEMA: Sauda√ß√£o n√£o foi aplicada sendo primeira conversa do dia!');
    } else {
      console.log('‚úÖ CORRETO: L√≥gica funcionando como esperado!');
    }

  } catch (error) {
    console.error('‚ùå Erro na simula√ß√£o:', error);
  }
};

// Executar simula√ß√£o
simulateMessageProcessing().then(() => {
  console.log('\n‚úÖ Simula√ß√£o conclu√≠da!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro:', error);
  process.exit(1);
}); 