// ========================================
// TESTE DAS CORRE√á√ïES DE CONTEXTUALIZA√á√ÉO
// ========================================

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase
const supabase = createClient(
  process.env.SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.SY8A3ReAs_D7SFBp99PpSe8rpm1hbWMv4b2q-c_VS5M'
);

async function testContextualizationFix() {
  try {
    console.log('üß™ [TESTE] Iniciando teste das corre√ß√µes de contextualiza√ß√£o...');
    console.log('üîë [TESTE] URL Supabase:', process.env.SUPABASE_URL);
    console.log('üîë [TESTE] Service Role Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');
    
    // 1. Testar busca de cl√≠nicas com contextualiza√ß√£o
    console.log('\nüîç [TESTE] 1. Buscando cl√≠nicas com contextualiza√ß√£o...');
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('name, whatsapp_phone, id, has_contextualization, contextualization_json')
      .eq('has_contextualization', true);
    
    if (clinicsError) {
      console.error('‚ùå [TESTE] Erro ao buscar cl√≠nicas:', clinicsError);
      return;
    }
    
    console.log(`‚úÖ [TESTE] ${clinics.length} cl√≠nicas encontradas:`);
    clinics.forEach(clinic => {
      console.log(`   - ${clinic.name} (ID: ${clinic.id})`);
      console.log(`     WhatsApp: ${clinic.whatsapp_phone}`);
      console.log(`     Tem JSON: ${!!clinic.contextualization_json}`);
      if (clinic.contextualization_json) {
        console.log(`     Estrutura JSON:`, Object.keys(clinic.contextualization_json));
      }
    });
    
    // 2. Testar busca de mem√≥ria de conversa
    console.log('\nüîç [TESTE] 2. Testando busca de mem√≥ria de conversa...');
    const testPhone = '554730915628'; // N√∫mero do Lucas
    
    const { data: memory, error: memoryError } = await supabase
      .from('conversation_memory')
      .select('*')
      .eq('phone_number', testPhone)
      .single();
    
    if (memoryError && memoryError.code !== 'PGRST116') {
      console.error('‚ùå [TESTE] Erro ao buscar mem√≥ria:', memoryError);
    } else if (memory) {
      console.log('‚úÖ [TESTE] Mem√≥ria encontrada:', {
        phoneNumber: memory.phone_number,
        hasUserProfile: !!memory.user_profile,
        userProfileData: memory.user_profile,
        hasHistory: !!memory.conversation_history,
        historyLength: memory.conversation_history?.length || 0,
        lastInteraction: memory.last_interaction,
        updatedAt: memory.updated_at
      });
    } else {
      console.log('üìù [TESTE] Nenhuma mem√≥ria encontrada para o n√∫mero de teste');
    }
    
    // 3. Testar inser√ß√£o de mem√≥ria
    console.log('\nüîç [TESTE] 3. Testando inser√ß√£o de mem√≥ria...');
    const testMemory = {
      phone_number: testPhone,
      user_profile: { name: 'Lucas Cantoni' },
      conversation_history: [
        {
          timestamp: new Date().toISOString(),
          user: 'Ol√°, me chamo Lucas, tudo bem?',
          bot: 'Ol√°! Como posso ajud√°-lo hoje, Lucas?',
          intent: 'GREETING'
        }
      ],
      last_interaction: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { error: insertError } = await supabase
      .from('conversation_memory')
      .upsert(testMemory, { onConflict: 'phone_number' });
    
    if (insertError) {
      console.error('‚ùå [TESTE] Erro ao inserir mem√≥ria:', insertError);
    } else {
      console.log('‚úÖ [TESTE] Mem√≥ria de teste inserida com sucesso');
    }
    
    // 4. Testar verifica√ß√£o de primeira conversa do dia
    console.log('\nüîç [TESTE] 4. Testando verifica√ß√£o de primeira conversa do dia...');
    
    // Buscar mem√≥ria atualizada
    const { data: updatedMemory, error: updatedMemoryError } = await supabase
      .from('conversation_memory')
      .select('last_interaction, updated_at')
      .eq('phone_number', testPhone)
      .single();
    
    if (updatedMemoryError) {
      console.error('‚ùå [TESTE] Erro ao buscar mem√≥ria atualizada:', updatedMemoryError);
    } else if (updatedMemory) {
      const lastInteraction = updatedMemory.last_interaction || updatedMemory.updated_at;
      const lastConversation = new Date(lastInteraction);
      const today = new Date();
      
      const lastConversationDate = lastConversation.toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' });
      const todayDate = today.toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' });
      
      const isFirstOfDay = lastConversationDate !== todayDate;
      
      console.log('‚úÖ [TESTE] Verifica√ß√£o de primeira conversa:', {
        lastConversation: lastConversationDate,
        today: todayDate,
        isFirstOfDay,
        lastInteraction: lastInteraction
      });
    }
    
    console.log('\nüéâ [TESTE] Teste conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('üí• [TESTE] Erro durante o teste:', error);
  }
}

// Executar teste
testContextualizationFix();
