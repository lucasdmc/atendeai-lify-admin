/**
 * DIAGN√ìSTICO DO SISTEMA DE AGENDAMENTO
 * 
 * Este script identifica problemas espec√≠ficos no sistema:
 * 1. Verifica√ß√£o de depend√™ncias
 * 2. Verifica√ß√£o de configura√ß√µes
 * 3. Verifica√ß√£o de conectividade
 * 4. An√°lise de logs e erros
 */

import dotenv from 'dotenv';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// ‚úÖ CORRE√á√ÉO: Carregar vari√°veis de ambiente ANTES de qualquer verifica√ß√£o
dotenv.config();

// ‚úÖ CORRE√á√ÉO: __dirname para m√≥dulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class AppointmentSystemDiagnostic {
  constructor() {
    this.issues = [];
    this.warnings = [];
    this.recommendations = [];
  }

  /**
   * Executa diagn√≥stico completo
   */
  async runDiagnostic() {
    console.log('üîç INICIANDO DIAGN√ìSTICO DO SISTEMA DE AGENDAMENTO');
    console.log('=' .repeat(80));
    
    try {
      // Diagn√≥stico 1: Verifica√ß√£o de arquivos
      await this.diagnoseFileStructure();
      
      // Diagn√≥stico 2: Verifica√ß√£o de depend√™ncias
      await this.diagnoseDependencies();
      
      // Diagn√≥stico 3: Verifica√ß√£o de configura√ß√µes
      await this.diagnoseConfigurations();
      
      // Diagn√≥stico 4: Verifica√ß√£o de conectividade
      await this.diagnoseConnectivity();
      
      // Diagn√≥stico 5: An√°lise de c√≥digo
      await this.diagnoseCodeIssues();
      
      // Relat√≥rio de diagn√≥stico
      this.generateDiagnosticReport();
      
    } catch (error) {
      console.error('üí• ERRO NO DIAGN√ìSTICO:', error);
      this.issues.push({
        category: 'DIAGN√ìSTICO',
        issue: error.message,
        severity: 'CRITICAL'
      });
      this.generateDiagnosticReport();
    }
  }

  /**
   * Diagn√≥stico 1: Verifica√ß√£o de arquivos
   */
  async diagnoseFileStructure() {
    console.log('\nüìÅ DIAGN√ìSTICO 1: VERIFICA√á√ÉO DE ESTRUTURA DE ARQUIVOS');
    console.log('-'.repeat(50));
    
    try {
      // Verificar arquivos essenciais
      const essentialFiles = [
        'services/core/appointmentFlowManager.js',
        'services/core/llmOrchestratorService.js',
        'services/core/googleCalendarService.js',
        'services/core/clinicContextManager.js',
        'services/core/index.js',
        'routes/webhook-final.js',
        'env.example'
      ];
      
      for (const file of essentialFiles) {
        try {
          await fs.access(file);
          console.log(`‚úÖ ${file} - Presente`);
        } catch (error) {
          console.error(`‚ùå ${file} - AUSENTE`);
          this.issues.push({
            category: 'ARQUIVOS',
            issue: `Arquivo essencial ausente: ${file}`,
            severity: 'CRITICAL'
          });
        }
      }
      
      // Verificar diret√≥rios essenciais
      const essentialDirs = [
        'services/core',
        'config/google',
        'routes'
      ];
      
      for (const dir of essentialDirs) {
        try {
          const stats = await fs.stat(dir);
          if (stats.isDirectory()) {
            console.log(`‚úÖ ${dir}/ - Diret√≥rio presente`);
          } else {
            console.error(`‚ùå ${dir}/ - N√£o √© um diret√≥rio`);
            this.issues.push({
              category: 'ARQUIVOS',
              issue: `${dir} n√£o √© um diret√≥rio v√°lido`,
              severity: 'HIGH'
            });
          }
        } catch (error) {
          console.error(`‚ùå ${dir}/ - Diret√≥rio ausente`);
          this.issues.push({
            category: 'ARQUIVOS',
            issue: `Diret√≥rio essencial ausente: ${dir}`,
            severity: 'HIGH'
          });
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Erro na verifica√ß√£o de arquivos: ${error.message}`);
      this.issues.push({
        category: 'ARQUIVOS',
        issue: `Erro na verifica√ß√£o: ${error.message}`,
        severity: 'HIGH'
      });
    }
  }

  /**
   * Diagn√≥stico 2: Verifica√ß√£o de depend√™ncias
   */
  async diagnoseDependencies() {
    console.log('\nüì¶ DIAGN√ìSTICO 2: VERIFICA√á√ÉO DE DEPEND√äNCIAS');
    console.log('-'.repeat(50));
    
    try {
      // Verificar package.json
      try {
        const packageJson = await fs.readFile('package.json', 'utf8');
        const packageData = JSON.parse(packageJson);
        
        console.log(`‚úÖ package.json - Vers√£o: ${packageData.version || 'N/A'}`);
        
        // Verificar depend√™ncias essenciais
        const essentialDeps = [
          '@supabase/supabase-js',
          'openai',
          'googleapis',
          'express'
        ];
        
        const deps = { ...packageData.dependencies, ...packageData.devDependencies };
        
        for (const dep of essentialDeps) {
          if (deps[dep]) {
            console.log(`‚úÖ ${dep} - ${deps[dep]}`);
          } else {
            console.error(`‚ùå ${dep} - AUSENTE`);
            this.issues.push({
              category: 'DEPEND√äNCIAS',
              issue: `Depend√™ncia essencial ausente: ${dep}`,
              severity: 'CRITICAL'
            });
          }
        }
        
      } catch (error) {
        console.error(`‚ùå Erro ao ler package.json: ${error.message}`);
        this.issues.push({
          category: 'DEPEND√äNCIAS',
          issue: `N√£o foi poss√≠vel ler package.json: ${error.message}`,
          severity: 'HIGH'
        });
      }
      
      // Verificar node_modules
      try {
        const stats = await fs.stat('node_modules');
        if (stats.isDirectory()) {
          console.log('‚úÖ node_modules/ - Presente');
        } else {
          console.error('‚ùå node_modules/ - N√£o √© um diret√≥rio');
          this.issues.push({
            category: 'DEPEND√äNCIAS',
            issue: 'node_modules n√£o √© um diret√≥rio v√°lido',
            severity: 'HIGH'
          });
        }
      } catch (error) {
        console.error('‚ùå node_modules/ - Ausente');
        this.issues.push({
          category: 'DEPEND√äNCIAS',
          issue: 'node_modules ausente - execute npm install',
          severity: 'CRITICAL'
        });
      }
      
    } catch (error) {
      console.error(`‚ùå Erro na verifica√ß√£o de depend√™ncias: ${error.message}`);
      this.issues.push({
        category: 'DEPEND√äNCIAS',
        issue: `Erro na verifica√ß√£o: ${error.message}`,
        severity: 'HIGH'
      });
    }
  }

  /**
   * Diagn√≥stico 3: Verifica√ß√£o de configura√ß√µes
   */
  async diagnoseConfigurations() {
    console.log('\n‚öôÔ∏è DIAGN√ìSTICO 3: VERIFICA√á√ÉO DE CONFIGURA√á√ïES');
    console.log('-'.repeat(50));
    
    try {
      // Verificar vari√°veis de ambiente
      const requiredEnvVars = [
        'VITE_SUPABASE_URL',
        'SUPABASE_SERVICE_ROLE_KEY',
        'OPENAI_API_KEY',
        'WHATSAPP_META_ACCESS_TOKEN',
        'WHATSAPP_META_PHONE_NUMBER_ID'
      ];
      
      const missingVars = [];
      
      for (const envVar of requiredEnvVars) {
        if (!process.env[envVar]) {
          missingVars.push(envVar);
        }
      }
      
      if (missingVars.length > 0) {
        console.error(`‚ùå Vari√°veis de ambiente ausentes: ${missingVars.join(', ')}`);
        this.issues.push({
          category: 'CONFIGURA√á√ïES',
          issue: `Vari√°veis de ambiente ausentes: ${missingVars.join(', ')}`,
          severity: 'CRITICAL'
        });
      } else {
        console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
      }
      
      // Verificar arquivo .env
      try {
        await fs.access('.env');
        console.log('‚úÖ Arquivo .env presente');
      } catch (error) {
        console.warn('‚ö†Ô∏è Arquivo .env ausente');
        this.warnings.push({
          category: 'CONFIGURA√á√ïES',
          warning: 'Arquivo .env ausente - use env.example como base'
        });
      }
      
      // Verificar configura√ß√µes do Google
      try {
        const googleCredsPath = 'config/google-credentials.json';
        await fs.access(googleCredsPath);
        console.log('‚úÖ Credenciais do Google presentes');
      } catch (error) {
        console.warn('‚ö†Ô∏è Credenciais do Google ausentes');
        this.warnings.push({
          category: 'CONFIGURA√á√ïES',
          warning: 'Credenciais do Google n√£o configuradas - integra√ß√£o com Calendar pode n√£o funcionar'
        });
      }
      
    } catch (error) {
      console.error(`‚ùå Erro na verifica√ß√£o de configura√ß√µes: ${error.message}`);
      this.issues.push({
        category: 'CONFIGURA√á√ïES',
        issue: `Erro na verifica√ß√£o: ${error.message}`,
        severity: 'HIGH'
      });
    }
  }

  /**
   * Diagn√≥stico 4: Verifica√ß√£o de conectividade
   */
  async diagnoseConnectivity() {
    console.log('\nüåê DIAGN√ìSTICO 4: VERIFICA√á√ÉO DE CONECTIVIDADE');
    console.log('-'.repeat(50));
    
    try {
      // Verificar conectividade com Supabase
      try {
        const { createClient } = await import('@supabase/supabase-js');
        
        const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
        const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
        
        if (!supabaseKey) {
          throw new Error('Chave do Supabase n√£o configurada');
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        // Testar conex√£o
        const { data, error } = await supabase
          .from('clinics')
          .select('count')
          .limit(1);
        
        if (error) {
          throw new Error(`Erro na conex√£o: ${error.message}`);
        }
        
        console.log('‚úÖ Conex√£o com Supabase estabelecida');
        
      } catch (error) {
        console.error(`‚ùå Erro na conex√£o com Supabase: ${error.message}`);
        this.issues.push({
          category: 'CONECTIVIDADE',
          issue: `Falha na conex√£o com Supabase: ${error.message}`,
          severity: 'CRITICAL'
        });
      }
      
      // Verificar conectividade com OpenAI
      try {
        const openaiKey = process.env.OPENAI_API_KEY;
        
        if (!openaiKey) {
          throw new Error('Chave da OpenAI n√£o configurada');
        }
        
        // Teste simples de conectividade (sem fazer chamada real)
        if (openaiKey.startsWith('sk-')) {
          console.log('‚úÖ Chave da OpenAI configurada corretamente');
        } else {
          throw new Error('Formato da chave da OpenAI inv√°lido');
        }
        
      } catch (error) {
        console.error(`‚ùå Erro na configura√ß√£o da OpenAI: ${error.message}`);
        this.issues.push({
          category: 'CONECTIVIDADE',
          issue: `Problema com OpenAI: ${error.message}`,
          severity: 'HIGH'
        });
      }
      
      // Verificar configura√ß√£o do WhatsApp
      try {
        const whatsappToken = process.env.WHATSAPP_META_ACCESS_TOKEN;
        const whatsappPhoneId = process.env.WHATSAPP_META_PHONE_NUMBER_ID;
        
        if (!whatsappToken || !whatsappPhoneId) {
          throw new Error('Configura√ß√µes do WhatsApp incompletas');
        }
        
        console.log('‚úÖ Configura√ß√µes do WhatsApp configuradas');
        
      } catch (error) {
        console.error(`‚ùå Erro na configura√ß√£o do WhatsApp: ${error.message}`);
        this.issues.push({
          category: 'CONECTIVIDADE',
          issue: `Problema com WhatsApp: ${error.message}`,
          severity: 'HIGH'
        });
      }
      
    } catch (error) {
      console.error(`‚ùå Erro na verifica√ß√£o de conectividade: ${error.message}`);
      this.issues.push({
        category: 'CONECTIVIDADE',
        issue: `Erro na verifica√ß√£o: ${error.message}`,
        severity: 'HIGH'
      });
    }
  }

  /**
   * Diagn√≥stico 5: An√°lise de c√≥digo
   */
  async diagnoseCodeIssues() {
    console.log('\nüîç DIAGN√ìSTICO 5: AN√ÅLISE DE C√ìDIGO');
    console.log('-'.repeat(50));
    
    try {
      // Verificar imports nos arquivos principais
      const coreFiles = [
        'services/core/index.js',
        'services/core/llmOrchestratorService.js',
        'services/core/appointmentFlowManager.js'
      ];
      
      for (const file of coreFiles) {
        try {
          const content = await fs.readFile(file, 'utf8');
          
          // Verificar imports
          if (content.includes('import') && content.includes('from')) {
            console.log(`‚úÖ ${file} - Imports v√°lidos`);
          } else {
            console.warn(`‚ö†Ô∏è ${file} - Poss√≠vel problema com imports`);
            this.warnings.push({
              category: 'C√ìDIGO',
              warning: `Arquivo ${file} pode ter problemas com imports`
            });
          }
          
          // Verificar sintaxe b√°sica
          if (content.includes('export') || content.includes('module.exports')) {
            console.log(`‚úÖ ${file} - Exports configurados`);
          } else {
            console.warn(`‚ö†Ô∏è ${file} - Exports n√£o encontrados`);
            this.warnings.push({
              category: 'C√ìDIGO',
              warning: `Arquivo ${file} pode n√£o estar exportando corretamente`
            });
          }
          
        } catch (error) {
          console.error(`‚ùå Erro ao analisar ${file}: ${error.message}`);
          this.issues.push({
            category: 'C√ìDIGO',
            issue: `N√£o foi poss√≠vel analisar ${file}: ${error.message}`,
            severity: 'MEDIUM'
          });
        }
      }
      
      // Verificar estrutura do webhook
      try {
        const webhookContent = await fs.readFile('routes/webhook-final.js', 'utf8');
        
        if (webhookContent.includes('processMessageWithCompleteContext')) {
          console.log('‚úÖ Fun√ß√£o principal do webhook encontrada');
        } else {
          console.warn('‚ö†Ô∏è Fun√ß√£o principal do webhook n√£o encontrada');
          this.warnings.push({
            category: 'C√ìDIGO',
            warning: 'Fun√ß√£o principal do webhook pode estar ausente'
          });
        }
        
        if (webhookContent.includes('LLMOrchestratorService')) {
          console.log('‚úÖ Integra√ß√£o com LLMOrchestratorService encontrada');
        } else {
          console.error('‚ùå Integra√ß√£o com LLMOrchestratorService n√£o encontrada');
          this.issues.push({
            category: 'C√ìDIGO',
            issue: 'Webhook n√£o est√° integrado com LLMOrchestratorService',
            severity: 'CRITICAL'
          });
        }
        
      } catch (error) {
        console.error(`‚ùå Erro ao analisar webhook: ${error.message}`);
        this.issues.push({
          category: 'C√ìDIGO',
          issue: `N√£o foi poss√≠vel analisar webhook: ${error.message}`,
          severity: 'HIGH'
        });
      }
      
    } catch (error) {
      console.error(`‚ùå Erro na an√°lise de c√≥digo: ${error.message}`);
      this.issues.push({
        category: 'C√ìDIGO',
        issue: `Erro na an√°lise: ${error.message}`,
        severity: 'HIGH'
      });
    }
  }

  /**
   * Gera relat√≥rio de diagn√≥stico
   */
  generateDiagnosticReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO DE DIAGN√ìSTICO');
    console.log('='.repeat(80));
    
    const criticalIssues = this.issues.filter(i => i.severity === 'CRITICAL');
    const highIssues = this.issues.filter(i => i.severity === 'HIGH');
    const mediumIssues = this.issues.filter(i => i.severity === 'MEDIUM');
    const warningsCount = this.warnings.length;
    
    console.log(`\nüìà RESUMO DO DIAGN√ìSTICO:`);
    console.log(`   üö® Problemas cr√≠ticos: ${criticalIssues.length}`);
    console.log(`   ‚ö†Ô∏è  Problemas altos: ${highIssues.length}`);
    console.log(`   üî∂ Problemas m√©dios: ${mediumIssues.length}`);
    console.log(`   üí° Avisos: ${warningsCount}`);
    
    if (criticalIssues.length > 0) {
      console.log(`\nüö® PROBLEMAS CR√çTICOS:`);
      criticalIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. [${issue.category}] ${issue.issue}`);
      });
    }
    
    if (highIssues.length > 0) {
      console.log(`\n‚ö†Ô∏è  PROBLEMAS ALTOS:`);
      highIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. [${issue.category}] ${issue.issue}`);
      });
    }
    
    if (mediumIssues.length > 0) {
      console.log(`\nüî∂ PROBLEMAS M√âDIOS:`);
      mediumIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. [${issue.category}] ${issue.issue}`);
      });
    }
    
    if (this.warnings.length > 0) {
      console.log(`\nüí° AVISOS:`);
      this.warnings.forEach((warning, index) => {
        console.log(`   ${index + 1}. [${warning.category}] ${warning.warning}`);
      });
    }
    
    // Recomenda√ß√µes
    if (criticalIssues.length > 0) {
      console.log(`\nüö® RECOMENDA√á√ïES CR√çTICAS:`);
      console.log(`   ‚Ä¢ CORRIJA TODOS OS PROBLEMAS CR√çTICOS ANTES DE PROSSEGUIR`);
      console.log(`   ‚Ä¢ Execute 'npm install' se houver problemas de depend√™ncias`);
      console.log(`   ‚Ä¢ Configure todas as vari√°veis de ambiente necess√°rias`);
      console.log(`   ‚Ä¢ Verifique a conectividade com servi√ßos externos`);
    }
    
    if (highIssues.length > 0) {
      console.log(`\n‚ö†Ô∏è  RECOMENDA√á√ïES IMPORTANTES:`);
      console.log(`   ‚Ä¢ Resolva problemas altos para melhorar a estabilidade`);
      console.log(`   ‚Ä¢ Verifique configura√ß√µes de arquivos e diret√≥rios`);
      console.log(`   ‚Ä¢ Teste conectividade com servi√ßos`);
    }
    
    if (criticalIssues.length === 0 && highIssues.length === 0) {
      console.log(`\nüéâ SISTEMA APROVADO NO DIAGN√ìSTICO! Pode prosseguir com os testes.`);
    } else {
      console.log(`\nüö® SISTEMA COM PROBLEMAS! Corrija os problemas antes de prosseguir.`);
      process.exit(1);
    }
  }
}

// Executar diagn√≥stico se o arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  const diagnostic = new AppointmentSystemDiagnostic();
  diagnostic.runDiagnostic().catch(error => {
    console.error('üí• ERRO FATAL NO DIAGN√ìSTICO:', error);
    process.exit(1);
  });
}
