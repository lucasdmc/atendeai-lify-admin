const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configurar Supabase
const supabase = createClient(
  'https://niakqdolcdwxtrkbqmdi.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw'
);

async function testEnhancedAIImplementation() {
  try {
    console.log('üß™ TESTANDO IMPLEMENTA√á√ÉO DO ENHANCED AI SERVICE');
    console.log('================================================');

    // 1. TESTAR CONECTIVIDADE COM BACKEND
    console.log('\n1Ô∏è‚É£ Testando conectividade com backend...');
    
    try {
      const response = await fetch('http://localhost:3001/health');
      if (response.ok) {
        console.log('‚úÖ Backend est√° funcionando');
      } else {
        console.log('‚ùå Backend n√£o est√° respondendo');
      }
    } catch (error) {
      console.log('‚ùå Erro ao conectar com backend:', error.message);
    }

    // 2. TESTAR WEBHOOK
    console.log('\n2Ô∏è‚É£ Testando webhook...');
    
    try {
      const webhookResponse = await fetch('http://localhost:3001/webhook/whatsapp/test');
      if (webhookResponse.ok) {
        const data = await webhookResponse.json();
        console.log('‚úÖ Webhook funcionando:', data.message);
      } else {
        console.log('‚ùå Webhook n√£o est√° respondendo');
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar webhook:', error.message);
    }

    // 3. TESTAR ENVIO DE MENSAGEM SIMULADA
    console.log('\n3Ô∏è‚É£ Testando envio de mensagem simulada...');
    
    try {
      const testMessage = {
        to: '554730915628',
        message: 'Ol√°! Teste do Enhanced AI Service',
        clinicId: 'cardioprime',
        userId: 'test-user'
      };

      const messageResponse = await fetch('http://localhost:3001/webhook/whatsapp/test-send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testMessage)
      });

      if (messageResponse.ok) {
        const data = await messageResponse.json();
        console.log('‚úÖ Mensagem processada com sucesso!');
        console.log('ü§ñ Resposta AI:', data.aiResponse?.text || 'N/A');
        console.log('üìä Confian√ßa:', data.aiResponse?.confidence || 'N/A');
        console.log('üéØ Modelo usado:', data.aiResponse?.modelUsed || 'N/A');
      } else {
        console.log('‚ùå Erro ao processar mensagem');
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar mensagem:', error.message);
    }

    // 4. VERIFICAR LOGS DO BACKEND
    console.log('\n4Ô∏è‚É£ Verificando logs do backend...');
    
    try {
      const { exec } = require('child_process');
      exec('pm2 logs atendeai-backend --lines 10', (error, stdout, stderr) => {
        if (error) {
          console.log('‚ùå Erro ao verificar logs:', error.message);
        } else {
          console.log('üìã √öltimos logs do backend:');
          console.log(stdout);
        }
      });
    } catch (error) {
      console.log('‚ùå Erro ao verificar logs:', error.message);
    }

    // 5. TESTAR FUN√á√ÉO GET_CLINIC_CONTEXTUALIZATION
    console.log('\n5Ô∏è‚É£ Testando fun√ß√£o get_clinic_contextualization...');
    
    try {
      const { data: contextData, error: contextError } = await supabase.rpc('get_clinic_contextualization', {
        p_whatsapp_phone: '554730915628'
      });

      if (contextError) {
        console.error('‚ùå Erro na fun√ß√£o get_clinic_contextualization:', contextError);
      } else {
        console.log('‚úÖ Fun√ß√£o funcionando!');
        console.log('üè• Cl√≠nica:', contextData?.[0]?.clinic_name);
        console.log('üéØ Tem contextualiza√ß√£o:', contextData?.[0]?.has_contextualization);
      }
    } catch (e) {
      console.log('‚ùå Erro ao testar fun√ß√£o:', e.message);
    }

    // 6. VERIFICAR TABELAS DE MEM√ìRIA
    console.log('\n6Ô∏è‚É£ Verificando tabelas de mem√≥ria...');
    
    const { data: memoryData, error: memoryError } = await supabase
      .from('conversation_memory')
      .select('*')
      .limit(5);

    if (memoryError) {
      console.error('‚ùå Erro na tabela conversation_memory:', memoryError);
    } else {
      console.log('‚úÖ Tabela conversation_memory funcionando!');
      console.log('üìä Registros encontrados:', memoryData?.length || 0);
    }

    console.log('\nüéØ TESTE CONCLU√çDO!');
    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('1. Enviar mensagem real para o WhatsApp');
    console.log('2. Verificar se as respostas est√£o melhoradas');
    console.log('3. Monitorar logs para confirmar funcionamento');

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico:', error);
  }
}

testEnhancedAIImplementation(); 