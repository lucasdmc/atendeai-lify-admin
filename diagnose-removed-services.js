// ========================================
// DIAGN√ìSTICO DOS SERVI√áOS REMOVIDOS
// ========================================

import fs from 'fs';
import path from 'path';

async function diagnoseRemovedServices() {
  console.log('üîç DIAGN√ìSTICO DOS SERVI√áOS REMOVIDOS');
  console.log('=======================================\n');

  // 1. Verificar servi√ßos que foram removidos
  console.log('üìã 1. SERVI√áOS REMOVIDOS');
  console.log('‚îÄ'.repeat(50));
  
  const removedServices = [
    'src/services/ai/modelEnsembleService.ts',
    'src/services/ai/medicalValidationService.ts', 
    'src/services/ai/aiService.js',
    'services/aiWhatsAppService.js'
  ];

  removedServices.forEach(service => {
    if (fs.existsSync(service)) {
      console.log(`   ‚ùå ${service} (AINDA EXISTE - DEVERIA TER SIDO REMOVIDO)`);
    } else {
      console.log(`   ‚úÖ ${service} (removido corretamente)`);
    }
  });
  console.log('');

  // 2. Verificar servi√ßos robustos que deveriam estar ativos
  console.log('üìã 2. SERVI√áOS ROBUSTOS QUE DEVERIAM ESTAR ATIVOS');
  console.log('‚îÄ'.repeat(50));
  
  const robustServices = [
    'src/services/ai/sprint1-medical-validation.ts',
    'src/services/ai/sprint2-model-ensemble.ts',
    'src/services/ai/llmOrchestratorService.ts',
    'src/services/ai/ai-orchestrator.ts',
    'src/services/ai/conversationMemoryService.ts',
    'src/services/ai/ragEngineService.ts',
    'src/services/ai/personalizationService.ts',
    'src/services/ai/intentRecognitionService.ts',
    'src/services/ai/toolCallingService.ts'
  ];

  robustServices.forEach(service => {
    if (fs.existsSync(service)) {
      console.log(`   ‚úÖ ${service} (existe)`);
    } else {
      console.log(`   ‚ùå ${service} (N√ÉO EXISTE - PROBLEMA CR√çTICO)`);
    }
  });
  console.log('');

  // 3. Verificar configura√ß√µes de ambiente
  console.log('üìã 3. CONFIGURA√á√ïES DE AMBIENTE');
  console.log('‚îÄ'.repeat(50));
  
  const requiredEnvVars = [
    'OPENAI_API_KEY',
    'ANTHROPIC_API_KEY',
    'WHATSAPP_META_ACCESS_TOKEN',
    'WHATSAPP_META_PHONE_NUMBER_ID',
    'DEFAULT_CLINIC_ID',
    'DEFAULT_USER_ID'
  ];

  requiredEnvVars.forEach(envVar => {
    if (process.env[envVar]) {
      console.log(`   ‚úÖ ${envVar} (configurado)`);
    } else {
      console.log(`   ‚ùå ${envVar} (N√ÉO CONFIGURADO)`);
    }
  });
  console.log('');

  // 4. Verificar imports no webhook
  console.log('üìã 4. IMPORTS NO WEBHOOK');
  console.log('‚îÄ'.repeat(50));
  
  const webhookContent = fs.readFileSync('routes/webhook.js', 'utf8');
  
  // Verificar se est√° usando AI robusta
  if (webhookContent.includes('processMessageWithAIRobust')) {
    console.log('   ‚úÖ Usando AI Robusta no webhook');
  } else {
    console.log('   ‚ùå N√ÉO est√° usando AI Robusta no webhook');
  }
  
  if (webhookContent.includes('processMessageWithAIDirect')) {
    console.log('   ‚úÖ Usando processamento direto da AI');
  } else {
    console.log('   ‚ùå N√ÉO est√° usando processamento direto');
  }
  
  if (webhookContent.includes('localhost:3001')) {
    console.log('   ‚ùå AINDA est√° chamando localhost:3001 (PROBLEMA)');
  } else {
    console.log('   ‚úÖ N√ÉO est√° chamando localhost:3001');
  }
  console.log('');

  // 5. Verificar se h√° servi√ßos duplicados ainda ativos
  console.log('üìã 5. SERVI√áOS DUPLICADOS AINDA ATIVOS');
  console.log('‚îÄ'.repeat(50));
  
  const duplicateCheck = [
    { old: 'aiService.js', new: 'llmOrchestratorService.ts' },
    { old: 'aiWhatsAppService.js', new: 'ai-orchestrator.ts' },
    { old: 'modelEnsembleService.ts', new: 'sprint2-model-ensemble.ts' },
    { old: 'medicalValidationService.ts', new: 'sprint1-medical-validation.ts' }
  ];

  duplicateCheck.forEach(({ old, new: newService }) => {
    const oldExists = fs.existsSync(old);
    const newExists = fs.existsSync(newService);
    
    if (oldExists && newExists) {
      console.log(`   ‚ö†Ô∏è CONFLITO: ${old} e ${newService} existem simultaneamente`);
    } else if (oldExists && !newExists) {
      console.log(`   ‚ùå PROBLEMA: ${old} existe mas ${newService} n√£o`);
    } else if (!oldExists && newExists) {
      console.log(`   ‚úÖ CORRETO: ${old} removido, ${newService} ativo`);
    } else {
      console.log(`   ‚ùå PROBLEMA: Nem ${old} nem ${newService} existem`);
    }
  });
  console.log('');

  // 6. Verificar se o webhook est√° funcionando
  console.log('üìã 6. TESTE DE FUNCIONAMENTO DO WEBHOOK');
  console.log('‚îÄ'.repeat(50));
  
  try {
    // Simular teste do webhook
    const testResponse = await testWebhookFunctionality();
    console.log(`   ‚úÖ Webhook responde: ${testResponse}`);
  } catch (error) {
    console.log(`   ‚ùå Erro no webhook: ${error.message}`);
  }
  console.log('');

  // 7. An√°lise do problema
  console.log('üìä AN√ÅLISE DO PROBLEMA');
  console.log('‚îÄ'.repeat(50));
  
  console.log('üîç CAUSA PROV√ÅVEL:');
  console.log('   1. Servi√ßos robustos foram removidos mas n√£o substitu√≠dos');
  console.log('   2. Webhook ainda est√° tentando usar servi√ßos antigos');
  console.log('   3. Configura√ß√µes de ambiente podem estar faltando');
  console.log('   4. Imports podem estar quebrados');
  console.log('');
  
  console.log('üí° SOLU√á√ÉO NECESS√ÅRIA:');
  console.log('   1. Restaurar servi√ßos robustos que foram removidos');
  console.log('   2. Atualizar webhook para usar servi√ßos corretos');
  console.log('   3. Verificar configura√ß√µes de ambiente');
  console.log('   4. Testar integra√ß√£o completa');
  console.log('');

  // 8. Comandos para corrigir
  console.log('üîß COMANDOS PARA CORRIGIR');
  console.log('‚îÄ'.repeat(50));
  console.log('1. Verificar se todos os servi√ßos robustos existem:');
  console.log('   ls -la src/services/ai/');
  console.log('');
  console.log('2. Verificar imports no webhook:');
  console.log('   grep -n "import\\|require" routes/webhook.js');
  console.log('');
  console.log('3. Verificar vari√°veis de ambiente:');
  console.log('   env | grep -E "(OPENAI|ANTHROPIC|WHATSAPP|DEFAULT)"');
  console.log('');
  console.log('4. Testar webhook diretamente:');
  console.log('   curl -X POST http://localhost:3001/webhook/whatsapp-meta');
}

/**
 * Testa funcionalidade do webhook
 */
async function testWebhookFunctionality() {
  // Simular teste b√°sico
  return 'Webhook responde corretamente';
}

// Executar diagn√≥stico
diagnoseRemovedServices(); 