// ‚úÖ SISTEMA MULTICL√çNICA: Sem refer√™ncias hardcoded
// Os dados v√™m dinamicamente do banco de dados (tela de cl√≠nicas)

export interface ClinicContext {
  id: string;
  name: string;
  specialty: string;
  doctors: any[];
  schedule: any;
  services: any[];
  location: any;
  contact: any;
  policies: any;
  assistant: any;
}

export class ContextualizacaoService {
  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Obt√©m contexto de uma cl√≠nica por ID
   * Os dados v√™m dinamicamente do banco de dados
   */
  static async getClinicContext(clinicId: string): Promise<any> {
    try {
      // ‚úÖ IMPLEMENTA√á√ÉO FUTURA: Buscar do banco de dados
      // Por enquanto, retorna null para for√ßar uso do ClinicContextManager
      console.log(`üîç [ContextualizacaoService] Buscando contexto para: ${clinicId}`);
      console.log(`‚ö†Ô∏è [ContextualizacaoService] Use ClinicContextManager.getClinicContext() em vez deste servi√ßo`);
      
      return null;
    } catch (error) {
      console.error('‚ùå [ContextualizacaoService] Erro ao obter contexto da cl√≠nica:', error);
      return null;
    }
  }

  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Obt√©m cl√≠nica por n√∫mero do WhatsApp
   * Os dados v√™m dinamicamente do banco de dados
   */
  static async getClinicByWhatsAppNumber(phoneNumber: string): Promise<ClinicContext | null> {
    try {
      // ‚úÖ IMPLEMENTA√á√ÉO FUTURA: Buscar do banco de dados
      // Por enquanto, retorna null para for√ßar uso do ClinicContextManager
      console.log(`üîç [ContextualizacaoService] Buscando cl√≠nica para WhatsApp: ${phoneNumber}`);
      console.log(`‚ö†Ô∏è [ContextualizacaoService] Use ClinicContextManager.getClinicByWhatsApp() em vez deste servi√ßo`);
      
      return null;
    } catch (error) {
      console.error('‚ùå [ContextualizacaoService] Erro ao obter cl√≠nica por WhatsApp:', error);
      return null;
    }
  }

  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Gera prompt do sistema baseado no contexto da cl√≠nica
   */
  static generateSystemPromptFromContext(context: ClinicContext): string {
    if (!context || !context.assistant) {
      return 'Voc√™ √© um assistente virtual profissional e prestativo.';
    }

    return `
Voc√™ √© o ${context.assistant.name}, assistente virtual da ${context.name}.

${context.assistant.personality}

CAPACIDADES:
${context.assistant.capabilities?.map(cap => `- ${cap}`).join('\n') || '- Assist√™ncia geral'}

LIMITA√á√ïES:
${context.assistant.limitations?.map(lim => `- ${lim}`).join('\n') || '- N√£o posso dar conselhos m√©dicos'}

Seja sempre profissional, acolhedor e √∫til.`;
  }

  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Obt√©m hor√°rios de funcionamento
   */
  static async getWorkingHours(clinicId: string): Promise<any> {
    try {
      // ‚úÖ IMPLEMENTA√á√ÉO FUTURA: Buscar do banco de dados
      console.log(`üîç [ContextualizacaoService] Buscando hor√°rios para: ${clinicId}`);
      return null;
    } catch (error) {
      console.error('‚ùå [ContextualizacaoService] Erro ao obter hor√°rios:', error);
      return null;
    }
  }

  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Obt√©m profissionais da cl√≠nica
   */
  static async getProfessionals(clinicId: string): Promise<any[]> {
    try {
      // ‚úÖ IMPLEMENTA√á√ÉO FUTURA: Buscar do banco de dados
      console.log(`üîç [ContextualizacaoService] Buscando profissionais para: ${clinicId}`);
      return [];
    } catch (error) {
      console.error('‚ùå [ContextualizacaoService] Erro ao obter profissionais:', error);
      return [];
    }
  }

  /**
   * ‚úÖ SISTEMA MULTICL√çNICA: Obt√©m servi√ßos da cl√≠nica
   */
  static async getServices(clinicId: string): Promise<string[]> {
    try {
      // ‚úÖ IMPLEMENTA√á√ÉO FUTURA: Buscar do banco de dados
      console.log(`üîç [ContextualizacaoService] Buscando servi√ßos para: ${clinicId}`);
      return [];
    } catch (error) {
      console.error('‚ùå [ContextualizacaoService] Erro ao obter servi√ßos:', error);
      return [];
    }
  }
} 