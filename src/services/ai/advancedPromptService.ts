import { supabase } from '@/integrations/supabase/client';

export interface PromptContext {
  agentType: string;
  intent: string;
  clinicContext: any;
  userProfile?: any;
  conversationHistory: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
  }>;
  medicalValidation?: boolean;
  confidenceLevel?: number;
}

export interface FewShotExample {
  input: string;
  output: string;
  intent: string;
  quality: number;
  context?: any;
}

export interface PromptTemplate {
  id: string;
  name: string;
  template: string;
  variables: string[];
  intent: string;
  quality: number;
  usage: number;
}

export class AdvancedPromptService {
  private readonly basePrompt = `# IDENTIDADE E CONFIGURA√á√ÉO DO ASSISTENTE

Voc√™ √© um assistente virtual especializado em atendimento m√©dico, focado em agendamentos e informa√ß√µes sobre cl√≠nicas.

## DIRETRIZES FUNDAMENTAIS:
- SEMPRE seja profissional e acolhedor
- NUNCA forne√ßa diagn√≥sticos m√©dicos
- NUNCA prescreva medicamentos
- SEMPRE direcione quest√µes m√©dicas para profissionais
- Use linguagem clara e acess√≠vel
- Confirme informa√ß√µes importantes antes de agendar

## COMPORTAMENTO:
- Seja proativo em oferecer ajuda
- Mantenha contexto da conversa
- Ofere√ßa sugest√µes relevantes quando apropriado
- Solicite feedback para melhorar o atendimento`;

  private readonly constraintsPrompt = `
## RESTRI√á√ïES IMPORTANTES:
- NUNCA forne√ßa diagn√≥sticos m√©dicos
- NUNCA recomende medicamentos espec√≠ficos
- SEMPRE direcione quest√µes m√©dicas para profissionais
- Mantenha tom profissional mas acolhedor
- Use linguagem clara e acess√≠vel
- Confirme informa√ß√µes importantes
- N√£o invente informa√ß√µes n√£o fornecidas no contexto
- Se uma informa√ß√£o n√£o estiver dispon√≠vel, diga educadamente que n√£o possui essa informa√ß√£o`;

  private readonly fewShotExamples: Record<string, FewShotExample[]> = {
    'APPOINTMENT_CREATE': [
      {
        input: 'Quero agendar uma consulta',
        output: 'Claro! Para agendar sua consulta, preciso de algumas informa√ß√µes:\n\n1. Qual especialidade voc√™ precisa?\n2. Voc√™ tem prefer√™ncia de data e hor√°rio?\n3. √â particular ou conv√™nio?\n\nPosso ajudar voc√™ a encontrar a melhor op√ß√£o!',
        intent: 'APPOINTMENT_CREATE',
        quality: 0.9
      },
      {
        input: 'Preciso marcar uma consulta com cardiologista',
        output: 'Perfeito! Vou ajudar voc√™ a agendar uma consulta com cardiologista.\n\nPara prosseguir, preciso saber:\n\n1. Qual sua prefer√™ncia de data? (ex: pr√≥xima semana, m√™s que vem)\n2. Qual hor√°rio voc√™ prefere? (manh√£, tarde, noite)\n3. √â particular ou tem conv√™nio?\n\nCom essas informa√ß√µes, posso verificar nossa disponibilidade e agendar para voc√™!',
        intent: 'APPOINTMENT_CREATE',
        quality: 0.95
      }
    ],
    'INFO_SERVICES': [
      {
        input: 'Que servi√ßos voc√™s oferecem?',
        output: 'Nossa cl√≠nica oferece diversas especialidades:\n\n‚Ä¢ Cl√≠nica Geral\n‚Ä¢ Cardiologia\n‚Ä¢ Dermatologia\n‚Ä¢ Pediatria\n‚Ä¢ Ginecologia\n‚Ä¢ Ortopedia\n‚Ä¢ Neurologia\n‚Ä¢ Psicologia\n\nGostaria de saber mais sobre alguma especialidade espec√≠fica ou agendar uma consulta?',
        intent: 'INFO_SERVICES',
        quality: 0.9
      }
    ],
    'INFO_HOURS': [
      {
        input: 'Qual o hor√°rio de funcionamento?',
        output: 'Nosso hor√°rio de funcionamento:\n\nüìÖ Segunda a Sexta: 8h √†s 18h\nüìÖ S√°bado: 8h √†s 12h\nüìÖ Domingo: Fechado\n\nPara emerg√™ncias fora do hor√°rio, temos plant√£o 24h. Gostaria de agendar uma consulta?',
        intent: 'INFO_HOURS',
        quality: 0.95
      }
    ],
    'GREETING': [
      {
        input: 'Ol√°',
        output: 'Ol√°! üëã Bem-vindo √† nossa cl√≠nica!\n\nComo posso ajudar voc√™ hoje? Posso auxiliar com:\n\n‚Ä¢ Agendamento de consultas\n‚Ä¢ Informa√ß√µes sobre especialidades\n‚Ä¢ Hor√°rios de funcionamento\n‚Ä¢ Localiza√ß√£o\n\nO que voc√™ gostaria de saber?',
        intent: 'GREETING',
        quality: 0.9
      }
    ]
  };

  /**
   * Gera prompt de sistema avan√ßado baseado no contexto
   */
  generateSystemPrompt(context: PromptContext): string {
    const basePrompt = this.getBasePrompt();
    const rolePrompt = this.getRolePrompt(context.agentType);
    const contextPrompt = this.getContextPrompt(context);
    const constraintsPrompt = this.getConstraintsPrompt();
    const examplesPrompt = this.getFewShotExamples(context.intent);
    const medicalPrompt = context.medicalValidation ? this.getMedicalSafetyPrompt() : '';
    const confidencePrompt = context.confidenceLevel && context.confidenceLevel < 0.7 ? this.getLowConfidencePrompt() : '';

    return `${basePrompt}\n\n${rolePrompt}\n\n${contextPrompt}\n\n${constraintsPrompt}\n\n${examplesPrompt}\n\n${medicalPrompt}\n\n${confidencePrompt}`.trim();
  }

  /**
   * Gera prompt base do sistema
   */
  private getBasePrompt(): string {
    return this.basePrompt;
  }

  /**
   * Gera prompt espec√≠fico do papel/agente
   */
  private getRolePrompt(agentType: string): string {
    const rolePrompts: Record<string, string> = {
      'receptionist': `
## PAPEL: Recepcionista Virtual
- Foco principal: Agendamentos e informa√ß√µes b√°sicas
- Tom: Acolhedor e profissional
- Prioridade: Efici√™ncia no atendimento
- Especialidade: Organiza√ß√£o e agendamentos`,

      'medical_assistant': `
## PAPEL: Assistente M√©dico Virtual
- Foco principal: Informa√ß√µes m√©dicas e orienta√ß√µes
- Tom: Profissional e cuidadoso
- Prioridade: Seguran√ßa e precis√£o
- Especialidade: Informa√ß√µes sobre procedimentos e especialidades`,

      'customer_service': `
## PAPEL: Atendimento ao Cliente
- Foco principal: Resolu√ß√£o de problemas e suporte
- Tom: Emp√°tico e solucionador
- Prioridade: Satisfa√ß√£o do cliente
- Especialidade: Resolu√ß√£o de quest√µes e feedback`
    };

    return rolePrompts[agentType] || rolePrompts['receptionist'];
  }

  /**
   * Gera prompt de contexto da cl√≠nica
   */
  private getContextPrompt(context: PromptContext): string {
    if (!context.clinicContext) {
      return `
## CONTEXTO DA CL√çNICA:
- Cl√≠nica m√©dica geral
- Atendimento humanizado
- Profissionais qualificados
- Foco na qualidade do atendimento`;
    }

    const clinic = context.clinicContext;
    
    return `
## INFORMA√á√ïES DA CL√çNICA:

### Dados B√°sicos:
- Nome: ${clinic.name || 'Cl√≠nica M√©dica'}
- Especialidade Principal: ${clinic.specialty || 'Medicina Geral'}
- Miss√£o: ${clinic.mission || 'Cuidar da sa√∫de dos pacientes'}

### Localiza√ß√£o e Contato:
- Endere√ßo: ${clinic.address || 'Endere√ßo n√£o informado'}
- Telefone: ${clinic.phone || 'Telefone n√£o informado'}
- WhatsApp: ${clinic.whatsapp || 'WhatsApp n√£o informado'}

### Hor√°rio de Funcionamento:
${this.formatBusinessHours(clinic.businessHours)}

### Servi√ßos Dispon√≠veis:
${this.formatServices(clinic.services)}

### Pol√≠ticas:
${this.formatPolicies(clinic.policies)}`;
  }

  /**
   * Gera prompt de restri√ß√µes
   */
  private getConstraintsPrompt(): string {
    return this.constraintsPrompt;
  }

  /**
   * Gera exemplos few-shot para a inten√ß√£o
   */
  private getFewShotExamples(intent: string): string {
    const examples = this.fewShotExamples[intent];
    
    if (!examples || examples.length === 0) {
      return '';
    }

    const examplesText = examples
      .filter(ex => ex.quality > 0.8) // Apenas exemplos de alta qualidade
      .map(ex => `Exemplo:\nUsu√°rio: "${ex.input}"\nAssistente: "${ex.output}"`)
      .join('\n\n');

    return examplesText ? `\n## EXEMPLOS DE RESPOSTAS:\n\n${examplesText}` : '';
  }

  /**
   * Gera prompt de seguran√ßa m√©dica
   */
  private getMedicalSafetyPrompt(): string {
    return `
## SEGURAN√áA M√âDICA - ATEN√á√ÉO ESPECIAL:
- NUNCA forne√ßa diagn√≥sticos ou opini√µes m√©dicas
- NUNCA recomende medicamentos ou tratamentos
- SEMPRE direcione quest√µes m√©dicas para profissionais
- Se detectar sintomas ou problemas m√©dicos, sugira consulta imediata
- Para emerg√™ncias, sempre oriente procurar atendimento m√©dico urgente
- Mantenha tom calmo mas direto em situa√ß√µes m√©dicas`;
  }

  /**
   * Gera prompt para situa√ß√µes de baixa confian√ßa
   */
  private getLowConfidencePrompt(): string {
    return `
## SITUA√á√ÉO DE BAIXA CONFIAN√áA:
- Seja mais cauteloso nas respostas
- Pe√ßa esclarecimentos quando necess√°rio
- Confirme informa√ß√µes antes de prosseguir
- Ofere√ßa transferir para atendente humano se apropriado
- Mantenha tom profissional e acolhedor`;
  }

  /**
   * Formata hor√°rios de funcionamento
   */
  private formatBusinessHours(hours: any): string {
    if (!hours) {
      return 'Segunda a Sexta: 8h √†s 18h\nS√°bado: 8h √†s 12h\nDomingo: Fechado';
    }

    const days = ['segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado', 'domingo'];
    const formatted = days.map(day => {
      const dayHours = hours[day];
      if (dayHours) {
        return `${day.charAt(0).toUpperCase() + day.slice(1)}: ${dayHours.opening || '8h'} √†s ${dayHours.closing || '18h'}`;
      }
      return `${day.charAt(0).toUpperCase() + day.slice(1)}: Fechado`;
    });

    return formatted.join('\n');
  }

  /**
   * Formata servi√ßos dispon√≠veis
   */
  private formatServices(services: any): string {
    if (!services || !Array.isArray(services)) {
      return '‚Ä¢ Cl√≠nica Geral\n‚Ä¢ Especialidades diversas';
    }

    return services
      .map(service => `‚Ä¢ ${service.name || service}`)
      .join('\n');
  }

  /**
   * Formata pol√≠ticas da cl√≠nica
   */
  private formatPolicies(policies: any): string {
    if (!policies) {
      return '‚Ä¢ Agendamento com anteced√™ncia\n‚Ä¢ Cancelamento com 24h de anteced√™ncia\n‚Ä¢ Atendimento humanizado';
    }

    const policyList = [];
    
    if (policies.cancellation) {
      policyList.push(`‚Ä¢ Cancelamento: ${policies.cancellation}`);
    }
    
    if (policies.rescheduling) {
      policyList.push(`‚Ä¢ Reagendamento: ${policies.rescheduling}`);
    }
    
    if (policies.insurance) {
      policyList.push(`‚Ä¢ Conv√™nios: ${policies.insurance}`);
    }

    return policyList.length > 0 ? policyList.join('\n') : '‚Ä¢ Pol√≠ticas padr√£o da cl√≠nica';
  }

  /**
   * Gera prompt contextual din√¢mico
   */
  generateContextualPrompt(
    basePrompt: string,
    context: string,
    additionalInfo?: any
  ): string {
    let contextualPrompt = basePrompt;

    // Adicionar contexto espec√≠fico
    if (context) {
      contextualPrompt += `\n\n## CONTEXTO ESPEC√çFICO:\n${context}`;
    }

    // Adicionar informa√ß√µes adicionais
    if (additionalInfo) {
      contextualPrompt += `\n\n## INFORMA√á√ïES ADICIONAIS:\n${JSON.stringify(additionalInfo, null, 2)}`;
    }

    return contextualPrompt;
  }

  /**
   * Otimiza prompt baseado em feedback
   */
  async optimizePromptFromFeedback(
    promptId: string,
    feedback: {
      quality: number;
      userSatisfaction: number;
      escalationRate: number;
      comments?: string;
    }
  ): Promise<void> {
    try {
      await supabase
        .from('prompt_feedback')
        .insert({
          prompt_id: promptId,
          quality_score: feedback.quality,
          user_satisfaction: feedback.userSatisfaction,
          escalation_rate: feedback.escalationRate,
          comments: feedback.comments,
          timestamp: new Date().toISOString()
        });

      console.log(`‚úÖ Feedback registrado para prompt ${promptId}`);
    } catch (error) {
      console.error('‚ùå Erro ao registrar feedback do prompt:', error);
    }
  }

  /**
   * Aprende novos exemplos few-shot
   */
  async learnNewExample(example: FewShotExample): Promise<void> {
    try {
      // Adicionar exemplo √† base de conhecimento
      await supabase
        .from('few_shot_examples')
        .insert({
          input: example.input,
          output: example.output,
          intent: example.intent,
          quality: example.quality,
          context: example.context,
          created_at: new Date().toISOString()
        });

      // Atualizar cache local
      if (!this.fewShotExamples[example.intent]) {
        this.fewShotExamples[example.intent] = [];
      }
      
      this.fewShotExamples[example.intent].push(example);

      console.log(`‚úÖ Novo exemplo aprendido para intent: ${example.intent}`);
    } catch (error) {
      console.error('‚ùå Erro ao aprender novo exemplo:', error);
    }
  }

  /**
   * Carrega exemplos da base de dados
   */
  async loadExamplesFromDatabase(): Promise<void> {
    try {
      const { data, error } = await supabase
        .from('few_shot_examples')
        .select('*')
        .gte('quality', 0.8) // Apenas exemplos de alta qualidade
        .order('quality', { ascending: false });

      if (error) throw error;

      // Agrupar por intent
      const groupedExamples: Record<string, FewShotExample[]> = {};
      
      data.forEach(example => {
        if (!groupedExamples[example.intent]) {
          groupedExamples[example.intent] = [];
        }
        groupedExamples[example.intent].push({
          input: example.input,
          output: example.output,
          intent: example.intent,
          quality: example.quality,
          context: example.context
        });
      });

      // Atualizar cache local
      this.fewShotExamples = { ...this.fewShotExamples, ...groupedExamples };

      console.log(`‚úÖ Carregados ${data.length} exemplos da base de dados`);
    } catch (error) {
      console.error('‚ùå Erro ao carregar exemplos da base de dados:', error);
    }
  }

  /**
   * Gera prompt para valida√ß√£o m√©dica
   */
  generateMedicalValidationPrompt(): string {
    return `
## VALIDA√á√ÉO M√âDICA - PROMPT ESPECIAL:

Voc√™ √© um sistema de valida√ß√£o m√©dica. Sua fun√ß√£o √©:

1. DETECTAR conte√∫do m√©dico na resposta
2. AVALIAR se a resposta √© segura
3. SUGERIR escala√ß√£o se necess√°rio

### CRIT√âRIOS DE VALIDA√á√ÉO:
- A resposta cont√©m diagn√≥sticos m√©dicos?
- A resposta recomenda medicamentos?
- A resposta faz afirma√ß√µes m√©dicas definitivas?
- A resposta pode causar dano se seguida?

### RESPOSTA ESPERADA:
- "SAFE" se a resposta √© segura
- "UNSAFE" se a resposta √© perigosa
- "ESCALATE" se deve escalar para humano
- Justificativa da decis√£o

### EXEMPLOS:
Resposta: "Voc√™ tem gripe"
Resultado: "UNSAFE - Diagn√≥stico m√©dico sem qualifica√ß√£o"

Resposta: "Para gripe, consulte um m√©dico"
Resultado: "SAFE - Orienta√ß√£o apropriada"

Resposta: "Tome paracetamol para dor"
Resultado: "UNSAFE - Prescri√ß√£o de medicamento"`;
  }

  /**
   * Gera prompt para an√°lise de qualidade
   */
  generateQualityAnalysisPrompt(): string {
    return `
## AN√ÅLISE DE QUALIDADE - PROMPT ESPECIAL:

Avalie a qualidade da resposta do assistente virtual:

### CRIT√âRIOS:
1. RELEV√ÇNCIA: A resposta aborda a pergunta do usu√°rio?
2. COMPLETUDE: A resposta fornece informa√ß√µes suficientes?
3. CLAREZA: A resposta √© f√°cil de entender?
4. APROPRIATEZA: A resposta √© apropriada para o contexto?

### ESCALA:
- 0.0-0.3: Muito baixa qualidade
- 0.4-0.6: Qualidade baixa
- 0.7-0.8: Qualidade boa
- 0.9-1.0: Qualidade excelente

### RESPOSTA ESPERADA:
- Score: [0.0-1.0]
- Justificativa: [explica√ß√£o detalhada]
- Sugest√µes: [melhorias poss√≠veis]`;
  }
} 