import { IntentRecognitionService, Intent } from './intentRecognitionService';
import { RAGEngineService } from './ragEngineService';
import { ConversationMemoryService } from './conversationMemoryService';
import { ToolCallingService } from './toolCallingService';
import { PersonalizationService } from './personalizationService';
import { supabase } from '@/integrations/supabase/client';

export interface OrchestratorRequest {
  phoneNumber: string;
  message: string;
  conversationId: string;
  userId?: string;
}

export interface OrchestratorResponse {
  response: string;
  intent: Intent;
  toolsUsed?: string[];
  escalateToHuman?: boolean;
  metadata?: Record<string, any>;
}

export class LLMOrchestratorService {
  private static readonly SYSTEM_PROMPT = `Voc√™ √© uma recepcionista virtual de uma cl√≠nica m√©dica chamada {clinic_name}.
Sua personalidade √©: {personality}

DIRETRIZES FUNDAMENTAIS:
1. Use EXCLUSIVAMENTE as informa√ß√µes fornecidas no contexto da cl√≠nica
2. Seja sempre cordial, profissional e emp√°tica
3. Para agendamentos, use as ferramentas dispon√≠veis
4. Se n√£o souber uma informa√ß√£o, diga educadamente que n√£o possui essa informa√ß√£o
5. NUNCA invente informa√ß√µes ou d√™ conselhos m√©dicos
6. Mantenha respostas concisas e objetivas (m√°ximo 3 par√°grafos)

FERRAMENTAS DISPON√çVEIS:
- create_appointment: Criar novo agendamento
- list_appointments: Listar agendamentos existentes
- cancel_appointment: Cancelar agendamento
- reschedule_appointment: Reagendar consulta
- check_availability: Verificar disponibilidade
- escalate_to_human: Transferir para atendente humano

Use as ferramentas quando necess√°rio para executar a√ß√µes no sistema.`;

  static async processMessage(request: OrchestratorRequest): Promise<OrchestratorResponse> {
    try {
      // 1. Carregar mem√≥ria da conversa
      const memory = await ConversationMemoryService.loadMemory(request.phoneNumber);
      const conversationHistory = ConversationMemoryService.getRecentHistory(memory, 10);

      // 1.5. Carregar contexto de personaliza√ß√£o
      const personalization = await PersonalizationService.loadPersonalizationContext(request.phoneNumber);

      // 2. Reconhecer inten√ß√£o
      const intent = await IntentRecognitionService.recognizeIntent({
        message: request.message,
        conversationHistory,
        clinicContext: await this.getClinicContext(),
        userProfile: memory.userProfile
      });

      // 3. Verificar se precisa escalar para humano
      if (this.shouldEscalateToHuman(intent, memory)) {
        await this.escalateToHuman(request.conversationId, 'Solicita√ß√£o do usu√°rio');
        return {
          response: 'Entendi que voc√™ precisa de um atendimento mais personalizado. Vou transferir voc√™ para um de nossos atendentes. Por favor, aguarde um momento.',
          intent,
          escalateToHuman: true
        };
      }

      // 4. Executar busca RAG
      const ragResponse = await RAGEngineService.retrieve({
        query: request.message,
        intent: intent.name,
        entities: intent.entities
      });

      // 5. Preparar contexto para o LLM
      const systemPrompt = await this.prepareSystemPrompt();
      const messages = this.buildMessages(systemPrompt, conversationHistory, ragResponse.augmentedPrompt);

      // 6. Decidir se precisa usar ferramentas
      let response: string;
      let toolsUsed: string[] = [];

      if (intent.requiresAction) {
        // Usar ferramentas para executar a√ß√µes
        const toolResponse = await ToolCallingService.executeTools(intent, request);
        response = toolResponse.response;
        toolsUsed = toolResponse.toolsUsed;
      } else {
        // Gerar resposta direta via LLM
        const { data, error } = await supabase.functions.invoke('ai-chat-gpt4', {
          body: { messages }
        });

        if (error) throw error;
        response = data?.response || 'Desculpe, n√£o consegui processar sua mensagem.';
      }

      // 6.5. Aplicar personaliza√ß√£o na resposta
      response = PersonalizationService.generatePersonalizedMessage(
        response,
        personalization,
        intent.name
      );

      // 6.6. Adicionar sugest√µes personalizadas se apropriado
      if (intent.category === 'appointment' || intent.name === 'INFO_SERVICES') {
        const suggestions = await PersonalizationService.generatePersonalizedSuggestions(
          personalization,
          intent.entities.service
        );
        
        if (suggestions.length > 0) {
          response += '\n\nüí° ' + suggestions[0];
        }
      }

      // 6.7. Adaptar estilo de linguagem
      response = PersonalizationService.adaptLanguageStyle(response, personalization);

      // 7. Salvar na mem√≥ria
      await ConversationMemoryService.saveInteraction(
        request.phoneNumber,
        request.message,
        response,
        intent
      );

      // 8. Verificar loops de conversa
      if (memory.loopCount > 3 || memory.frustrationLevel > 0.7) {
        await this.handleConversationLoop(request.conversationId);
      }

      return {
        response,
        intent,
        toolsUsed,
        metadata: {
          ragSources: ragResponse.sources,
          confidence: intent.confidence
        }
      };

    } catch (error) {
      console.error('‚ùå Orchestrator error:', error);
      return {
        response: 'Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes ou entre em contato pelo telefone.',
        intent: {
          name: 'ERROR',
          confidence: 0,
          entities: {},
          requiresAction: false,
          category: 'support'
        }
      };
    }
  }

  private static async prepareSystemPrompt(): Promise<string> {
    const { data: clinicData } = await supabase
      .from('contextualization_data')
      .select('question, answer')
      .in('question', ['nome da cl√≠nica', 'personalidade do chatbot']);

    const clinicName = clinicData?.find((d: any) => d.question.includes('nome'))?.answer || 'Cl√≠nica M√©dica';
    const personality = clinicData?.find((d: any) => d.question.includes('personalidade'))?.answer || 
      'profissional, emp√°tica e prestativa';

    return this.SYSTEM_PROMPT
      .replace('{clinic_name}', clinicName)
      .replace('{personality}', personality);
  }

  private static buildMessages(systemPrompt: string, history: any[], augmentedPrompt: string) {
    const messages = [
      { role: 'system', content: systemPrompt }
    ];

    // Adicionar hist√≥rico relevante
    history.slice(-6).forEach(h => {
      messages.push({
        role: h.role === 'user' ? 'user' : 'assistant',
        content: h.content
      });
    });

    // Adicionar prompt aumentado com contexto RAG
    messages.push({
      role: 'user',
      content: augmentedPrompt
    });

    return messages;
  }

  private static async getClinicContext(): Promise<Record<string, any>> {
    const { data } = await supabase
      .from('contextualization_data')
      .select('category, question, answer')
      .order('order_number');

    const context: Record<string, any> = {};
    
    data?.forEach((item: any) => {
      if (!context[item.category]) {
        context[item.category] = [];
      }
      context[item.category].push({
        question: item.question,
        answer: item.answer
      });
    });

    return context;
  }

  private static shouldEscalateToHuman(intent: Intent, memory: any): boolean {
    if (intent.name === 'HUMAN_HANDOFF') return true;
    if (intent.confidence < 0.3) return true;
    if (memory.loopCount > 3) return true;
    if (memory.frustrationLevel > 0.7) return true;
    return false;
  }

  private static async escalateToHuman(conversationId: string, reason: string): Promise<void> {
    await supabase
      .from('whatsapp_conversations')
      .update({
        escalated_to_human: true,
        escalation_reason: reason,
        escalated_at: new Date().toISOString()
      })
      .eq('id', conversationId);
  }

  private static async handleConversationLoop(conversationId: string): Promise<void> {
    await supabase
      .from('whatsapp_conversations')
      .update({
        loop_counter: 0,
        escalation_reason: 'Loop detectado',
        escalated_to_human: true,
        escalated_at: new Date().toISOString()
      })
      .eq('id', conversationId);
  }
} 