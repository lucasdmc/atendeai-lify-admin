import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import { AlertTriangle, Trash2 } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';

interface Clinic {
  id: string;
  name: string;
  cnpj?: string | null;
  email?: string | null;
  phone?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  website?: string | null;
  is_active: boolean | null;
  created_at: string | null;
}

interface DeleteClinicModalProps {
  clinic: Clinic | null;
  isOpen: boolean;
  onClose: () => void;
  onClinicDeleted: () => void;
}

const DeleteClinicModal = ({ clinic, isOpen, onClose, onClinicDeleted }: DeleteClinicModalProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const { userRole, userPermissions } = useAuth();

  const handleDeleteClinic = async () => {
    if (!clinic) return;

    // Verificar permiss√µes - admin_lify tem acesso total, ou verificar permiss√£o espec√≠fica
    if (userRole !== 'admin_lify' && !userPermissions.includes('deletar_clinicas')) {
      toast({
        title: "Erro de Permiss√£o",
        description: "Voc√™ n√£o tem permiss√£o para excluir cl√≠nicas.",
        variant: "destructive",
      });
      return;
    }

    // Verificar se √© a cl√≠nica padr√£o
    if (clinic.id === '00000000-0000-0000-0000-000000000001') {
      toast({
        title: "Erro",
        description: "N√£o √© poss√≠vel excluir a Cl√≠nica Principal do sistema.",
        variant: "destructive",
      });
      return;
    }

    console.log('üóëÔ∏è Excluindo cl√≠nica:', clinic);
    console.log('üë§ Permiss√µes do usu√°rio:', userPermissions);
    console.log('üë§ Role do usu√°rio:', userRole);

    setIsLoading(true);
    try {
      // 1. Verificar se h√° usu√°rios associados √† cl√≠nica
      const { data: clinicUsers, error: usersError } = await supabase
        .from('clinic_users')
        .select('*')
        .eq('clinic_id', clinic.id);

      if (usersError) {
        console.error('‚ùå Erro ao verificar usu√°rios da cl√≠nica:', usersError);
        throw usersError;
      }

      console.log('üë• Usu√°rios associados √† cl√≠nica:', clinicUsers?.length || 0);

      // 2. Verificar se h√° agentes associados √† cl√≠nica
      const { data: agents, error: agentsError } = await supabase
        .from('agents')
        .select('*')
        .eq('clinic_id', clinic.id);

      if (agentsError) {
        console.error('‚ùå Erro ao verificar agentes da cl√≠nica:', agentsError);
        throw agentsError;
      }

      console.log('ü§ñ Agentes associados √† cl√≠nica:', agents?.length || 0);

      // 3. Se h√° usu√°rios ou agentes associados, mostrar aviso
      if ((clinicUsers && clinicUsers.length > 0) || (agents && agents.length > 0)) {
        toast({
          title: "Aviso",
          description: `Esta cl√≠nica possui ${clinicUsers?.length || 0} usu√°rios e ${agents?.length || 0} agentes associados. Eles ser√£o desassociados automaticamente.`,
          variant: "default",
        });
      }

      // 4. Excluir associa√ß√µes de usu√°rios
      if (clinicUsers && clinicUsers.length > 0) {
        const { error: deleteUsersError } = await supabase
          .from('clinic_users')
          .delete()
          .eq('clinic_id', clinic.id);

        if (deleteUsersError) {
          console.error('‚ùå Erro ao excluir associa√ß√µes de usu√°rios:', deleteUsersError);
          throw deleteUsersError;
        }

        console.log('‚úÖ Associa√ß√µes de usu√°rios exclu√≠das');
      }

      // 5. Excluir agentes associados
      if (agents && agents.length > 0) {
        const { error: deleteAgentsError } = await supabase
          .from('agents')
          .delete()
          .eq('clinic_id', clinic.id);

        if (deleteAgentsError) {
          console.error('‚ùå Erro ao excluir agentes:', deleteAgentsError);
          throw deleteAgentsError;
        }

        console.log('‚úÖ Agentes exclu√≠dos');
      }

      // 6. Excluir a cl√≠nica
      const { error: deleteClinicError } = await supabase
        .from('clinics')
        .delete()
        .eq('id', clinic.id);

      if (deleteClinicError) {
        console.error('‚ùå Erro ao excluir cl√≠nica:', deleteClinicError);
        throw deleteClinicError;
      }

      console.log('‚úÖ Cl√≠nica exclu√≠da com sucesso');

      toast({
        title: "Cl√≠nica exclu√≠da",
        description: `A cl√≠nica "${clinic.name}" foi exclu√≠da com sucesso.`,
      });

      onClinicDeleted();
      onClose();
    } catch (error: any) {
      console.error('‚ùå Erro completo ao excluir cl√≠nica:', error);
      
      let errorMessage = "N√£o foi poss√≠vel excluir a cl√≠nica.";
      
      if (error.code === '42501') {
        errorMessage = "Voc√™ n√£o tem permiss√£o para excluir cl√≠nicas.";
      } else if (error.code === '23503') {
        errorMessage = "N√£o √© poss√≠vel excluir a cl√≠nica pois h√° dados relacionados.";
      } else if (error.message) {
        errorMessage = error.message;
      }

      toast({
        title: "Erro",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!clinic) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-600">
            <AlertTriangle className="h-5 w-5" />
            Excluir Cl√≠nica
          </DialogTitle>
          <DialogDescription>
            Tem certeza que deseja excluir a cl√≠nica <strong>"{clinic.name}"</strong>?
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-start gap-2">
              <AlertTriangle className="h-4 w-4 text-red-600 mt-0.5" />
              <div className="text-sm text-red-700">
                <p className="font-medium">Esta a√ß√£o n√£o pode ser desfeita.</p>
                <p className="mt-1">
                  Todos os dados relacionados √† cl√≠nica ser√£o exclu√≠dos permanentemente, incluindo:
                </p>
                <ul className="mt-2 space-y-1">
                  <li>‚Ä¢ Usu√°rios associados √† cl√≠nica</li>
                  <li>‚Ä¢ Agentes da cl√≠nica</li>
                  <li>‚Ä¢ Configura√ß√µes espec√≠ficas</li>
                </ul>
              </div>
            </div>
          </div>

          {clinic.id === '00000000-0000-0000-0000-000000000001' && (
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5" />
                <div className="text-sm text-yellow-700">
                  <p className="font-medium">Cl√≠nica Principal</p>
                  <p className="mt-1">
                    Esta √© a cl√≠nica principal do sistema e n√£o pode ser exclu√≠da.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={isLoading}>
            Cancelar
          </Button>
          <Button 
            variant="destructive"
            onClick={handleDeleteClinic}
            disabled={isLoading || clinic.id === '00000000-0000-0000-0000-000000000001'}
            className="bg-red-600 hover:bg-red-700"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Excluindo...
              </>
            ) : (
              <>
                <Trash2 className="h-4 w-4 mr-2" />
                Excluir Cl√≠nica
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default DeleteClinicModal; 