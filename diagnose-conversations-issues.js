import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.SY8A3ReAs_D7SFBp99PpSe8rpm1hbWMv4b2q-c_VS5M';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente necess√°rias n√£o encontradas:');
  console.error('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseConversationsIssues() {
  console.log('üîç DIAGN√ìSTICO: Problemas das Conversas WhatsApp');
  console.log('==================================================');

  try {
    // 1. Verificar dados das cl√≠nicas
    console.log('\n1Ô∏è‚É£ Verificando dados das cl√≠nicas...');
    
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('*');

    if (clinicsError) {
      console.error('‚ùå Erro ao buscar cl√≠nicas:', clinicsError);
    } else {
      console.log(`‚úÖ Cl√≠nicas encontradas: ${clinics?.length || 0}`);
      clinics?.forEach((clinic, index) => {
        console.log(`   ${index + 1}. ${clinic.name} (${clinic.id})`);
        console.log(`      WhatsApp: ${clinic.whatsapp_phone_number || 'N√£o configurado'}`);
      });
    }

    // 2. Verificar n√∫meros de WhatsApp por cl√≠nica
    console.log('\n2Ô∏è‚É£ Verificando n√∫meros de WhatsApp por cl√≠nica...');
    
    const { data: clinicNumbers, error: clinicNumbersError } = await supabase
      .from('clinic_whatsapp_numbers')
      .select('*');

    if (clinicNumbersError) {
      console.error('‚ùå Erro ao buscar n√∫meros de cl√≠nica:', clinicNumbersError);
    } else {
      console.log(`‚úÖ N√∫meros de cl√≠nica encontrados: ${clinicNumbers?.length || 0}`);
      clinicNumbers?.forEach((number, index) => {
        console.log(`   ${index + 1}. Cl√≠nica: ${number.clinic_id} | N√∫mero: ${number.whatsapp_number} | Ativo: ${number.is_active}`);
      });
    }

    // 3. Verificar conversas melhoradas
    console.log('\n3Ô∏è‚É£ Verificando conversas melhoradas...');
    
    const { data: improvedConversations, error: improvedConvError } = await supabase
      .from('whatsapp_conversations_improved')
      .select('*')
      .order('last_message_at', { ascending: false });

    if (improvedConvError) {
      console.error('‚ùå Erro ao buscar conversas melhoradas:', improvedConvError);
    } else {
      console.log(`‚úÖ Conversas melhoradas encontradas: ${improvedConversations?.length || 0}`);
      improvedConversations?.forEach((conv, index) => {
        console.log(`   ${index + 1}. Paciente: ${conv.patient_phone_number} | Cl√≠nica: ${conv.clinic_whatsapp_number} | √öltima: ${conv.last_message_preview}`);
      });
    }

    // 4. Verificar conversas antigas
    console.log('\n4Ô∏è‚É£ Verificando conversas antigas...');
    
    const { data: oldConversations, error: oldConvError } = await supabase
      .from('whatsapp_conversations')
      .select('*')
      .order('updated_at', { ascending: false });

    if (oldConvError) {
      console.error('‚ùå Erro ao buscar conversas antigas:', oldConvError);
    } else {
      console.log(`‚úÖ Conversas antigas encontradas: ${oldConversations?.length || 0}`);
      oldConversations?.forEach((conv, index) => {
        console.log(`   ${index + 1}. N√∫mero: ${conv.phone_number} | Nome: ${conv.name} | √öltima: ${conv.last_message_preview}`);
      });
    }

    // 5. Verificar mensagens melhoradas
    console.log('\n5Ô∏è‚É£ Verificando mensagens melhoradas...');
    
    const { data: improvedMessages, error: improvedMsgError } = await supabase
      .from('whatsapp_messages_improved')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (improvedMsgError) {
      console.error('‚ùå Erro ao buscar mensagens melhoradas:', improvedMsgError);
    } else {
      console.log(`‚úÖ Mensagens melhoradas encontradas: ${improvedMessages?.length || 0}`);
      improvedMessages?.forEach((msg, index) => {
        console.log(`   ${index + 1}. De: ${msg.sender_phone} | Para: ${msg.receiver_phone} | Tipo: ${msg.message_type}`);
      });
    }

    // 6. Verificar mensagens antigas
    console.log('\n6Ô∏è‚É£ Verificando mensagens antigas...');
    
    const { data: oldMessages, error: oldMsgError } = await supabase
      .from('whatsapp_messages')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (oldMsgError) {
      console.error('‚ùå Erro ao buscar mensagens antigas:', oldMsgError);
    } else {
      console.log(`‚úÖ Mensagens antigas encontradas: ${oldMessages?.length || 0}`);
      oldMessages?.forEach((msg, index) => {
        console.log(`   ${index + 1}. Conversa: ${msg.conversation_id} | Conte√∫do: ${msg.content?.substring(0, 50)}...`);
      });
    }

    // 7. Verificar se h√° dados para o n√∫mero espec√≠fico mencionado
    console.log('\n7Ô∏è‚É£ Verificando dados para o n√∫mero 5547997192447...');
    
    const targetNumber = '5547997192447';
    
    // Verificar em conversas melhoradas
    const { data: targetImprovedConv, error: targetImprovedError } = await supabase
      .from('whatsapp_conversations_improved')
      .select('*')
      .eq('patient_phone_number', targetNumber);

    if (targetImprovedError) {
      console.error('‚ùå Erro ao buscar conversa melhorada:', targetImprovedError);
    } else {
      console.log(`‚úÖ Conversas melhoradas para ${targetNumber}: ${targetImprovedConv?.length || 0}`);
      targetImprovedConv?.forEach((conv, index) => {
        console.log(`   ${index + 1}. Cl√≠nica: ${conv.clinic_whatsapp_number} | √öltima: ${conv.last_message_preview}`);
      });
    }

    // Verificar em conversas antigas
    const { data: targetOldConv, error: targetOldError } = await supabase
      .from('whatsapp_conversations')
      .select('*')
      .eq('phone_number', targetNumber);

    if (targetOldError) {
      console.error('‚ùå Erro ao buscar conversa antiga:', targetOldError);
    } else {
      console.log(`‚úÖ Conversas antigas para ${targetNumber}: ${targetOldConv?.length || 0}`);
      targetOldConv?.forEach((conv, index) => {
        console.log(`   ${index + 1}. Nome: ${conv.name} | √öltima: ${conv.last_message_preview}`);
      });
    }

    // 8. Verificar mensagens para o n√∫mero
    const { data: targetMessages, error: targetMsgError } = await supabase
      .from('whatsapp_messages_improved')
      .select('*')
      .or(`sender_phone.eq.${targetNumber},receiver_phone.eq.${targetNumber}`)
      .order('created_at', { ascending: false });

    if (targetMsgError) {
      console.error('‚ùå Erro ao buscar mensagens:', targetMsgError);
    } else {
      console.log(`‚úÖ Mensagens para ${targetNumber}: ${targetMessages?.length || 0}`);
      targetMessages?.forEach((msg, index) => {
        console.log(`   ${index + 1}. De: ${msg.sender_phone} | Para: ${msg.receiver_phone} | Tipo: ${msg.message_type} | Conte√∫do: ${msg.content?.substring(0, 50)}...`);
      });
    }

    // 9. An√°lise dos problemas
    console.log('\nüîç AN√ÅLISE DOS PROBLEMAS:');
    console.log('==========================');
    
    const hasImprovedConversations = improvedConversations && improvedConversations.length > 0;
    const hasOldConversations = oldConversations && oldConversations.length > 0;
    const hasClinicNumbers = clinicNumbers && clinicNumbers.length > 0;
    const hasTargetConversation = (targetImprovedConv && targetImprovedConv.length > 0) || (targetOldConv && targetOldConv.length > 0);

    console.log(`üìä Status atual:`);
    console.log(`   - Conversas melhoradas: ${hasImprovedConversations ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Conversas antigas: ${hasOldConversations ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - N√∫meros de cl√≠nica configurados: ${hasClinicNumbers ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Conversa para ${targetNumber}: ${hasTargetConversation ? '‚úÖ' : '‚ùå'}`);

    if (!hasClinicNumbers) {
      console.log('\n‚ùå PROBLEMA 1: Nenhum n√∫mero de WhatsApp configurado para cl√≠nicas');
      console.log('   Solu√ß√£o: Configurar n√∫meros na tabela clinic_whatsapp_numbers');
    }

    if (!hasImprovedConversations && !hasOldConversations) {
      console.log('\n‚ùå PROBLEMA 2: Nenhuma conversa encontrada no sistema');
      console.log('   Solu√ß√£o: Verificar se o webhook est√° processando mensagens corretamente');
    }

    if (!hasTargetConversation) {
      console.log('\n‚ùå PROBLEMA 3: Conversa do n√∫mero 5547997192447 n√£o encontrada');
      console.log('   Solu√ß√£o: Verificar se a mensagem foi processada pelo webhook');
    }

    // 10. Sugest√µes de corre√ß√£o
    console.log('\nüîß SUGEST√ïES DE CORRE√á√ÉO:');
    console.log('==========================');
    
    if (!hasClinicNumbers) {
      console.log('1. Configurar n√∫meros de WhatsApp para cl√≠nicas:');
      console.log('   - Inserir dados na tabela clinic_whatsapp_numbers');
      console.log('   - Associar n√∫meros √†s cl√≠nicas corretas');
    }

    if (!hasImprovedConversations) {
      console.log('2. Verificar processamento de webhook:');
      console.log('   - Verificar se o webhook est√° ativo');
      console.log('   - Verificar logs do webhook');
      console.log('   - Testar envio de mensagem de teste');
    }

    if (!hasTargetConversation) {
      console.log('3. Processar mensagem de teste:');
      console.log('   - Simular mensagem recebida do n√∫mero 5547997192447');
      console.log('   - Verificar se √© salva corretamente');
    }

    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error);
  }
}

// Executar diagn√≥stico
diagnoseConversationsIssues().then(() => {
  console.log('\n‚úÖ Diagn√≥stico finalizado!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro:', error);
  process.exit(1);
}); 