const OpenAI = require('openai');

// Testar com a nova API key da OpenAI (mesma da VPS)
const openai = new OpenAI({
  apiKey: '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'
});

async function testarNovaOpenAIKey() {
  try {
    console.log('üîç TESTANDO NOVA CHAVE OPENAI');
    console.log('================================');
    
    console.log('üìã Nova API Key:', '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');
    
    console.log('\nüß™ Teste 1: Chamada simples...');
    
    const completion1 = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: "Responda apenas com 'NOVA CHAVE OK' se voc√™ consegue ler esta mensagem." }],
      max_tokens: 10,
      temperature: 0
    });

    const response1 = completion1.choices[0].message.content.trim();
    console.log('‚úÖ RESPOSTA 1:', response1);
    console.log('‚úÖ Teste simples: OK');
    
    console.log('\nüß™ Teste 2: GPT-4o completo...');
    
    const completion2 = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: "Responda apenas com 'GPT4O NOVA CHAVE OK' se voc√™ consegue ler esta mensagem." }],
      max_tokens: 10,
      temperature: 0
    });

    const response2 = completion2.choices[0].message.content.trim();
    console.log('‚úÖ RESPOSTA 2:', response2);
    console.log('‚úÖ Teste GPT-4o: OK');
    
    console.log('\nüß™ Teste 3: Simula√ß√£o do Dr. Carlos...');
    
    const completion3 = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { 
          role: "system", 
          content: "Voc√™ √© o Dr. Carlos, assistente virtual da CardioPrime. Seja acolhedor e profissional. Use emojis ocasionalmente." 
        },
        { 
          role: "user", 
          content: "Ol√°! Como posso agendar uma consulta?" 
        }
      ],
      max_tokens: 100,
      temperature: 0.7
    });

    const response3 = completion3.choices[0].message.content.trim();
    console.log('‚úÖ RESPOSTA Dr. Carlos:', response3);
    console.log('‚úÖ Teste contextualiza√ß√£o: OK');
    
    console.log('\nüß™ Teste 4: Detec√ß√£o de inten√ß√£o...');
    
    const completion4 = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: "Analise a mensagem e classifique a inten√ß√£o. Responda apenas com: INTEN√á√ÉO|CONFIAN√áA" 
        },
        { 
          role: "user", 
          content: "Quais s√£o os hor√°rios de funcionamento da cl√≠nica?" 
        }
      ],
      max_tokens: 20,
      temperature: 0.3
    });

    const response4 = completion4.choices[0].message.content.trim();
    console.log('‚úÖ RESPOSTA Inten√ß√£o:', response4);
    console.log('‚úÖ Teste detec√ß√£o de inten√ß√£o: OK');
    
    console.log('\nüéØ CONCLUS√ÉO: NOVA CHAVE OPENAI FUNCIONAL!');
    console.log('‚úÖ Todos os testes passaram');
    console.log('‚úÖ Sistema pronto para usar');
    
  } catch (error) {
    console.error('‚ùå ERRO AO TESTAR NOVA CHAVE:', error);
    console.log('üîç C√≥digo do erro:', error.code);
    console.log('üìã Mensagem:', error.message);
    console.log('üí° Status:', error.status);
    
    if (error.code === 'invalid_api_key') {
      console.log('‚ùå API KEY AINDA INV√ÅLIDA!');
    } else if (error.code === 'insufficient_quota') {
      console.log('‚ùå QUOTA INSUFICIENTE!');
    } else if (error.code === 'rate_limit_exceeded') {
      console.log('‚ùå LIMITE DE TAXA EXCEDIDO!');
    } else {
      console.log('‚ùå OUTRO ERRO:', error.code);
    }
  }
}

testarNovaOpenAIKey(); 