import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o real do Supabase
const SUPABASE_URL = 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testIntegratedAI() {
  console.log('üîß TESTANDO SISTEMA AI INTEGRADO');
  console.log('==================================\n');

  const testPhone = '554730915628'; // Telefone do Lucas

  try {
    // 1. Simular chamada da API AI
    console.log('ü§ñ 1. Simulando chamada da API AI');
    console.log('‚îÄ'.repeat(50));
    
    const testRequest = {
      message: 'Meu nome √© Lucas',
      clinicId: 'test-clinic',
      userId: 'test-user',
      sessionId: `whatsapp-${testPhone}`,
      options: {
        enableMedicalValidation: false,
        enableEmotionAnalysis: false,
        enableProactiveSuggestions: false,
        enableCache: false,
        enableStreaming: false
      }
    };

    console.log(`üì® Mensagem: "${testRequest.message}"`);
    console.log(`üìû Telefone: ${testPhone}`);
    console.log(`üè• Cl√≠nica: ${testRequest.clinicId}`);
    console.log('');

    // 2. Verificar se a mem√≥ria est√° sendo usada
    console.log('üß† 2. Verificando uso da mem√≥ria');
    console.log('‚îÄ'.repeat(50));
    
    const { data: memoryData } = await supabase
      .from('conversation_memory')
      .select('*')
      .eq('phone_number', testPhone)
      .single();

    if (memoryData) {
      console.log('‚úÖ Mem√≥ria encontrada:');
      console.log(`   üìû Telefone: ${memoryData.phone_number}`);
      console.log(`   üî¢ Intera√ß√µes: ${memoryData.interaction_count}`);
      
      // Parse do user_name
      if (memoryData.user_name) {
        try {
          if (typeof memoryData.user_name === 'string') {
            const parsedUserName = JSON.parse(memoryData.user_name);
            console.log(`   üë§ Nome salvo: "${parsedUserName.name}"`);
          }
        } catch (error) {
          console.log(`   ‚ùå Erro ao parsear: ${error.message}`);
        }
      }
    } else {
      console.log('‚ùå Nenhuma mem√≥ria encontrada');
    }
    console.log('');

    // 3. Simular resposta da IA
    console.log('üí¨ 3. Simulando resposta da IA');
    console.log('‚îÄ'.repeat(50));
    
    let userName = null;
    if (memoryData?.user_name) {
      try {
        if (typeof memoryData.user_name === 'string') {
          const parsedUserName = JSON.parse(memoryData.user_name);
          userName = parsedUserName.name;
        }
      } catch (error) {
        console.log(`Erro ao parsear user_name: ${error.message}`);
      }
    }

    if (userName) {
      const personalizedResponse = `Ol√° ${userName}! √â um prazer conhec√™-lo. Como posso ajud√°-lo hoje?`;
      console.log(`ü§ñ Resposta personalizada: "${personalizedResponse}"`);
    } else {
      const genericResponse = 'Ol√°! √â um prazer conhec√™-lo. Como posso ajud√°-lo hoje?';
      console.log(`ü§ñ Resposta gen√©rica: "${genericResponse}"`);
    }
    console.log('');

    // 4. Simular segunda mensagem
    console.log('‚ùì 4. Simulando segunda mensagem');
    console.log('‚îÄ'.repeat(50));
    
    const secondMessage = 'Qual o meu nome?';
    console.log(`üì® Mensagem: "${secondMessage}"`);
    
    if (userName) {
      const contextualResponse = `Claro ${userName}! Seu nome √© ${userName}. Como posso ajud√°-lo hoje?`;
      console.log(`ü§ñ Resposta contextual: "${contextualResponse}"`);
    } else {
      const genericResponse = 'Infelizmente, n√£o tenho acesso a informa√ß√µes pessoais. Como posso ajud√°-lo?';
      console.log(`ü§ñ Resposta gen√©rica: "${genericResponse}"`);
    }
    console.log('');

    // 5. Verificar se o problema foi resolvido
    console.log('‚úÖ 5. Verificando se o problema foi resolvido');
    console.log('‚îÄ'.repeat(50));
    
    if (userName) {
      console.log('üéâ PROBLEMA RESOLVIDO!');
      console.log('   ‚úÖ Nome extra√≠do corretamente');
      console.log('   ‚úÖ Nome salvo na mem√≥ria');
      console.log('   ‚úÖ IA tem acesso ao nome');
      console.log('   ‚úÖ Respostas personalizadas funcionando');
      console.log('   ‚úÖ Contexto mantido entre mensagens');
    } else {
      console.log('‚ùå PROBLEMA PERSISTE');
      console.log('   ‚ùå Nome n√£o foi extra√≠do');
      console.log('   ‚ùå IA n√£o tem acesso ao nome');
      console.log('   ‚ùå Respostas n√£o personalizadas');
    }
    console.log('');

    console.log('üéØ RESULTADO FINAL');
    console.log('==================');
    if (userName) {
      console.log('‚úÖ SISTEMA FUNCIONANDO CORRETAMENTE');
      console.log(`   üë§ Usu√°rio: ${userName}`);
      console.log('   üí¨ Contexto mantido');
      console.log('   ü§ñ IA personalizada');
      console.log('   üîÑ Mem√≥ria persistente');
    } else {
      console.log('‚ùå SISTEMA AINDA COM PROBLEMAS');
      console.log('   üîß Necessita mais corre√ß√µes');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar teste
testIntegratedAI(); 