// ========================================
// CORRE√á√ÉO CR√çTICA #3: CONFIGURA√á√ÉO DE AMBIENTE PRODU√á√ÉO
// Baseado no documento "SOLU√á√ïES PR√ÅTICAS E IMPLEMENTA√á√ïES - AtendeA√≠"
// ========================================

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Configurar dotenv
dotenv.config();

const supabase = createClient(
  'https://niakqdolcdwxtrkbqmdi.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw'
);

async function fixEnvironmentProduction() {
  console.log('üîß CORRE√á√ÉO CR√çTICA #3: CONFIGURA√á√ÉO DE AMBIENTE PRODU√á√ÉO');
  console.log('========================================================');

  try {
    // PASSO 1: VALIDA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE
    console.log('\nüìã 1. Validando vari√°veis de ambiente...');
    
    const environmentConfigCode = `
// ========================================
// CONFIGURA√á√ÉO DE AMBIENTE PRODU√á√ÉO
// ========================================

import dotenv from 'dotenv';

// Configurar dotenv
dotenv.config();

const requiredEnvVars = [
  'SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY',
  'OPENAI_API_KEY',
  'WHATSAPP_META_ACCESS_TOKEN',
  'WHATSAPP_META_PHONE_NUMBER_ID',
  'WEBHOOK_VERIFY_TOKEN'
];

export function validateEnvironment() {
  const missing = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missing.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas:');
    missing.forEach(varName => console.error(\`   - \${varName}\`));
    throw new Error(\`Vari√°veis de ambiente obrigat√≥rias n√£o encontradas: \${missing.join(', ')}\`);
  }
  
  console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
  return true;
}

export function getEnvironmentConfig() {
  return {
    nodeEnv: process.env.NODE_ENV || 'development',
    port: process.env.PORT || 3001,
    supabase: {
      url: process.env.SUPABASE_URL,
      serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
      anonKey: process.env.SUPABASE_ANON_KEY
    },
    openai: {
      apiKey: process.env.OPENAI_API_KEY
    },
    whatsapp: {
      accessToken: process.env.WHATSAPP_META_ACCESS_TOKEN,
      phoneNumberId: process.env.WHATSAPP_META_PHONE_NUMBER_ID,
      verifyToken: process.env.WEBHOOK_VERIFY_TOKEN
    },
    logging: {
      level: process.env.LOG_LEVEL || 'info',
      enableConsole: process.env.NODE_ENV !== 'production'
    }
  };
}

export function isProduction() {
  return process.env.NODE_ENV === 'production';
}

export function isDevelopment() {
  return process.env.NODE_ENV === 'development';
}

export default {
  validateEnvironment,
  getEnvironmentConfig,
  isProduction,
  isDevelopment
};
`;

    // Salvar configura√ß√£o de ambiente
    const fs = await import('fs');
    fs.writeFileSync('src/config/environment.js', environmentConfigCode);
    console.log('‚úÖ Configura√ß√£o de ambiente criada!');

    // PASSO 2: SCRIPT DE VERIFICA√á√ÉO DE SISTEMA
    console.log('\nüìã 2. Criando script de verifica√ß√£o de sistema...');
    
    const healthCheckScript = `
// ========================================
// SCRIPT DE VERIFICA√á√ÉO DE SISTEMA
// ========================================

import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';
import { validateEnvironment, getEnvironmentConfig } from './src/config/environment.js';
import dotenv from 'dotenv';

dotenv.config();

async function runHealthCheck() {
  console.log('üè• Executando verifica√ß√£o de sa√∫de do sistema...\\n');
  
  try {
    // Validar vari√°veis de ambiente
    console.log('üìã 1. Validando vari√°veis de ambiente...');
    validateEnvironment();
    const config = getEnvironmentConfig();
    console.log('‚úÖ Vari√°veis de ambiente validadas');
    
    let allGood = true;

    // Teste 1: Conex√£o com Supabase
    try {
      console.log('\\nüìä 2. Testando conex√£o com Supabase...');
      const supabase = createClient(config.supabase.url, config.supabase.serviceRoleKey);
      
      const { data, error } = await supabase
        .from('conversation_memory')
        .select('count')
        .limit(1);
      
      if (error) throw error;
      
      console.log('‚úÖ Supabase: Conectado com sucesso');
    } catch (error) {
      console.log('‚ùå Supabase: Erro de conex√£o -', error.message);
      allGood = false;
    }

    // Teste 2: API OpenAI
    try {
      console.log('\\nü§ñ 3. Testando API OpenAI...');
      const openai = new OpenAI({ apiKey: config.openai.apiKey });
      
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: "Diga apenas 'OK'" }],
        max_tokens: 10
      });
      
      if (response.choices[0].message.content.includes('OK')) {
        console.log('‚úÖ OpenAI: API funcionando corretamente');
      } else {
        throw new Error('Resposta inesperada da API');
      }
    } catch (error) {
      console.log('‚ùå OpenAI: Erro na API -', error.message);
      allGood = false;
    }

    // Teste 3: Tabela conversation_memory
    try {
      console.log('\\nüíæ 4. Testando tabela conversation_memory...');
      const supabase = createClient(config.supabase.url, config.supabase.serviceRoleKey);
      
      // Tentar inserir e deletar um registro de teste
      const testData = {
        phone_number: '+5500000000000',
        agent_id: 'health_check',
        user_message: 'teste',
        bot_response: 'teste',
        intent: 'TEST',
        confidence: 1.0
      };
      
      const { data: insertData, error: insertError } = await supabase
        .from('conversation_memory')
        .insert(testData)
        .select();
        
      if (insertError) throw insertError;
      
      // Deletar o registro de teste
      await supabase
        .from('conversation_memory')
        .delete()
        .eq('id', insertData[0].id);
        
      console.log('‚úÖ Tabela conversation_memory: Funcionando corretamente');
    } catch (error) {
      console.log('‚ùå Tabela conversation_memory: Erro -', error.message);
      allGood = false;
    }

    // Teste 4: WhatsApp Meta API
    try {
      console.log('\\nüì± 5. Testando WhatsApp Meta API...');
      
      if (!config.whatsapp.accessToken || !config.whatsapp.phoneNumberId) {
        throw new Error('Tokens do WhatsApp n√£o configurados');
      }
      
      console.log('‚úÖ WhatsApp Meta: Tokens configurados');
      console.log('üìã Phone Number ID:', config.whatsapp.phoneNumberId);
      console.log('üîë Access Token:', config.whatsapp.accessToken.substring(0, 20) + '...');
    } catch (error) {
      console.log('‚ùå WhatsApp Meta: Erro -', error.message);
      allGood = false;
    }

    // Resultado final
    console.log('\\n' + '='.repeat(50));
    if (allGood) {
      console.log('üéâ SISTEMA TOTALMENTE FUNCIONAL!');
      console.log('‚úÖ Todos os componentes est√£o operacionais');
      console.log('üöÄ Pronto para produ√ß√£o!');
    } else {
      console.log('‚ö†Ô∏è  SISTEMA COM PROBLEMAS!');
      console.log('‚ùå Alguns componentes precisam de corre√ß√£o');
      console.log('üîß Corrija os erros antes de usar em produ√ß√£o');
    }
    console.log('='.repeat(50));
    
    return allGood;
  } catch (error) {
    console.error('üí• ERRO CR√çTICO na verifica√ß√£o:', error);
    return false;
  }
}

// Executar se chamado diretamente
if (import.meta.url === \`file://\${process.argv[1]}\`) {
  runHealthCheck().then(success => {
    process.exit(success ? 0 : 1);
  });
}

export { runHealthCheck };
`;

    fs.writeFileSync('scripts/health-check.js', healthCheckScript);
    console.log('‚úÖ Script de verifica√ß√£o de sistema criado!');

    // PASSO 3: CONFIGURA√á√ÉO DE LOGS POR AMBIENTE
    console.log('\nüìã 3. Criando configura√ß√£o de logs por ambiente...');
    
    const loggerConfigCode = `
// ========================================
// CONFIGURA√á√ÉO DE LOGS POR AMBIENTE
// ========================================

import winston from 'winston';
import { isProduction, isDevelopment } from '../config/environment.js';

const logLevel = isProduction() ? 'info' : 'debug';

const logger = winston.createLogger({
  level: logLevel,
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ 
      filename: 'logs/error.log', 
      level: 'error' 
    }),
    new winston.transports.File({ 
      filename: 'logs/combined.log' 
    })
  ]
});

// S√≥ mostrar logs no console em desenvolvimento
if (isDevelopment()) {
  logger.add(new winston.transports.Console({
    format: winston.format.combine(
      winston.format.colorize(),
      winston.format.simple()
    )
  }));
}

// Fun√ß√£o para logs que NUNCA devem ir para produ√ß√£o
logger.debug = function(message, meta = {}) {
  if (isDevelopment()) {
    this.log('debug', message, meta);
  }
};

// Fun√ß√£o para logs de teste que NUNCA devem ir para produ√ß√£o
logger.test = function(message, meta = {}) {
  if (isDevelopment()) {
    this.log('info', \`üß™ TEST: \${message}\`, meta);
  }
};

// Fun√ß√£o para logs de produ√ß√£o
logger.production = function(message, meta = {}) {
  if (isProduction()) {
    this.log('info', message, meta);
  }
};

// Fun√ß√µes espec√≠ficas para diferentes componentes
logger.ai = function(message, meta = {}) {
  this.log('info', \`ü§ñ [AI] \${message}\`, meta);
};

logger.clinic = function(message, meta = {}) {
  this.log('info', \`üè• [Clinic] \${message}\`, meta);
};

logger.whatsapp = function(message, meta = {}) {
  this.log('info', \`üì± [WhatsApp] \${message}\`, meta);
};

logger.memory = function(message, meta = {}) {
  this.log('info', \`üß† [Memory] \${message}\`, meta);
};

logger.webhook = function(message, meta = {}) {
  this.log('info', \`üîó [Webhook] \${message}\`, meta);
};

export default logger;
`;

    fs.writeFileSync('src/utils/logger.js', loggerConfigCode);
    console.log('‚úÖ Configura√ß√£o de logs criada!');

    // PASSO 4: ARQUIVOS DE CONFIGURA√á√ÉO DE AMBIENTE
    console.log('\nüìã 4. Criando arquivos de configura√ß√£o de ambiente...');
    
    // Arquivo .env.production
    const envProductionCode = `# ========================================
# CONFIGURA√á√ÉO DE AMBIENTE PRODU√á√ÉO
# ========================================

NODE_ENV=production
LOG_LEVEL=info

# Supabase
SUPABASE_URL=https://niakqdolcdwxtrkbqmdi.supabase.co
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw

# OpenAI
OPENAI_API_KEY=sk-proj-your-openai-api-key-here

# WhatsApp Meta
WHATSAPP_META_ACCESS_TOKEN=your-whatsapp-access-token-here
WHATSAPP_META_PHONE_NUMBER_ID=your-phone-number-id-here
WEBHOOK_VERIFY_TOKEN=your-webhook-verify-token-here

# Servidor
PORT=3001
HOST=0.0.0.0

# Logs
LOG_LEVEL=info
ENABLE_CONSOLE_LOGS=false
`;

    // Arquivo .env.development
    const envDevelopmentCode = `# ========================================
# CONFIGURA√á√ÉO DE AMBIENTE DESENVOLVIMENTO
# ========================================

NODE_ENV=development
LOG_LEVEL=debug

# Supabase
SUPABASE_URL=https://niakqdolcdwxtrkbqmdi.supabase.co
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY2NTc1ODU1OX0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODI1NTksImV4cCI6MjA2NTc1ODU1OX0.90ihAk2geP1JoHIvMj_pxeoMe6dwRwH-rBbJwbFeomw

# OpenAI
OPENAI_API_KEY=sk-proj-your-openai-api-key-here

# WhatsApp Meta
WHATSAPP_META_ACCESS_TOKEN=your-whatsapp-access-token-here
WHATSAPP_META_PHONE_NUMBER_ID=your-phone-number-id-here
WEBHOOK_VERIFY_TOKEN=your-webhook-verify-token-here

# Servidor
PORT=3001
HOST=localhost

# Logs
LOG_LEVEL=debug
ENABLE_CONSOLE_LOGS=true
`;

    fs.writeFileSync('.env.production', envProductionCode);
    fs.writeFileSync('.env.development', envDevelopmentCode);
    console.log('‚úÖ Arquivos de configura√ß√£o de ambiente criados!');

    // PASSO 5: SCRIPT DE TESTE DE CONFIGURA√á√ÉO
    console.log('\nüìã 5. Criando script de teste de configura√ß√£o...');
    
    const testConfigScript = `
// ========================================
// TESTE DE CONFIGURA√á√ÉO DE AMBIENTE
// ========================================

import { validateEnvironment, getEnvironmentConfig, isProduction, isDevelopment } from './src/config/environment.js';
import { runHealthCheck } from './scripts/health-check.js';
import dotenv from 'dotenv';

dotenv.config();

async function testEnvironmentConfiguration() {
  console.log('üîß Testando Configura√ß√£o de Ambiente...\\n');
  
  try {
    // Teste 1: Validar vari√°veis de ambiente
    console.log('üìã 1. Validando vari√°veis de ambiente...');
    validateEnvironment();
    console.log('‚úÖ Vari√°veis de ambiente validadas');
    
    // Teste 2: Verificar configura√ß√£o
    console.log('\\nüìã 2. Verificando configura√ß√£o...');
    const config = getEnvironmentConfig();
    console.log('‚úÖ Configura√ß√£o carregada:');
    console.log('- Ambiente:', config.nodeEnv);
    console.log('- Porta:', config.port);
    console.log('- Supabase URL:', config.supabase.url ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('- OpenAI API Key:', config.openai.apiKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('- WhatsApp Access Token:', config.whatsapp.accessToken ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('- WhatsApp Phone Number ID:', config.whatsapp.phoneNumberId ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    
    // Teste 3: Verificar ambiente
    console.log('\\nüìã 3. Verificando ambiente...');
    console.log('- √â produ√ß√£o?', isProduction());
    console.log('- √â desenvolvimento?', isDevelopment());
    
    // Teste 4: Executar health check
    console.log('\\nüìã 4. Executando health check...');
    const healthCheckResult = await runHealthCheck();
    
    if (healthCheckResult) {
      console.log('\\nüéâ CONFIGURA√á√ÉO DE AMBIENTE FUNCIONANDO PERFEITAMENTE!');
      console.log('‚úÖ Todas as valida√ß√µes passaram');
      console.log('üöÄ Sistema pronto para uso');
    } else {
      console.log('\\n‚ö†Ô∏è  CONFIGURA√á√ÉO DE AMBIENTE COM PROBLEMAS!');
      console.log('‚ùå Algumas valida√ß√µes falharam');
      console.log('üîß Corrija os problemas antes de usar');
    }
    
  } catch (error) {
    console.error('üí• ERRO CR√çTICO na configura√ß√£o:', error.message);
    console.log('üîß Verifique as vari√°veis de ambiente');
  }
}

// Executar teste
testEnvironmentConfiguration().catch(console.error);
`;

    fs.writeFileSync('test-environment-configuration.js', testConfigScript);
    console.log('‚úÖ Script de teste de configura√ß√£o criado!');

    console.log('\nüéâ CORRE√á√ÉO DA CONFIGURA√á√ÉO DE AMBIENTE PRODU√á√ÉO CONCLU√çDA!');
    console.log('‚úÖ Configura√ß√£o de ambiente criada');
    console.log('‚úÖ Script de verifica√ß√£o de sistema criado');
    console.log('‚úÖ Configura√ß√£o de logs por ambiente criada');
    console.log('‚úÖ Arquivos de configura√ß√£o criados');
    console.log('‚úÖ Script de teste criado');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Configure as vari√°veis de ambiente reais');
    console.log('2. Execute: node test-environment-configuration.js');
    console.log('3. Execute: node scripts/health-check.js');
    console.log('4. Teste o sistema em produ√ß√£o');

  } catch (error) {
    console.error('üí• ERRO CR√çTICO na corre√ß√£o da configura√ß√£o:', error);
    throw error;
  }
}

// Executar corre√ß√£o
fixEnvironmentProduction().catch(console.error); 