// ========================================
// TESTE DE SUBMISS√ÉO DO FORMUL√ÅRIO
// ========================================

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o necess√°rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFormSubmission() {
  try {
    console.log('üöÄ Testando submiss√£o do formul√°rio...');

    // Simular dados do formul√°rio
    const formData = {
      name: 'Cl√≠nica Teste Formul√°rio',
      whatsapp_phone: '554730915628',
      contextualization_json: {
        clinica: {
          informacoes_basicas: {
            nome: 'Cl√≠nica Teste Formul√°rio',
            especialidade_principal: 'Cardiologia'
          }
        }
      },
      has_contextualization: true,
      simulation_mode: true
    };

    console.log('üìù Dados do formul√°rio:', formData);

    // Testar cria√ß√£o
    console.log('üîÑ Testando cria√ß√£o...');
    const { data: createData, error: createError } = await supabase
      .from('clinics')
      .insert([formData])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå Erro na cria√ß√£o:', createError);
      return;
    }

    console.log('‚úÖ Cl√≠nica criada:', createData.id);

    // Testar atualiza√ß√£o
    console.log('üîÑ Testando atualiza√ß√£o...');
    const updateData = {
      ...formData,
      name: 'Cl√≠nica Teste Atualizada',
      simulation_mode: false
    };

    const { data: updateResult, error: updateError } = await supabase
      .from('clinics')
      .update(updateData)
      .eq('id', createData.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erro na atualiza√ß√£o:', updateError);
    } else {
      console.log('‚úÖ Cl√≠nica atualizada:', updateResult.name);
      console.log('‚úÖ simulation_mode:', updateResult.simulation_mode);
    }

    // Verificar se todos os campos foram salvos
    console.log('üîç Verificando campos salvos:');
    console.log('- name:', updateResult.name);
    console.log('- whatsapp_phone:', updateResult.whatsapp_phone);
    console.log('- contextualization_json:', updateResult.contextualization_json);
    console.log('- has_contextualization:', updateResult.has_contextualization);
    console.log('- simulation_mode:', updateResult.simulation_mode);

    // Limpar dados de teste
    const { error: deleteError } = await supabase
      .from('clinics')
      .delete()
      .eq('id', createData.id);

    if (deleteError) {
      console.error('‚ö†Ô∏è  Erro ao limpar dados de teste:', deleteError);
    } else {
      console.log('üßπ Dados de teste removidos');
    }

    console.log('‚úÖ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar teste
testFormSubmission(); 