
import { openAIApiKey } from './config.ts';
import { LiaPersonality } from './lia-personality.ts';
import { MCPToolsProcessor } from './mcp-tools.ts';

// Fun√ß√£o utilit√°ria para verificar se deve responder rapidamente
function shouldRespondQuickly(message: string, recentMessages: any[]): boolean {
  const lowerMessage = message.toLowerCase();
  
  // Respostas r√°pidas para mensagens simples
  const quickResponseTriggers = [
    'oi', 'ol√°', 'hi', 'hello',
    'agend', 'consulta', 'marcar',
    'psicolog', 'cardio', 'dermat',
    'obrigad', 'valeu', 'ok'
  ];
  
  return quickResponseTriggers.some(trigger => lowerMessage.includes(trigger));
}

export async function generateEnhancedAIResponse(
  contextData: any[],
  recentMessages: any[],
  message: string,
  phoneNumber: string,
  userIntent?: any,
  supabase?: any
): Promise<string> {
  console.log('ü§ñ === GERA√á√ÉO DE RESPOSTA IA HUMANIZADA (LIA) ===');
  console.log(`üìû N√∫mero: ${phoneNumber}`);
  console.log(`üí¨ Mensagem: ${message}`);
  
  if (!openAIApiKey) {
    console.error('‚ùå OPENAI_API_KEY n√£o configurada');
    return LiaPersonality.getFallbackResponse();
  }

  try {
    // Verificar se √© primeira mensagem baseado no hist√≥rico real
    const isFirstContact = !recentMessages || recentMessages.length === 0 || 
                          recentMessages.every(msg => msg.message_type === 'received');
    console.log(`üëã Primeiro contato: ${isFirstContact ? 'SIM' : 'N√ÉO'}`);

    // Se √© primeiro contato, responder diretamente com sauda√ß√£o
    if (isFirstContact) {
      console.log('üéØ Retornando sauda√ß√£o inicial da Lia...');
      return LiaPersonality.getGreetingMessage();
    }

    // Analisar hist√≥rico para evitar repeti√ß√µes
    const lastBotMessages = recentMessages
      .filter(msg => msg.message_type === 'sent')
      .slice(0, 3)
      .map(msg => msg.content);

    // Verificar se √© agendamento e usar MCP se necess√°rio
    const isAppointmentRequest = message.toLowerCase().includes('agend') || 
                                message.toLowerCase().includes('consulta') || 
                                message.toLowerCase().includes('marcar');

    // Gerar prompt contextual da Lia com hist√≥rico
    const conversationContext = recentMessages.slice(-6).map(msg => 
      `${msg.message_type === 'received' ? 'Usu√°rio' : 'Lia'}: ${msg.content}`
    ).join('\n');

    const liaPrompt = `Voc√™ √© a Lia, assistente virtual da cl√≠nica m√©dica. 

PERSONALIDADE:
- Natural, emp√°tica e acolhedora como uma secret√°ria experiente
- Conversa de forma fluida sem robotiza√ß√£o
- S√≥ se desculpa quando realmente houve demora ou problema
- Mant√©m continuidade na conversa

CONTEXTO DA CONVERSA:
${conversationContext}

MENSAGEM ATUAL: ${message}

INSTRU√á√ïES:
- Continue a conversa de forma natural baseada no contexto
- ${isAppointmentRequest ? 'IMPORTANTE: Esta mensagem √© sobre agendamento. Use as ferramentas dispon√≠veis para verificar disponibilidade e agendar.' : ''}
- N√£o repita informa√ß√µes j√° ditas
- Seja espec√≠fica e √∫til
- Use emojis moderadamente (üòä, üíô, üìÖ)
- N√ÉO pe√ßa desculpas desnecessariamente`;

    // Configura√ß√£o da chamada OpenAI com ferramentas MCP
    const openAIPayload = {
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: liaPrompt
        },
        {
          role: "user", 
          content: message
        }
      ],
      tools: MCPToolsProcessor.getMCPTools(),
      tool_choice: isAppointmentRequest ? "auto" : "none",
      max_tokens: 300,
      temperature: 0.8,
      presence_penalty: 0.3,
      frequency_penalty: 0.4
    };

    console.log('üì§ Enviando para OpenAI com personalidade Lia...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(openAIPayload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erro OpenAI (${response.status}):`, errorText);
      return LiaPersonality.getFollowUpResponse(message);
    }

    const result = await response.json();
    console.log('üì• Resposta OpenAI recebida');

    if (!result.choices || result.choices.length === 0) {
      console.error('‚ùå Resposta OpenAI vazia');
      return LiaPersonality.getFollowUpResponse(message);
    }

    const choice = result.choices[0];
    let finalResponse = '';

    // Processar tool calls se houver (usando supabase real)
    if (choice.message?.tool_calls && choice.message.tool_calls.length > 0 && supabase) {
      console.log('üîß Processando tool calls com Supabase real...');
      const toolCall = choice.message.tool_calls[0];
      
      const toolResult = await MCPToolsProcessor.processToolCall(
        toolCall.function.name,
        JSON.parse(toolCall.function.arguments || '{}'),
        supabase
      );
      
      finalResponse = toolResult;
    } else {
      finalResponse = choice.message?.content || '';
    }

    if (!finalResponse || finalResponse.trim().length === 0) {
      console.log('‚ö†Ô∏è Resposta vazia, usando fallback da Lia');
      return LiaPersonality.getFollowUpResponse(message);
    }

    // Verificar se est√° repetindo resposta anterior
    if (lastBotMessages.some(lastMsg => 
        lastMsg && finalResponse.includes(lastMsg.substring(0, 50)))) {
      console.log('üîÑ Detectada repeti√ß√£o, variando resposta...');
      finalResponse = LiaPersonality.generateVariedResponse(finalResponse, message);
    }

    console.log('‚úÖ Resposta final da Lia:', finalResponse);
    return finalResponse;

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico na gera√ß√£o de resposta:', error);
    return LiaPersonality.getFollowUpResponse(message);
  }
}

// Fun√ß√£o para validar resposta da Lia
export function validateLiaResponse(response: string): boolean {
  if (!response || response.trim().length === 0) {
    return false;
  }
  
  // Verificar se n√£o cont√©m termos t√©cnicos ou de IA
  const forbiddenTerms = ['ia', 'artificial', 'bot', 'sistema', 'algoritmo', 'programada'];
  const lowerResponse = response.toLowerCase();
  
  for (const term of forbiddenTerms) {
    if (lowerResponse.includes(term)) {
      console.log(`‚ö†Ô∏è Resposta cont√©m termo proibido: ${term}`);
      return false;
    }
  }
  
  return true;
}
