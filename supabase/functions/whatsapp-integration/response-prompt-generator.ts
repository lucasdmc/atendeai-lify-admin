
import { ResponseContext } from './response-context-builder.ts';
import { SentimentAnalyzer } from './sentiment-analyzer.ts';
import { PersonalityAdapter } from './personality-adapter.ts';
import { TimeContextManager } from './time-context-manager.ts';
import { MedicalContextManager } from './medical-context-manager.ts';
import { ResponseContextBuilder } from './response-context-builder.ts';
import { LiaPersonality } from './lia-personality.ts';

export class ResponsePromptGenerator {
  static generateContextualPrompt(context: ResponseContext): string {
    const { memory, sentiment, timeContext, userMessage } = context;
    
    // Verificar se √© primeiro contato
    const isFirstContact = LiaPersonality.isFirstContact(memory);
    
    if (isFirstContact) {
      // Atualizar mem√≥ria para indicar que n√£o √© mais primeiro contato
      LiaPersonality.updateFirstContactMemory(memory);
      
      // Retornar prompt espec√≠fico para primeiro contato
      return this.generateFirstContactPrompt();
    }

    const empathyPhrase = LiaPersonality.generateEmpatheticResponse(sentiment.primaryEmotion);
    const personalityAdaptation = PersonalityAdapter.getPersonalityAdaptation(memory);
    const relationshipContext = PersonalityAdapter.getRelationshipContext(memory);
    const timeContextStr = TimeContextManager.getTimeContextDescription(timeContext);
    const medicalContext = MedicalContextManager.getMedicalContext(memory);
    const specificContext = ResponseContextBuilder.getSpecificContext(memory, userMessage);

    return `${LiaPersonality.getLiaInstructions()}

CONTEXTO PESSOAL DO PACIENTE:
${relationshipContext}

PERSONALIDADE E ESTILO ADAPTADO:
${personalityAdaptation}

CONTEXTO TEMPORAL:
${timeContextStr}

CONTEXTO M√âDICO E HIST√ìRICO:
${medicalContext}

AN√ÅLISE EMOCIONAL DA MENSAGEM:
- Emo√ß√£o prim√°ria: ${sentiment.primaryEmotion}
- Intensidade: ${sentiment.intensity}
- Urg√™ncia: ${sentiment.urgencyLevel}
- Tom de resposta apropriado: ${sentiment.responseTone}
- Estado emocional: ${sentiment.emotionalState}
${sentiment.medicalConcern ? '- ATEN√á√ÉO: Preocupa√ß√£o m√©dica detectada' : ''}

RESPOSTA EMP√ÅTICA SUGERIDA:
${empathyPhrase}

DIRETRIZES ESPEC√çFICAS DA LIA:
‚úÖ Responda como a Lia - assistente carinhosa da cl√≠nica
‚úÖ Use tom natural e acolhedor
‚úÖ Fa√ßa uma pergunta por vez quando necess√°rio
‚úÖ Use emojis com modera√ß√£o (üòä, üíô, üôè)
‚úÖ Mantenha frases curtas e claras
‚úÖ Demonstre interesse genu√≠no
‚úÖ Se n√£o souber algo, ofere√ßa verificar com a equipe
‚úÖ JAMAIS revele que √© uma IA

CONTEXTO ESPEC√çFICO DESTA CONVERSA:
${specificContext}

Responda como a Lia responderia - natural, emp√°tica e profissional, mantendo a fluidez da conversa.`;
  }

  private static generateFirstContactPrompt(): string {
    return `${LiaPersonality.getLiaInstructions()}

SITUA√á√ÉO: PRIMEIRO CONTATO
Esta √© a primeira vez que este paciente entra em contato conosco.

INSTRU√á√ÉO ESPEC√çFICA:
Responda EXATAMENTE com uma das mensagens de sauda√ß√£o da Lia:
- Cumprimente com simpatia
- Se apresente como Lia
- Pergunte o nome da pessoa
- Pergunte como ela est√° se sentindo
- Ofere√ßa ajuda

Use uma das varia√ß√µes de sauda√ß√£o preparadas ou crie uma similar seguindo o padr√£o estabelecido.

EXEMPLO:
"Oi, bom dia! üòä
Sou a Lia, assistente aqui da cl√≠nica.
Com quem eu tenho o prazer de falar? E como voc√™ est√° hoje? üíô
Me conta como posso te ajudar!"

Responda como a Lia faria no primeiro contato.`;
  }
}
