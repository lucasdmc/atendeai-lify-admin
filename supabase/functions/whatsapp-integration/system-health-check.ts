
// Verifica√ß√£o de sa√∫de do sistema de conversa√ß√£o
export class SystemHealthCheck {
  static async runHealthCheck(): Promise<void> {
    console.log('ü©∫ === VERIFICA√á√ÉO DE SA√öDE DO SISTEMA ===');
    
    const checks = [];
    
    // 1. Testar importa√ß√µes cr√≠ticas
    try {
      const { generateEnhancedAIResponse } = await import('./enhanced-openai-service.ts');
      const { LiaPersonality } = await import('./lia-personality.ts');
      const { ErrorRecoverySystem } = await import('./error-recovery-system.ts');
      
      checks.push({ name: 'Importa√ß√µes cr√≠ticas', status: 'OK' });
    } catch (error) {
      checks.push({ name: 'Importa√ß√µes cr√≠ticas', status: 'ERRO', details: error.message });
    }
    
    // 2. Testar gera√ß√£o de sauda√ß√£o da Lia
    try {
      const { LiaPersonality } = await import('./lia-personality.ts');
      const greeting = LiaPersonality.getGreetingMessage();
      
      if (greeting && greeting.includes('Lia') && greeting.includes('üòä')) {
        checks.push({ name: 'Sauda√ß√£o da Lia', status: 'OK' });
      } else {
        checks.push({ name: 'Sauda√ß√£o da Lia', status: 'ERRO', details: 'Sauda√ß√£o inv√°lida' });
      }
    } catch (error) {
      checks.push({ name: 'Sauda√ß√£o da Lia', status: 'ERRO', details: error.message });
    }
    
    // 3. Testar sistema de recupera√ß√£o de erros
    try {
      const { ErrorRecoverySystem } = await import('./error-recovery-system.ts');
      const fallback = await ErrorRecoverySystem.generateFallbackResponse('teste', []);
      
      if (fallback && fallback.length > 20 && (fallback.includes('üòä') || fallback.includes('üíô'))) {
        checks.push({ name: 'Sistema de recupera√ß√£o', status: 'OK' });
      } else {
        checks.push({ name: 'Sistema de recupera√ß√£o', status: 'ERRO', details: 'Fallback inv√°lido' });
      }
    } catch (error) {
      checks.push({ name: 'Sistema de recupera√ß√£o', status: 'ERRO', details: error.message });
    }
    
    // 4. Testar resposta simples
    try {
      const { generateEnhancedAIResponse } = await import('./enhanced-openai-service.ts');
      const response = await generateEnhancedAIResponse([], [], 'oi', 'test@test.com');
      
      if (response && response.length > 20 && !response.toLowerCase().includes('problema t√©cnico')) {
        checks.push({ name: 'Resposta simples', status: 'OK' });
      } else {
        checks.push({ name: 'Resposta simples', status: 'ERRO', details: 'Resposta problem√°tica' });
      }
    } catch (error) {
      checks.push({ name: 'Resposta simples', status: 'ERRO', details: error.message });
    }
    
    // Relat√≥rio
    console.log('\nüìä RESULTADO DA VERIFICA√á√ÉO:');
    let totalOK = 0;
    let totalErros = 0;
    
    checks.forEach((check, index) => {
      if (check.status === 'OK') {
        console.log(`‚úÖ ${index + 1}. ${check.name}: ${check.status}`);
        totalOK++;
      } else {
        console.log(`‚ùå ${index + 1}. ${check.name}: ${check.status}`);
        if (check.details) {
          console.log(`   Detalhes: ${check.details}`);
        }
        totalErros++;
      }
    });
    
    console.log(`\nüéØ RESUMO: ${totalOK} OK | ${totalErros} ERROS`);
    
    if (totalErros === 0) {
      console.log('üéâ SISTEMA SAUD√ÅVEL! Pronto para conversas fluidas.');
    } else {
      console.log('‚ö†Ô∏è SISTEMA PRECISA DE ATEN√á√ÉO. Verificar erros acima.');
    }
  }
}

// Executar verifica√ß√£o automaticamente
SystemHealthCheck.runHealthCheck();
