
// Arquivo de simula√ß√£o de conversas para testes
export class ConversationTester {
  static async simulateConversations() {
    console.log('üß™ === INICIANDO SIMULA√á√ÉO DE CONVERSAS ===');
    
    const testScenarios = [
      {
        name: 'Primeira conversa - Sauda√ß√£o',
        messages: ['Ol√°', 'Oi, como vai?', 'Bom dia']
      },
      {
        name: 'Agendamento simples',
        messages: ['Gostaria de agendar uma consulta', 'Preciso marcar com cardiologista', 'Quero agendar para amanh√£']
      },
      {
        name: 'Urg√™ncia m√©dica',
        messages: ['Estou com dor muito forte!', '√â urgente, preciso de ajuda', 'N√£o aguento mais essa dor']
      },
      {
        name: 'Preocupa√ß√£o e ansiedade',
        messages: ['Estou muito preocupado com meus sintomas', 'Tenho medo que seja algo grave', 'Estou ansioso com o resultado']
      },
      {
        name: 'Satisfa√ß√£o',
        messages: ['Muito obrigado pela ajuda!', 'Excelente atendimento', 'Adorei o cuidado da equipe']
      }
    ];

    for (const scenario of testScenarios) {
      console.log(`\nüìã Testando: ${scenario.name}`);
      
      for (let i = 0; i < scenario.messages.length; i++) {
        const message = scenario.messages[i];
        console.log(`\nüë§ Usu√°rio: "${message}"`);
        
        try {
          // Simular processamento da mensagem
          const phoneNumber = `5511999${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}@s.whatsapp.net`;
          
          // Testar an√°lise de sentimento
          const { SentimentAnalyzer } = await import('./sentiment-analyzer.ts');
          const sentiment = SentimentAnalyzer.analyzeSentiment(message);
          console.log(`üé≠ Sentimento: ${sentiment.primaryEmotion} (${sentiment.intensity})`);
          console.log(`‚ö° Urg√™ncia: ${sentiment.urgencyLevel}`);
          console.log(`üí¨ Tom de resposta: ${sentiment.responseTone}`);
          
          // Testar carregamento de mem√≥ria
          const { ConversationMemoryManager } = await import('./conversation-memory.ts');
          const memory = ConversationMemoryManager.createDefaultMemory();
          ConversationMemoryManager.adaptPersonality(memory, message);
          console.log(`üß† Estilo adaptado: ${memory.personalityProfile.communicationStyle}`);
          
          // Testar gera√ß√£o de resposta emp√°tica
          const empathyResponse = SentimentAnalyzer.generateEmpatheticResponse(sentiment);
          console.log(`‚ù§Ô∏è Resposta emp√°tica: "${empathyResponse}"`);
          
          console.log('‚úÖ Cen√°rio processado com sucesso');
          
        } catch (error) {
          console.error(`‚ùå Erro no cen√°rio "${scenario.name}":`, error);
        }
      }
    }
    
    console.log('\nüéâ === SIMULA√á√ÉO CONCLU√çDA ===');
  }
  
  static logTestResults() {
    console.log(`
üìä RELAT√ìRIO DE TESTES DE CONVERSA√á√ÉO:

‚úÖ Componentes testados:
- SentimentAnalyzer: An√°lise de emo√ß√µes e urg√™ncia
- ConversationMemoryManager: Carregamento e adapta√ß√£o de mem√≥ria
- PersonalityAdapter: Adapta√ß√£o de estilo de comunica√ß√£o
- ResponsePromptGenerator: Gera√ß√£o de prompts contextuais

üéØ Cen√°rios cobertos:
- Sauda√ß√µes iniciais
- Solicita√ß√µes de agendamento
- Situa√ß√µes de urg√™ncia m√©dica
- Estados de ansiedade e preocupa√ß√£o
- Express√µes de satisfa√ß√£o

üîß Melhorias implementadas:
- An√°lise aprimorada de sentimentos
- Adapta√ß√£o din√¢mica de personalidade
- Mem√≥ria conversacional estruturada
- Gera√ß√£o de respostas emp√°ticas
- Tratamento robusto de erros
    `);
  }
}
