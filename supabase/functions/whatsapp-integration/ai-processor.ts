
import { sendMessageWithRetry } from './message-retry.ts';
import { detectAndHandleLoop } from './loop-detection.ts';
import { detectHumanRequest, escalateToHumanImmediately } from './human-request-detector.ts';
import { 
  fetchConversationData, 
  fetchContextData, 
  fetchConversationHistory, 
  checkIfEscalated
} from './conversation-handler.ts';
import { handleEscalatedConversation } from './escalation-handler.ts';
import { processMessageResponse } from './response-processor.ts';
import { handleProcessingError } from './error-handler.ts';

export async function processAndRespondWithAI(phoneNumber: string, message: string, supabase: any) {
  console.log(`ðŸ¤– === PROCESSAMENTO IA INICIADO ===`);
  console.log(`ðŸ“ž NÃºmero: ${phoneNumber}`);
  console.log(`ðŸ’¬ Mensagem: ${message}`);
  
  try {
    // Buscar dados da conversa
    const conversationData = await fetchConversationData(phoneNumber, supabase);
    const conversationId = conversationData.id;

    // Verificar se jÃ¡ estÃ¡ escalado para humano
    if (checkIfEscalated(conversationData)) {
      await handleEscalatedConversation(phoneNumber, supabase);
      return;
    }

    // NOVO: Verificar se usuÃ¡rio estÃ¡ pedindo para falar com humano
    if (detectHumanRequest(message)) {
      console.log('ðŸ‘¤ UsuÃ¡rio solicitou falar com humano - escalando imediatamente');
      
      await escalateToHumanImmediately(
        conversationId, 
        'UsuÃ¡rio solicitou atendimento humano', 
        supabase
      );
      
      const humanMessage = `Entendi que vocÃª gostaria de falar com um atendente humano. Sua conversa foi transferida para nossa equipe de atendimento.

Nossa equipe entrarÃ¡ em contato em breve. Para urgÃªncias, entre em contato pelo telefone da clÃ­nica: (47) 99967-2901.`;

      await sendMessageWithRetry(phoneNumber, humanMessage, supabase);
      return;
    }

    // Buscar contexto da clÃ­nica
    const contextData = await fetchContextData(supabase);

    // Buscar histÃ³rico recente da conversa
    const recentMessages = await fetchConversationHistory(conversationId, supabase);

    // Processar resposta (agendamento ou IA)
    const aiResponse = await processMessageResponse(message, phoneNumber, contextData, recentMessages, supabase);

    // SISTEMA ANTI-LOOP: Verificar loops antes de enviar
    console.log('ðŸ”„ Verificando loops...');
    const loopResult = await detectAndHandleLoop(conversationId, aiResponse, supabase);
    
    if (loopResult.shouldEscalate) {
      console.log('ðŸ†˜ Conversa escalada devido a loop');
      await sendMessageWithRetry(phoneNumber, loopResult.finalResponse, supabase);
      return;
    }

    const finalResponse = loopResult.alternativeResponse || aiResponse;
    console.log('ðŸ’¬ Resposta final:', finalResponse.substring(0, 100) + '...');

    // Enviar resposta de volta via WhatsApp com retry
    console.log('ðŸ“¤ Enviando resposta via WhatsApp...');
    await sendMessageWithRetry(phoneNumber, finalResponse, supabase);
    console.log(`âœ… Resposta automÃ¡tica enviada para ${phoneNumber}`);
    
  } catch (error) {
    await handleProcessingError(phoneNumber, error, supabase);
  }
}
