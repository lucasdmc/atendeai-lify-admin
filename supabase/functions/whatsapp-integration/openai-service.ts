
import { openAIApiKey } from './config.ts';
import { ConversationContextManager } from './conversation-context.ts';
import { NaturalResponseGenerator } from './natural-responses.ts';

interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export async function generateAIResponse(
  contextData: any[], 
  recentMessages: any[], 
  currentMessage: string,
  phoneNumber: string,
  personalizationContext?: string,
  userIntent?: any
): Promise<string> {
  console.log(`ü§ñ Gerando resposta da IA para: ${phoneNumber}`);
  
  // Gerenciar contexto da conversa
  const context = ConversationContextManager.getContext(phoneNumber);
  const shouldGreet = ConversationContextManager.shouldGreet(phoneNumber);
  
  // Analisar contexto hist√≥rico da conversa
  const conversationAnalysis = ConversationContextManager.analyzeConversationContext(phoneNumber);
  
  console.log(`üéØ Inten√ß√£o: ${userIntent?.primary}, Confian√ßa: ${userIntent?.confidence}, Deve cumprimentar: ${shouldGreet}`);
  console.log(`üìä An√°lise da conversa:`, conversationAnalysis);
  
  // Adicionar mensagem do usu√°rio ao hist√≥rico
  ConversationContextManager.addToHistory(phoneNumber, currentMessage, 'user', userIntent?.primary);
  
  // Atualizar contexto
  ConversationContextManager.updateContext(phoneNumber, {
    lastUserIntent: userIntent?.primary,
    conversationStage: userIntent?.primary === 'scheduling' ? 'scheduling' : 
                      userIntent?.primary === 'greeting' ? 'information' : context.conversationStage
  });

  // Se √© uma sauda√ß√£o mas j√° cumprimentou, n√£o repetir
  if (userIntent?.primary === 'greeting' && !shouldGreet) {
    ConversationContextManager.markAsGreeted(phoneNumber);
    return NaturalResponseGenerator.generateContextualResponse('general', context.conversationStage);
  }

  // Construir prompt mais contextual e personalizado
  let systemPrompt = `Voc√™ √© uma assistente virtual especializada em atendimento de cl√≠nica m√©dica. Seja natural, emp√°tica e mantenha sempre o foco na sa√∫de e bem-estar dos pacientes.

CONTEXTO DA CL√çNICA:`;

  if (contextData && contextData.length > 0) {
    contextData.forEach((item) => {
      if (item.answer) {
        systemPrompt += `\n‚Ä¢ ${item.question}: ${item.answer}`;
      }
    });
  } else {
    systemPrompt += `\n‚Ä¢ Somos uma cl√≠nica m√©dica focada no cuidado e bem-estar dos pacientes.`;
  }

  // Adicionar personaliza√ß√£o
  if (personalizationContext) {
    systemPrompt += `\n\nPERSONALIZA√á√ÉO DO USU√ÅRIO:
${personalizationContext}`;
  }

  systemPrompt += `\n\nCOMPORTAMENTO E PERSONALIDADE:
‚úÖ Seja uma atendente profissional de cl√≠nica m√©dica
‚úÖ Mantenha tom acolhedor e emp√°tico 
‚úÖ Use linguagem clara e acess√≠vel sobre sa√∫de
‚úÖ Seja proativa em oferecer ajuda m√©dica
‚úÖ Respostas concisas e relevantes (2-3 linhas m√°ximo)
‚úÖ Use emojis relacionados √† sa√∫de moderadamente (ü©∫üë©‚Äç‚öïÔ∏èüìÖüíä)
‚úÖ N√£o repita informa√ß√µes j√° mencionadas
‚úÖ Continue conversas naturalmente baseado no hist√≥rico
‚úÖ Valide dados fornecidos pelo usu√°rio
‚úÖ Ofere√ßa sugest√µes quando necess√°rio

AGENDAMENTOS M√âDICOS:
‚Ä¢ Para AGENDAR: colete data, hor√°rio, especialidade m√©dica e email
‚Ä¢ Para CANCELAR/REAGENDAR: identifique o agendamento primeiro
‚Ä¢ Sempre confirme detalhes m√©dicos antes de finalizar
‚Ä¢ Ofere√ßa op√ß√µes de especialidades dispon√≠veis
‚Ä¢ Valide dados inseridos (datas, hor√°rios, emails)

AN√ÅLISE DO CONTEXTO ATUAL:
‚Ä¢ Usu√°rio j√° foi cumprimentado: ${context.hasGreeted ? 'SIM' : 'N√ÉO'}
‚Ä¢ Est√°gio da conversa: ${context.conversationStage}
‚Ä¢ Fluxo da conversa: ${conversationAnalysis.conversationFlow}
‚Ä¢ Contexto de agendamento: ${conversationAnalysis.hasAppointmentContext ? 'SIM' : 'N√ÉO'}
‚Ä¢ √öltima inten√ß√£o: ${context.lastUserIntent}`;

  // Adicionar an√°lise de inten√ß√£o se dispon√≠vel
  if (userIntent) {
    systemPrompt += `\n‚Ä¢ Inten√ß√£o atual: ${userIntent.primary} (confian√ßa: ${userIntent.confidence})`;
    
    if (userIntent.entities && Object.keys(userIntent.entities).length > 0) {
      systemPrompt += `\n‚Ä¢ Entidades detectadas: ${JSON.stringify(userIntent.entities)}`;
    }
  }

  // Se h√° contexto de agendamento, adicionar ao prompt
  if (conversationAnalysis.hasAppointmentContext) {
    systemPrompt += `\n‚Ä¢ IMPORTANTE: Esta conversa j√° tem contexto de agendamento m√©dico ativo`;
  }

  // Se h√° men√ß√µes anteriores importantes, incluir
  if (conversationAnalysis.userMentions.length > 0) {
    systemPrompt += `\n‚Ä¢ Men√ß√µes recentes do paciente: ${conversationAnalysis.userMentions.slice(-3).join(', ')}`;
  }

  systemPrompt += `\n\nINSTRU√á√ïES CR√çTICAS:
‚Ä¢ N√ÉO repita informa√ß√µes j√° ditas na conversa
‚Ä¢ N√ÉO cumprimente novamente se j√° cumprimentou
‚Ä¢ Continue a conversa de forma natural baseada no hist√≥rico
‚Ä¢ Responda progressivamente, construindo sobre o que j√° foi discutido
‚Ä¢ Mantenha sempre o foco na √°rea da sa√∫de e medicina
‚Ä¢ Valide sempre os dados fornecidos pelo usu√°rio
‚Ä¢ Ofere√ßa alternativas quando algo n√£o for poss√≠vel
‚Ä¢ Seja emp√°tica com problemas de sa√∫de`;

  // Construir hist√≥rico inteligente
  const messages: ChatMessage[] = [{ role: 'system', content: systemPrompt }];

  // Priorizar hist√≥rico do contexto local (mais recente e estruturado)
  const localHistory = ConversationContextManager.getRecentHistory(phoneNumber, 8);
  
  if (localHistory.length > 0) {
    console.log(`üí≠ Usando hist√≥rico local: ${localHistory.length} mensagens`);
    localHistory.forEach((msg) => {
      if (msg.content && msg.content.length > 0) {
        messages.push({
          role: msg.type === 'user' ? 'user' : 'assistant',
          content: msg.content
        });
      }
    });
  } else if (recentMessages && recentMessages.length > 0) {
    // Fallback para mensagens do banco se n√£o houver hist√≥rico local
    console.log(`üí≠ Usando hist√≥rico do banco: ${recentMessages.length} mensagens`);
    const relevantMessages = recentMessages
      .reverse()
      .slice(0, 6)
      .filter(msg => msg.content && msg.content.length > 0 && msg.content !== currentMessage);
    
    relevantMessages.forEach((msg) => {
      messages.push({
        role: msg.message_type === 'received' ? 'user' : 'assistant',
        content: msg.content
      });
    });
  }

  // Adicionar mensagem atual (se n√£o estiver j√° no hist√≥rico)
  if (!localHistory.some(msg => msg.content === currentMessage)) {
    messages.push({ role: 'user', content: currentMessage });
  }

  console.log(`üí≠ Total de mensagens no contexto: ${messages.length}`);

  let aiResponse = '';
  
  if (openAIApiKey) {
    try {
      console.log('üîÑ Chamando OpenAI API...');
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: messages,
          temperature: 0.7,
          max_tokens: 150,
          presence_penalty: 0.9, // Aumentar para evitar repeti√ß√µes
          frequency_penalty: 0.8,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        aiResponse = data.choices[0].message.content;
        console.log('‚úÖ Resposta IA gerada');
      } else {
        console.error('‚ùå Erro na OpenAI API:', response.status);
        aiResponse = NaturalResponseGenerator.generateErrorResponse();
      }
    } catch (error) {
      console.error('‚ùå Erro ao chamar OpenAI:', error);
      aiResponse = NaturalResponseGenerator.generateErrorResponse();
    }
  } else {
    console.log('‚ö†Ô∏è OpenAI Key n√£o configurada, usando respostas padr√£o');
    
    if (userIntent?.primary === 'greeting' && shouldGreet) {
      aiResponse = NaturalResponseGenerator.generateGreeting(undefined, shouldGreet);
      ConversationContextManager.markAsGreeted(phoneNumber);
    } else if (userIntent?.primary === 'scheduling') {
      aiResponse = NaturalResponseGenerator.generateSchedulingHelp(!context.hasGreeted);
    } else {
      aiResponse = NaturalResponseGenerator.generateContextualResponse(userIntent?.primary || 'general', context.conversationStage);
    }
  }

  // Verificar repeti√ß√µes antes de retornar
  const isRepetitive = ConversationContextManager.checkForRepetition(phoneNumber, aiResponse);
  if (isRepetitive) {
    console.log('üîÑ Repeti√ß√£o detectada, gerando varia√ß√£o...');
    aiResponse = ConversationContextManager.generateVariedResponse(phoneNumber, aiResponse);
  }

  // Marcar como cumprimentado se foi uma sauda√ß√£o
  if (userIntent?.primary === 'greeting') {
    ConversationContextManager.markAsGreeted(phoneNumber);
  }

  console.log(`üí¨ Resposta final: ${aiResponse.substring(0, 100)}...`);
  return aiResponse;
}
