
export class LiaPersonality {
  static getGreetingMessage(): string {
    const greetings = [
      "Oi! ğŸ˜Š\nSou a Lia, assistente aqui da clÃ­nica.\nCom quem tenho o prazer de falar?\nEm que posso te ajudar hoje? ğŸ’™",
      "OlÃ¡! Que bom ter vocÃª aqui! ğŸ˜Š\nEu sou a Lia, da equipe da clÃ­nica.\nQual seu nome?\nComo posso te ajudar? ğŸ’™",
      "Oi! Seja bem-vindo(a)! ğŸ˜Š\nSou a Lia, assistente da clÃ­nica.\nMe conta seu nome e como posso te ajudar? ğŸ’™"
    ];
    
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  static getFollowUpResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    // Respostas especÃ­ficas baseadas no contexto
    if (lowerMessage.includes('agend') || lowerMessage.includes('consulta') || lowerMessage.includes('marcar')) {
      return `Perfeito! Vou te ajudar com o agendamento ğŸ˜Š\nPara qual especialidade vocÃª precisa?\nQual data seria melhor? ğŸ’™`;
    }
    
    if (lowerMessage.includes('psicolog')) {
      return `Ã“tima escolha! Psicologia Ã© muito importante ğŸ˜Š\nQual data vocÃª tem disponibilidade?\nVou verificar os horÃ¡rios disponÃ­veis! ğŸ’™`;
    }

    if (lowerMessage.includes('cardio')) {
      return `Cardiologia Ã© uma especialidade muito procurada! ğŸ˜Š\nQual data vocÃª prefere?\nVou verificar nossa agenda! ğŸ’™`;
    }

    if (lowerMessage.includes('dermat')) {
      return `Dermatologia! Vou te ajudar ğŸ˜Š\nQue dia seria bom para vocÃª?\nJÃ¡ verifico os horÃ¡rios! ğŸ’™`;
    }

    if (lowerMessage.includes('horario') || lowerMessage.includes('disponib')) {
      return `Vou verificar os horÃ¡rios disponÃ­veis! ğŸ˜Š\nPara que especialidade e quando vocÃª precisa? ğŸ’™`;
    }
    
    return `Entendi! ğŸ˜Š\nMe fala um pouco mais sobre o que vocÃª precisa?\nAssim posso te ajudar melhor ğŸ’™`;
  }

  static generateVariedResponse(originalResponse: string, userMessage: string): string {
    const variations = [
      "Perfeito!",
      "Ã“timo!",
      "Entendi!",
      "Certo!",
      "Claro!"
    ];
    
    const randomVariation = variations[Math.floor(Math.random() * variations.length)];
    
    // Se a resposta original comeÃ§ava com saudaÃ§Ã£o, variar
    if (originalResponse.startsWith('Oi!') || originalResponse.startsWith('OlÃ¡!')) {
      return originalResponse.replace(/^(Oi!|OlÃ¡!)/, randomVariation);
    }
    
    return `${randomVariation} ${originalResponse}`;
  }

  static isFirstContact(recentMessages: any[]): boolean {
    if (!recentMessages || recentMessages.length === 0) {
      return true;
    }

    // Verificar se sÃ³ tem mensagens recebidas (usuÃ¡rio)
    const hasAnyBotMessage = recentMessages.some(msg => msg.message_type === 'sent');
    return !hasAnyBotMessage;
  }

  static getFallbackResponse(): string {
    return `Oi! Estou aqui para te ajudar! ğŸ˜Š\nMe conta o que vocÃª precisa? ğŸ’™`;
  }
}
