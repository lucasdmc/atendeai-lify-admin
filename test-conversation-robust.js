#!/usr/bin/env node

/**
 * üß™ TESTE ROBUSTO DE CONVERSA√á√ÉO - SISTEMA WHATSAPP COMPLETO
 * 
 * Este teste simula uma conversa completa e testa TODAS as funcionalidades:
 * 
 * ‚úÖ SAUDA√á√ÉO E MEM√ìRIA:
 * - Primeira mensagem do dia (deve apresentar sauda√ß√£o)
 * - Mensagens subsequentes (N√ÉO devem apresentar sauda√ß√£o)
 * - Reconhecimento e mem√≥ria do nome do usu√°rio
 * - Verifica√ß√£o de primeira conversa do dia
 * 
 * ‚úÖ CONTEXTUALIZA√á√ÉO:
 * - Respostas baseadas no JSON da cl√≠nica
 * - Informa√ß√µes sobre exames, m√©dicos, contatos
 * - Dados espec√≠ficos da CardioPrime
 * 
 * ‚úÖ FLUXO DE CONVERSA:
 * - Detec√ß√£o de inten√ß√µes
 * - Gerenciamento de mem√≥ria
 * - Respostas personalizadas
 * 
 * ‚úÖ CASOS ESPECIAIS:
 * - Mensagens simples (Oi, Ol√°)
 * - Perguntas espec√≠ficas sobre a cl√≠nica
 * - Verifica√ß√£o de hor√°rio de funcionamento
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configurar dotenv
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Importar servi√ßos
import LLMOrchestratorService from './services/core/llmOrchestratorService.js';
import ClinicContextManager from './services/core/clinicContextManager.js';

// Configura√ß√µes de teste
const TEST_CONFIG = {
  phoneNumber: '+554730915628', // N√∫mero da CardioPrime
  clinicName: 'CardioPrime',
  testDelay: 1000, // Delay entre testes (ms)
  enableLogs: true
};

// Fun√ß√£o de log
function log(message, type = 'INFO') {
  if (TEST_CONFIG.enableLogs) {
    const timestamp = new Date().toISOString();
    const emoji = {
      'INFO': '‚ÑπÔ∏è',
      'SUCCESS': '‚úÖ',
      'ERROR': '‚ùå',
      'WARNING': '‚ö†Ô∏è',
      'TEST': 'üß™'
    }[type] || '‚ÑπÔ∏è';
    
    console.log(`${emoji} [${timestamp}] ${type}: ${message}`);
  }
}

// Fun√ß√£o de delay
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para limpar mem√≥ria antes do teste
async function clearTestMemory() {
  try {
    log('üßπ Limpando mem√≥ria de teste...', 'TEST');
    
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );
    
    // Deletar mem√≥ria de teste
    const { error } = await supabase
      .from('conversation_memory')
      .delete()
      .eq('phone_number', TEST_CONFIG.phoneNumber.replace('+', ''));
    
    if (error) {
      log(`‚ö†Ô∏è Aviso ao limpar mem√≥ria: ${error.message}`, 'WARNING');
    } else {
      log('‚úÖ Mem√≥ria de teste limpa com sucesso', 'SUCCESS');
    }
  } catch (error) {
    log(`‚ùå Erro ao limpar mem√≥ria: ${error.message}`, 'ERROR');
  }
}

// Fun√ß√£o para testar sauda√ß√£o e mem√≥ria
async function testGreetingAndMemory() {
  log('üß™ TESTE 1: Sauda√ß√£o e Mem√≥ria', 'TEST');
  
  try {
    // Teste 1.1: Primeira mensagem do dia
    log('üìù Teste 1.1: Primeira mensagem do dia', 'TEST');
    
    const firstMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Ol√°, me chamo Lucas, tudo bem?'
    };
    
    const firstResponse = await LLMOrchestratorService.processMessage(firstMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${firstMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${firstResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGreeting = firstResponse.response.includes('Ol√°') || 
                       firstResponse.response.includes('Sou o Cardio') ||
                       firstResponse.response.includes('assistente virtual da CardioPrime');
    
    if (hasGreeting) {
      log('‚úÖ Sauda√ß√£o apresentada corretamente na primeira mensagem', 'SUCCESS');
    } else {
      log('‚ùå Sauda√ß√£o N√ÉO apresentada na primeira mensagem', 'ERROR');
    }
    
    const hasName = firstResponse.response.includes('Lucas');
    if (hasName) {
      log('‚úÖ Nome do usu√°rio reconhecido e usado', 'SUCCESS');
    } else {
      log('‚ùå Nome do usu√°rio N√ÉO reconhecido', 'ERROR');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 1.2: Segunda mensagem (N√ÉO deve ter sauda√ß√£o)
    log('üìù Teste 1.2: Segunda mensagem (sem sauda√ß√£o)', 'TEST');
    
    const secondMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Oi'
    };
    
    const secondResponse = await LLMOrchestratorService.processMessage(secondMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${secondMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${secondResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGreetingSecond = secondResponse.response.includes('Ol√°') || 
                             secondResponse.response.includes('Sou o Cardio') ||
                             secondResponse.response.includes('assistente virtual da CardioPrime');
    
    if (!hasGreetingSecond) {
      log('‚úÖ Sauda√ß√£o N√ÉO apresentada na segunda mensagem (CORRETO)', 'SUCCESS');
    } else {
      log('‚ùå Sauda√ß√£o apresentada na segunda mensagem (INCORRETO)', 'ERROR');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 1.3: Terceira mensagem (N√ÉO deve ter sauda√ß√£o)
    log('üìù Teste 1.3: Terceira mensagem (sem sauda√ß√£o)', 'TEST');
    
    const thirdMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Oi'
    };
    
    const thirdResponse = await LLMOrchestratorService.processMessage(thirdMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${thirdMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${thirdResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGreetingThird = thirdResponse.response.includes('Ol√°') || 
                            thirdResponse.response.includes('Sou o Cardio') ||
                            thirdResponse.response.response.includes('assistente virtual da CardioPrime');
    
    if (!hasGreetingThird) {
      log('‚úÖ Sauda√ß√£o N√ÉO apresentada na terceira mensagem (CORRETO)', 'SUCCESS');
    } else {
      log('‚ùå Sauda√ß√£o apresentada na terceira mensagem (INCORRETO)', 'ERROR');
    }
    
    log('‚úÖ Teste 1 (Sauda√ß√£o e Mem√≥ria) conclu√≠do', 'SUCCESS');
    
  } catch (error) {
    log(`‚ùå Erro no teste 1: ${error.message}`, 'ERROR');
    throw error;
  }
}

// Fun√ß√£o para testar contextualiza√ß√£o
async function testContextualization() {
  log('üß™ TESTE 2: Contextualiza√ß√£o', 'TEST');
  
  try {
    // Teste 2.1: Pergunta sobre exames
    log('üìù Teste 2.1: Pergunta sobre exames', 'TEST');
    
    const examMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Gostaria de informa√ß√µes sobre os exames da cl√≠nica'
    };
    
    const examResponse = await LLMOrchestratorService.processMessage(examMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${examMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${examResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGenericResponse = examResponse.response.includes('N√£o disponho de informa√ß√µes espec√≠ficas') ||
                             examResponse.response.includes('n√£o tenho informa√ß√µes espec√≠ficas') ||
                             examResponse.response.includes('Infelizmente, n√£o disponho');
    
    if (hasGenericResponse) {
      log('‚ùå Resposta gen√©rica sobre exames (PROBLEMA DE CONTEXTUALIZA√á√ÉO)', 'ERROR');
    } else {
      log('‚úÖ Resposta espec√≠fica sobre exames (CONTEXTUALIZA√á√ÉO FUNCIONANDO)', 'SUCCESS');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 2.2: Pergunta sobre m√©dicos
    log('üìù Teste 2.2: Pergunta sobre m√©dicos', 'TEST');
    
    const doctorMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Quais m√©dicos trabalham na cl√≠nica?'
    };
    
    const doctorResponse = await LLMOrchestratorService.processMessage(doctorMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${doctorMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${doctorResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGenericDoctorResponse = doctorResponse.response.includes('N√£o disponho de informa√ß√µes espec√≠ficas') ||
                                   doctorResponse.response.includes('n√£o tenho informa√ß√µes espec√≠ficas') ||
                                   doctorResponse.response.includes('Infelizmente, n√£o disponho');
    
    if (hasGenericDoctorResponse) {
      log('‚ùå Resposta gen√©rica sobre m√©dicos (PROBLEMA DE CONTEXTUALIZA√á√ÉO)', 'ERROR');
    } else {
      log('‚úÖ Resposta espec√≠fica sobre m√©dicos (CONTEXTUALIZA√á√ÉO FUNCIONANDO)', 'SUCCESS');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 2.3: Pergunta sobre contatos
    log('üìù Teste 2.3: Pergunta sobre contatos', 'TEST');
    
    const contactMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Como posso entrar em contato com a cl√≠nica?'
    };
    
    const contactResponse = await LLMOrchestratorService.processMessage(contactMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${contactMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${contactResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasContactInfo = contactResponse.response.includes('(47) 3231-0200') ||
                          contactResponse.response.includes('Rua Azambuja') ||
                          contactResponse.response.includes('Blumenau/SC');
    
    if (hasContactInfo) {
      log('‚úÖ Informa√ß√µes de contato fornecidas corretamente', 'SUCCESS');
    } else {
      log('‚ùå Informa√ß√µes de contato N√ÉO fornecidas', 'ERROR');
    }
    
    log('‚úÖ Teste 2 (Contextualiza√ß√£o) conclu√≠do', 'SUCCESS');
    
  } catch (error) {
    log(`‚ùå Erro no teste 2: ${error.message}`, 'ERROR');
    throw error;
  }
}

// Fun√ß√£o para testar fluxo de conversa
async function testConversationFlow() {
  log('üß™ TESTE 3: Fluxo de Conversa', 'TEST');
  
  try {
    // Teste 3.1: Verifica√ß√£o de nome
    log('üìù Teste 3.1: Verifica√ß√£o de nome', 'TEST');
    
    const nameMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Qual meu nome?'
    };
    
    const nameResponse = await LLMOrchestratorService.processMessage(nameMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${nameMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${nameResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasName = nameResponse.response.includes('Lucas');
    if (hasName) {
      log('‚úÖ Nome do usu√°rio lembrado corretamente', 'SUCCESS');
    } else {
      log('‚ùå Nome do usu√°rio N√ÉO lembrado', 'ERROR');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 3.2: Mensagem simples sem contexto
    log('üìù Teste 3.2: Mensagem simples sem contexto', 'TEST');
    
    const simpleMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Tudo bem?'
    };
    
    const simpleResponse = await LLMOrchestratorService.processMessage(simpleMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${simpleMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${simpleResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasGreeting = simpleResponse.response.includes('Ol√°') || 
                       simpleResponse.response.includes('Sou o Cardio') ||
                       simpleResponse.response.includes('assistente virtual da CardioPrime');
    
    if (!hasGreeting) {
      log('‚úÖ Resposta simples sem sauda√ß√£o (CORRETO)', 'SUCCESS');
    } else {
      log('‚ùå Resposta com sauda√ß√£o desnecess√°ria (INCORRETO)', 'ERROR');
    }
    
    log('‚úÖ Teste 3 (Fluxo de Conversa) conclu√≠do', 'SUCCESS');
    
  } catch (error) {
    log(`‚ùå Erro no teste 3: ${error.message}`, 'ERROR');
    throw error;
  }
}

// Fun√ß√£o para testar casos especiais
async function testSpecialCases() {
  log('üß™ TESTE 4: Casos Especiais', 'TEST');
  
  try {
    // Teste 4.1: Mensagem de agendamento
    log('üìù Teste 4.1: Mensagem de agendamento', 'TEST');
    
    const appointmentMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Quero agendar uma consulta de cardiologia'
    };
    
    const appointmentResponse = await LLMOrchestratorService.processMessage(appointmentMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${appointmentMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${appointmentResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasAppointmentResponse = appointmentResponse.response.includes('agendar') ||
                                 appointmentResponse.response.includes('consulta') ||
                                 appointmentResponse.response.includes('cardiologia');
    
    if (hasAppointmentResponse) {
      log('‚úÖ Resposta sobre agendamento fornecida', 'SUCCESS');
    } else {
      log('‚ùå Resposta sobre agendamento N√ÉO fornecida', 'ERROR');
    }
    
    await delay(TEST_CONFIG.testDelay);
    
    // Teste 4.2: Mensagem de emerg√™ncia
    log('üìù Teste 4.2: Mensagem de emerg√™ncia', 'TEST');
    
    const emergencyMessage = {
      phoneNumber: TEST_CONFIG.phoneNumber,
      message: 'Estou com dor no peito'
    };
    
    const emergencyResponse = await LLMOrchestratorService.processMessage(emergencyMessage);
    
    log('üì§ Mensagem enviada:', 'INFO');
    log(`   Usu√°rio: ${emergencyMessage.message}`, 'INFO');
    
    log('üì• Resposta recebida:', 'INFO');
    log(`   Bot: ${emergencyResponse.response}`, 'INFO');
    
    // Verifica√ß√µes
    const hasEmergencyResponse = emergencyResponse.response.includes('emerg√™ncia') ||
                               emergencyResponse.response.includes('192') ||
                               emergencyResponse.response.includes('SAMU') ||
                               emergencyResponse.response.includes('pronto-socorro');
    
    if (hasEmergencyResponse) {
      log('‚úÖ Resposta de emerg√™ncia fornecida', 'SUCCESS');
    } else {
      log('‚ùå Resposta de emerg√™ncia N√ÉO fornecida', 'ERROR');
    }
    
    log('‚úÖ Teste 4 (Casos Especiais) conclu√≠do', 'SUCCESS');
    
  } catch (error) {
    log(`‚ùå Erro no teste 4: ${error.message}`, 'ERROR');
    throw error;
  }
}

// Fun√ß√£o principal de teste
async function runRobustTest() {
  log('üöÄ INICIANDO TESTE ROBUSTO DE CONVERSA√á√ÉO', 'TEST');
  log(`üì± N√∫mero de teste: ${TEST_CONFIG.phoneNumber}`, 'INFO');
  log(`üè• Cl√≠nica: ${TEST_CONFIG.clinicName}`, 'INFO');
  
  try {
    // Inicializar servi√ßos
    log('üîß Inicializando servi√ßos...', 'INFO');
    await ClinicContextManager.initialize();
    
    // Limpar mem√≥ria de teste
    await clearTestMemory();
    
    // Executar testes sequencialmente
    log('üß™ Executando testes...', 'TEST');
    
    await testGreetingAndMemory();
    await delay(TEST_CONFIG.testDelay);
    
    await testContextualization();
    await delay(TEST_CONFIG.testDelay);
    
    await testConversationFlow();
    await delay(TEST_CONFIG.testDelay);
    
    await testSpecialCases();
    
    log('üéâ TESTE ROBUSTO CONCLU√çDO COM SUCESSO!', 'SUCCESS');
    log('üìä Resumo dos testes executados:', 'INFO');
    log('   ‚úÖ Teste 1: Sauda√ß√£o e Mem√≥ria', 'INFO');
    log('   ‚úÖ Teste 2: Contextualiza√ß√£o', 'INFO');
    log('   ‚úÖ Teste 3: Fluxo de Conversa', 'INFO');
    log('   ‚úÖ Teste 4: Casos Especiais', 'INFO');
    
  } catch (error) {
    log(`üí• ERRO CR√çTICO NO TESTE: ${error.message}`, 'ERROR');
    log('üîç Verifique os logs acima para identificar problemas', 'ERROR');
    process.exit(1);
  }
}

// Executar teste se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runRobustTest();
}

export { runRobustTest, testGreetingAndMemory, testContextualization, testConversationFlow, testSpecialCases };
