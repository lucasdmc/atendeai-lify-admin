import dotenv from 'dotenv';
import { ClinicContextManager } from './services/core/clinicContextManager.js';
import { LLMOrchestratorService } from './services/core/llmOrchestratorService.js';

dotenv.config();

async function testProductionSimulation() {
  console.log('üè≠ SIMULA√á√ÉO DE PRODU√á√ÉO - DEBUG COMPLETO');
  console.log('=========================================');
  console.log('üîç Simulando EXATAMENTE o que acontece em produ√ß√£o');
  
  try {
    // 1. Verificar vari√°veis de ambiente
    console.log('\n1Ô∏è‚É£ VERIFICANDO VARI√ÅVEIS DE AMBIENTE:');
    console.log('   - VITE_SUPABASE_URL:', process.env.VITE_SUPABASE_URL ? '‚úÖ SET' : '‚ùå NOT SET');
    console.log('   - SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ SET' : '‚ùå NOT SET');
    
    // 2. Inicializar servi√ßos
    console.log('\n2Ô∏è‚É£ Inicializando servi√ßos...');
    await ClinicContextManager.initialize();
    console.log('‚úÖ ClinicContextManager inicializado');
    
    // 3. Buscar cl√≠nica
    console.log('\n3Ô∏è‚É£ Buscando cl√≠nica CardioPrime...');
    const clinicName = await ClinicContextManager.getClinicByWhatsApp('+554730915628');
    console.log('‚úÖ Cl√≠nica encontrada:', clinicName);
    
    if (!clinicName) {
      console.log('‚ùå Nenhuma cl√≠nica encontrada');
      return;
    }
    
    // 4. Carregar contexto COMPLETO
    console.log('\n4Ô∏è‚É£ Carregando contexto COMPLETO...');
    const context = await ClinicContextManager.getClinicContext(clinicName);
    
    console.log('üìä CONTEXTO CARREGADO:');
    console.log('   - Nome:', context?.name);
    console.log('   - Servi√ßos:', context?.services?.length || 0);
    console.log('   - Profissionais:', context?.professionals?.length || 0);
    console.log('   - ServicesDetails:', !!context?.servicesDetails);
    console.log('   - ProfessionalsDetails:', !!context?.professionalsDetails);
    
    // 5. SIMULAR PROCESSAMENTO COMPLETO (como em produ√ß√£o)
    console.log('\n5Ô∏è‚É£ SIMULANDO PROCESSAMENTO COMPLETO...');
    
    const testMessage = "Gostaria de informa√ß√µes sobre os pre√ßos de exames";
    console.log('üì§ Mensagem de teste:', testMessage);
    
    // 6. SIMULAR O QUE O LLM RECEBE EM PRODU√á√ÉO
    console.log('\n6Ô∏è‚É£ SIMULANDO O QUE O LLM RECEBE EM PRODU√á√ÉO...');
    
    // Simular o prepareSystemPrompt
    const systemPrompt = LLMOrchestratorService.prepareSystemPrompt(context, {});
    
    // 7. VERIFICAR SE AS INFORMA√á√ïES EST√ÉO NO PROMPT
    console.log('\n7Ô∏è‚É£ VERIFICANDO INFORMA√á√ïES NO PROMPT:');
    
    const hasServices = systemPrompt.includes('Consulta Cardiol√≥gica') || 
                       systemPrompt.includes('Ecocardiograma') ||
                       systemPrompt.includes('Teste Ergom√©trico');
    
    const hasProfessionals = systemPrompt.includes('Dr. Roberto Silva') || 
                            systemPrompt.includes('Dra. Maria Fernanda');
    
    const hasDetailedServices = systemPrompt.includes('SERVI√áOS DISPON√çVEIS (INFORMA√á√ïES COMPLETAS)');
    const hasDetailedProfessionals = systemPrompt.includes('PROFISSIONAIS DA CL√çNICA (INFORMA√á√ïES COMPLETAS)');
    
    const hasPrices = systemPrompt.includes('preco_particular') || 
                     systemPrompt.includes('250') || 
                     systemPrompt.includes('200') ||
                     systemPrompt.includes('180');
    
    console.log('üîç VERIFICA√á√ïES:');
    console.log('   - Tem servi√ßos no prompt:', hasServices);
    console.log('   - Tem profissionais no prompt:', hasProfessionals);
    console.log('   - Tem se√ß√£o de servi√ßos detalhados:', hasDetailedServices);
    console.log('   - Tem se√ß√£o de profissionais detalhados:', hasDetailedProfessionals);
    console.log('   - Tem pre√ßos no prompt:', hasPrices);
    
    // 8. DEBUG: Verificar se h√° dados faltando
    console.log('\n8Ô∏è‚É£ DEBUG: VERIFICANDO DADOS FALTANDO:');
    
    if (context?.servicesDetails) {
      console.log('üìã SERVI√áOS DETALHADOS:');
      console.log('   - Consultas:', context.servicesDetails.consultas?.length || 0);
      console.log('   - Exames:', context.servicesDetails.exames?.length || 0);
      console.log('   - Procedimentos:', context.servicesDetails.procedimentos?.length || 0);
      
      if (context.servicesDetails.exames) {
        console.log('   üî¨ EXAMES COM PRE√áOS:');
        context.servicesDetails.exames.forEach((exame, i) => {
          console.log(`      ${i + 1}. ${exame.nome} - R$ ${exame.preco_particular || 'N/A'}`);
        });
      }
    }
    
    // 9. RESULTADO FINAL
    console.log('\nüéØ RESULTADO FINAL:');
    
    const hasCompleteContext = hasServices && hasProfessionals && hasDetailedServices && hasDetailedProfessionals;
    
    if (hasCompleteContext) {
      console.log('‚úÖ CONTEXTUALIZA√á√ÉO COMPLETA FUNCIONANDO LOCALMENTE!');
      console.log('   PROBLEMA: Em produ√ß√£o n√£o est√° funcionando');
      console.log('   POSS√çVEIS CAUSAS:');
      console.log('   - Cache do Railway');
      console.log('   - Vari√°veis de ambiente diferentes');
      console.log('   - Banco de dados diferente');
      console.log('   - Deploy n√£o atualizou todos os arquivos');
    } else {
      console.log('‚ùå CONTEXTUALIZA√á√ÉO INCOMPLETA LOCALMENTE!');
      console.log('   PROBLEMA: C√≥digo n√£o est√° funcionando');
    }
    
    // 10. RECOMENDA√á√ïES
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('   1. For√ßar novo deploy no Railway');
    console.log('   2. Verificar vari√°veis de ambiente em produ√ß√£o');
    console.log('   3. Verificar se banco de dados est√° igual');
    console.log('   4. Limpar cache do Railway se poss√≠vel');
    
  } catch (error) {
    console.error('üí• ERRO NO TESTE:', error);
  }
}

testProductionSimulation();
