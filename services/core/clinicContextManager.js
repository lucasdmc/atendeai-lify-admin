// services/core/clinicContextManager.js
// Gerenciador de Contexto de Cl√≠nicas - √öNICA FONTE: JSONs da tela de cl√≠nicas

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ‚úÖ CORRE√á√ÉO: __dirname para m√≥dulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class ClinicContextManager {
  // ‚úÖ CACHE EM MEM√ìRIA: JSONs carregados na inicializa√ß√£o
  static jsonContexts = new Map();

  /**
   * Inicializa o gerenciador de contexto
   */
  static async initialize() {
    try {
      console.log('üè• [ClinicContextManager] Inicializando...');
      
      // ‚úÖ CARREGAR APENAS JSONs da tela de cl√≠nicas
      await this.loadAllJsonContexts();
      
      console.log('‚úÖ [ClinicContextManager] Inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * Carrega todos os JSONs de contextualiza√ß√£o
   */
  static async loadAllJsonContexts() {
    try {
      console.log('üè• [ClinicContextManager] Inicializando...');
      console.log('üìÑ [ClinicContextManager] SISTEMA CONFIGURADO PARA USAR APENAS JSON DA TELA DE CL√çNICAS');
      
      // ‚úÖ FONTE √öNICA: JSON inserido na tela de cl√≠nicas (banco de dados)
      // ‚ùå N√ÉO USAR: Arquivos est√°ticos
      // ‚ùå N√ÉO USAR: Diret√≥rios de configura√ß√£o
      
      console.log('üìÑ [ClinicContextManager] JSONs ser√£o carregados dinamicamente do banco de dados');
      console.log('üìÑ [ClinicContextManager] quando necess√°rio atrav√©s de getClinicContext()');
      
      // ‚úÖ INICIALIZA√á√ÉO COMPLETA: Sistema pronto para carregar JSONs dinamicamente
      console.log('‚úÖ [ClinicContextManager] Sistema inicializado para JSON din√¢mico da tela de cl√≠nicas');
      
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * Obt√©m contexto de uma cl√≠nica espec√≠fica
   */
  static async getClinicContext(clinicKey) {
    try {
      console.log(`üîç [ClinicContextManager] Buscando contexto para: ${clinicKey}`);
      
      // ‚úÖ FONTE √öNICA: Buscar JSON do banco de dados (tela de cl√≠nicas)
      const { createClient } = await import('@supabase/supabase-js');
      
      const supabase = createClient(
        process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co',
        process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.SY8A3ReAs_D7SFBp99PpSe8rpm1hbWMv4b2q-c_VS5M'
      );
      
      // ‚úÖ BUSCAR CL√çNICA NO BANCO DE DADOS
      let { data: clinic, error } = await supabase
        .from('clinics')
        .select('*')
        .eq('name', clinicKey)
        .single();
      
      // ‚úÖ SE N√ÉO ENCONTRAR, TENTAR BUSCA POR NOME SIMILAR
      if (error && error.code === 'PGRST116') {
        console.log(`üîç [ClinicContextManager] Tentando busca por nome similar para: ${clinicKey}`);
        
        const { data: clinics, error: searchError } = await supabase
          .from('clinics')
          .select('*')
          .ilike('name', `%${clinicKey}%`);
        
        if (!searchError && clinics && clinics.length > 0) {
          clinic = clinics[0];
          error = null;
          console.log(`‚úÖ [ClinicContextManager] Cl√≠nica encontrada por busca similar: ${clinic.name}`);
        }
      }
      
      // ‚ùå SEM FALLBACKS HARDCODED - SE N√ÉO ENCONTRAR, ERRO
      if (error || !clinic) {
        console.error(`‚ùå [ClinicContextManager] Cl√≠nica ${clinicKey} n√£o encontrada no banco`);
        throw new Error(`Cl√≠nica ${clinicKey} n√£o encontrada no banco de dados`);
      }
      
      // ‚ùå SEM FALLBACKS HARDCODED - SE N√ÉO TEM JSON, ERRO
      if (!clinic.contextualization_json || Object.keys(clinic.contextualization_json).length === 0) {
        console.error(`‚ùå [ClinicContextManager] Cl√≠nica ${clinicKey} n√£o tem JSON de contextualiza√ß√£o`);
        throw new Error(`Cl√≠nica ${clinicKey} n√£o tem JSON de contextualiza√ß√£o configurado`);
      }
      
      console.log(`‚úÖ [ClinicContextManager] JSON encontrado para ${clinicKey} no banco de dados`);
      
      // ‚úÖ EXTRAIR DADOS DO JSON DO BANCO (FONTE √öNICA)
      return this.extractClinicDataFromJson(clinic.contextualization_json, clinicKey);
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao obter contexto para ${clinicKey}:`, error);
      // ‚ùå SEM FALLBACKS - PROPAGAR ERRO
      throw error;
    }
  }

  /**
   * Extrai dados estruturados do JSON da cl√≠nica
   */
  static extractClinicDataFromJson(jsonContext, clinicKey) {
    try {
      const clinica = jsonContext.clinica || {};
      const agente = jsonContext.agente_ia || {}; // üîß CORRE√á√ÉO: agente_ia em vez de agente
      
      console.log(`üîç [ClinicContextManager] Extraindo dados para ${clinicKey}:`);
      console.log(`   - Tem clinica: ${!!clinica}`);
      console.log(`   - Tem agente_ia: ${!!agente}`);
      console.log(`   - Tem configuracao: ${!!agente.configuracao}`);
      
      return {
        // ‚úÖ IDENTIFICA√á√ÉO
        id: clinicKey,
        key: clinicKey,
        name: clinica.informacoes_basicas?.nome || clinicKey,
        
        // ‚úÖ INFORMA√á√ïES B√ÅSICAS DO JSON
        basicInfo: {
          nome: clinica.informacoes_basicas?.nome || clinicKey,
          tipo: clinica.informacoes_basicas?.tipo || 'Cl√≠nica',
          especialidade: clinica.informacoes_basicas?.especialidade || 'Geral',
          descricao: clinica.informacoes_basicas?.descricao || ''
        },
        
        // ‚úÖ ENDERE√áO DO JSON
        address: {
          rua: clinica.localizacao?.endereco_principal?.logradouro || '',
          numero: clinica.localizacao?.endereco_principal?.numero || '',
          complemento: clinica.localizacao?.endereco_principal?.complemento || '',
          bairro: clinica.localizacao?.endereco_principal?.bairro || '',
          cidade: clinica.localizacao?.endereco_principal?.cidade || '',
          estado: clinica.localizacao?.endereco_principal?.estado || '',
          cep: clinica.localizacao?.endereco_principal?.cep || ''
        },
        
        // ‚úÖ CONTATOS DO JSON
        contacts: {
          telefone: clinica.contatos?.telefone_principal || '',
          whatsapp: clinica.contatos?.whatsapp || '',
          email: clinica.contatos?.email_principal || '',
          website: clinica.contatos?.website || ''
        },
        
        // ‚úÖ HOR√ÅRIOS DO JSON
        workingHours: clinica.horario_funcionamento || {},
        
        // ‚úÖ PROFISSIONAIS DO JSON
        professionals: clinica.profissionais || [],
        
        // ‚úÖ SERVI√áOS DO JSON
        services: clinica.servicos || [],
        
        // ‚úÖ CONFIGURA√á√ïES DO AGENTE IA (PRIORIDADE ALTA)
        agentConfig: {
          nome: agente.configuracao?.nome || 'Assistente Virtual',
          personalidade: agente.configuracao?.personalidade || 'Profissional e prestativo',
          tom_comunicacao: agente.configuracao?.tom_comunicacao || 'Formal mas acess√≠vel',
          nivel_formalidade: agente.configuracao?.nivel_formalidade || 'M√©dio',
          saudacao_inicial: agente.configuracao?.saudacao_inicial || `Ol√°! Sou o assistente virtual da ${clinica.informacoes_basicas?.nome || clinicKey}. Como posso ajud√°-lo hoje?`,
          mensagem_despedida: agente.configuracao?.mensagem_despedida || 'Obrigado por escolher nossa cl√≠nica. At√© breve!',
          mensagem_fora_horario: agente.configuracao?.mensagem_fora_horario || 'No momento estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.'
        },
        
        agentBehavior: agente.comportamento || {
          proativo: true,
          oferece_sugestoes: true,
          solicita_feedback: true,
          escalacao_automatica: true,
          limite_tentativas: 3,
          contexto_conversa: true
        },
        
        agentRestrictions: agente.restricoes || {
          nao_pode_diagnosticar: true,
          nao_pode_prescrever: true,
          emergencias_cardiacas: []
        },
        
        // ‚úÖ METADADOS
        hasJsonContext: true,
        source: 'JSON_FILE',
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao extrair dados do JSON para ${clinicKey}:`, error);
      return this.getDefaultContext(clinicKey);
    }
  }

  // ‚ùå M√âTODO REMOVIDO: getDefaultContext era fallback hardcoded (NUNCA PEDIDO)

  /**
   * Lista todas as cl√≠nicas dispon√≠veis (APENAS dos JSONs)
   */
  static getAllClinics() {
    return Array.from(this.jsonContexts.keys()).map(key => ({
      key: key,
      name: this.jsonContexts.get(key)?.clinica?.informacoes_basicas?.nome || key
    }));
  }

  /**
   * Verifica se uma cl√≠nica tem contextualiza√ß√£o JSON
   */
  static hasJsonContext(clinicKey) {
    return this.jsonContexts.has(clinicKey);
  }

  /**
   * üîß NOVA FUN√á√ÉO: Identifica cl√≠nica baseado no n√∫mero do WhatsApp
   * Esta fun√ß√£o mapeia n√∫meros de WhatsApp para cl√≠nicas
   */
  static async getClinicByWhatsApp(phoneNumber) {
    try {
      console.log(`üîç [ClinicContextManager] Mapeando WhatsApp: ${phoneNumber}`);
      
      // ‚úÖ NORMALIZAR N√öMERO DE TELEFONE
      const normalizedPhone = phoneNumber.replace(/\D/g, '');
      const fullPhone = normalizedPhone.startsWith('55') ? `+${normalizedPhone}` : `+55${normalizedPhone}`;
      
      // ‚úÖ BUSCAR CL√çNICA NO BANCO DE DADOS POR N√öMERO DE WHATSAPP
      const { createClient } = await import('@supabase/supabase-js');
      
      const supabase = createClient(
        process.env.VITE_SUPABASE_URL || 'https://niakqdolcdwxtrkbqmdi.supabase.co',
        process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.SY8A3ReAs_D7SFBp99PpSe8rpm1hbWMv4b2q-c_VS5M'
      );
      
      const { data: clinic, error } = await supabase
        .from('clinics')
        .select('name, whatsapp_phone')
        .eq('whatsapp_phone', fullPhone)
        .single();
      
      if (error && error.code !== 'PGRST116') {
        console.error(`‚ùå [ClinicContextManager] Erro ao buscar cl√≠nica por WhatsApp:`, error);
        return null;
      }
      
      if (clinic) {
        console.log(`‚úÖ [ClinicContextManager] Cl√≠nica encontrada para ${phoneNumber}: ${clinic.name}`);
        return clinic.name.toLowerCase().replace(/\s+/g, '-');
      }
      
      // ‚úÖ SE N√ÉO ENCONTRAR, RETORNAR NULL (SEM FALLBACK HARDCODED)
      console.log(`‚ö†Ô∏è [ClinicContextManager] Nenhuma cl√≠nica encontrada para WhatsApp: ${phoneNumber}`);
      return null;
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao mapear WhatsApp ${phoneNumber}:`, error);
      return null; // SEM FALLBACK HARDCODED
    }
  }

  /**
   * Obt√©m estat√≠sticas de uso
   */
  static getStats() {
    return {
      totalJsonContexts: this.jsonContexts.size,
      totalClinics: this.jsonContexts.size,
      availableClinics: Array.from(this.jsonContexts.keys()),
      cacheSize: this.jsonContexts.size
    };
  }
}

export { ClinicContextManager };
