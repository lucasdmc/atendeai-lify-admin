// services/core/clinicContextManager.js
// Gerenciador de Contexto de Cl√≠nicas - √öNICA FONTE: JSONs da tela de cl√≠nicas

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ‚úÖ CORRE√á√ÉO: __dirname para m√≥dulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class ClinicContextManager {
  // ‚úÖ CACHE EM MEM√ìRIA: JSONs carregados na inicializa√ß√£o
  static jsonContexts = new Map();

  /**
   * Inicializa o gerenciador de contexto
   */
  static async initialize() {
    try {
      console.log('üè• [ClinicContextManager] Inicializando...');
      
      // ‚úÖ CARREGAR APENAS JSONs da tela de cl√≠nicas
      await this.loadAllJsonContexts();
      
      console.log('‚úÖ [ClinicContextManager] Inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * Carrega todos os JSONs de contextualiza√ß√£o
   */
  static async loadAllJsonContexts() {
    try {
      // ‚úÖ √öNICA FONTE: Arquivos da pasta data (JSONs da tela de cl√≠nicas)
      const dataDir = path.join(__dirname, '../../data');
      const files = fs.readdirSync(dataDir);
      
      for (const file of files) {
        if (file.startsWith('contextualizacao-') && file.endsWith('.json')) {
          const clinicKey = file.replace('contextualizacao-', '').replace('.json', '');
          const filePath = path.join(dataDir, file);
          const content = fs.readFileSync(filePath, 'utf8');
          const context = JSON.parse(content);
          
          // ‚úÖ MAPEAMENTO DIRETO: Chave do arquivo
          this.jsonContexts.set(clinicKey, context);
          console.log(`üìÑ [ClinicContextManager] JSON da tela de cl√≠nicas carregado: ${clinicKey}`);
        }
      }
      
      console.log(`‚úÖ [ClinicContextManager] Total de JSONs carregados: ${this.jsonContexts.size}`);
      
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro ao carregar JSONs da tela de cl√≠nicas:', error);
    }
  }

  /**
   * Obt√©m contexto de uma cl√≠nica espec√≠fica
   */
  static getClinicContext(clinicKey) {
    try {
      // ‚úÖ BUSCAR APENAS NO CACHE DE JSONs
      const jsonContext = this.jsonContexts.get(clinicKey);
      
      if (jsonContext) {
        console.log(`‚úÖ [ClinicContextManager] Contexto encontrado para: ${clinicKey}`);
        return this.extractClinicDataFromJson(jsonContext, clinicKey);
      }
      
      // ‚úÖ FALLBACK: Contexto padr√£o se n√£o encontrar JSON
      console.log(`‚ö†Ô∏è [ClinicContextManager] JSON n√£o encontrado para: ${clinicKey}, usando contexto padr√£o`);
      return this.getDefaultContext(clinicKey);
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao obter contexto para ${clinicKey}:`, error);
      return this.getDefaultContext(clinicKey);
    }
  }

  /**
   * Extrai dados estruturados do JSON da cl√≠nica
   */
  static extractClinicDataFromJson(jsonContext, clinicKey) {
    try {
      const clinica = jsonContext.clinica || {};
      const agente = jsonContext.agente || {};
      
      return {
        // ‚úÖ IDENTIFICA√á√ÉO
        id: clinicKey,
        key: clinicKey,
        name: clinica.informacoes_basicas?.nome || clinicKey,
        
        // ‚úÖ INFORMA√á√ïES B√ÅSICAS DO JSON
        basicInfo: {
          nome: clinica.informacoes_basicas?.nome || clinicKey,
          tipo: clinica.informacoes_basicas?.tipo || 'Cl√≠nica',
          especialidade: clinica.informacoes_basicas?.especialidade || 'Geral',
          descricao: clinica.informacoes_basicas?.descricao || ''
        },
        
        // ‚úÖ ENDERE√áO DO JSON
        address: {
          rua: clinica.endereco?.rua || '',
          numero: clinica.endereco?.numero || '',
          complemento: clinica.endereco?.complemento || '',
          bairro: clinica.endereco?.bairro || '',
          cidade: clinica.endereco?.cidade || '',
          estado: clinica.endereco?.estado || '',
          cep: clinica.endereco?.cep || ''
        },
        
        // ‚úÖ CONTATOS DO JSON
        contacts: {
          telefone: clinica.contatos?.telefone_principal || '',
          whatsapp: clinica.contatos?.whatsapp || '',
          email: clinica.contatos?.email_principal || '',
          website: clinica.contatos?.website || ''
        },
        
        // ‚úÖ HOR√ÅRIOS DO JSON
        workingHours: clinica.horario_funcionamento || {},
        
        // ‚úÖ PROFISSIONAIS DO JSON
        professionals: clinica.profissionais || [],
        
        // ‚úÖ SERVI√áOS DO JSON
        services: clinica.servicos || [],
        
        // ‚úÖ CONFIGURA√á√ïES DO AGENTE IA (PRIORIDADE ALTA)
        agentConfig: {
          nome: agente.configuracao?.nome || 'Assistente Virtual',
          personalidade: agente.configuracao?.personalidade || 'Profissional e prestativo',
          tom_comunicacao: agente.configuracao?.tom_comunicacao || 'Formal mas acess√≠vel',
          nivel_formalidade: agente.configuracao?.nivel_formalidade || 'M√©dio',
          saudacao_inicial: agente.configuracao?.saudacao_inicial || `Ol√°! Sou o assistente virtual da ${clinica.informacoes_basicas?.nome || clinicKey}. Como posso ajud√°-lo hoje?`,
          mensagem_despedida: agente.configuracao?.mensagem_despedida || 'Obrigado por escolher nossa cl√≠nica. At√© breve!',
          mensagem_fora_horario: agente.configuracao?.mensagem_fora_horario || 'No momento estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.'
        },
        
        agentBehavior: agente.comportamento || {
          proativo: true,
          oferece_sugestoes: true,
          solicita_feedback: true,
          escalacao_automatica: true,
          limite_tentativas: 3,
          contexto_conversa: true
        },
        
        agentRestrictions: agente.restricoes || {
          nao_pode_diagnosticar: true,
          nao_pode_prescrever: true,
          emergencias_cardiacas: []
        },
        
        // ‚úÖ METADADOS
        hasJsonContext: true,
        source: 'JSON_FILE',
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao extrair dados do JSON para ${clinicKey}:`, error);
      return this.getDefaultContext(clinicKey);
    }
  }

  /**
   * Contexto padr√£o quando n√£o h√° JSON
   */
  static getDefaultContext(clinicKey) {
    return {
      id: clinicKey,
      key: clinicKey,
      name: clinicKey,
      agentConfig: {
        nome: 'Assistente Virtual',
        personalidade: 'Profissional e prestativo',
        tom_comunicacao: 'Formal mas acess√≠vel',
        nivel_formalidade: 'M√©dio',
        saudacao_inicial: `Ol√°! Sou o assistente virtual da ${clinicKey}. Como posso ajud√°-lo hoje?`,
        mensagem_despedida: 'Obrigado pelo contato. At√© breve!',
        mensagem_fora_horario: 'Estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.'
      },
      hasJsonContext: false,
      source: 'DEFAULT',
      lastUpdated: new Date().toISOString()
    };
  }

  /**
   * Lista todas as cl√≠nicas dispon√≠veis (APENAS dos JSONs)
   */
  static getAllClinics() {
    return Array.from(this.jsonContexts.keys()).map(key => ({
      key: key,
      name: this.jsonContexts.get(key)?.clinica?.informacoes_basicas?.nome || key
    }));
  }

  /**
   * Verifica se uma cl√≠nica tem contextualiza√ß√£o JSON
   */
  static hasJsonContext(clinicKey) {
    return this.jsonContexts.has(clinicKey);
  }

  /**
   * üîß NOVA FUN√á√ÉO: Identifica cl√≠nica baseado no n√∫mero do WhatsApp
   * Esta fun√ß√£o mapeia n√∫meros de WhatsApp para cl√≠nicas
   */
  static getClinicByWhatsApp(phoneNumber) {
    try {
      // ‚úÖ MAPEAMENTO DIRETO: N√∫meros de WhatsApp para chaves de cl√≠nica
      const whatsappMapping = {
        '+554730915628': 'cardioprime',  // CardioPrime
        '+554730915629': 'esadi',        // ESADI
        // ‚úÖ ADICIONAR NOVOS N√öMEROS AQUI CONFORME NECESS√ÅRIO
      };

      // ‚úÖ NORMALIZAR N√öMERO (remover espa√ßos, tra√ßos, etc.)
      const normalizedPhone = phoneNumber.replace(/[\s\-\(\)]/g, '');
      
      // ‚úÖ BUSCAR MAPEAMENTO
      const clinicKey = whatsappMapping[normalizedPhone];
      
      if (clinicKey) {
        console.log(`üîç [ClinicContextManager] Cl√≠nica identificada: ${phoneNumber} ‚Üí ${clinicKey}`);
        return clinicKey;
      }

      // ‚úÖ FALLBACK: Tentar encontrar por padr√£o
      for (const [mappedPhone, key] of Object.entries(whatsappMapping)) {
        if (normalizedPhone.includes(mappedPhone.replace(/[\s\-\(\)]/g, '')) || 
            mappedPhone.includes(normalizedPhone)) {
          console.log(`üîç [ClinicContextManager] Cl√≠nica encontrada por padr√£o: ${phoneNumber} ‚Üí ${key}`);
          return key;
        }
      }

      // ‚úÖ FALLBACK FINAL: Usar cl√≠nica padr√£o se n√£o encontrar
      console.log(`‚ö†Ô∏è [ClinicContextManager] Cl√≠nica n√£o encontrada para ${phoneNumber}, usando padr√£o: cardioprime`);
      return 'cardioprime';
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao identificar cl√≠nica por WhatsApp:`, error);
      return 'cardioprime'; // Fallback seguro
    }
  }

  /**
   * Obt√©m estat√≠sticas de uso
   */
  static getStats() {
    return {
      totalJsonContexts: this.jsonContexts.size,
      totalClinics: this.jsonContexts.size,
      availableClinics: Array.from(this.jsonContexts.keys()),
      cacheSize: this.jsonContexts.size
    };
  }
}

export { ClinicContextManager };
