// services/core/clinicContextManager.js
// Gerenciador de Contexto de Cl√≠nicas - √öNICA FONTE: JSONs da tela de cl√≠nicas

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import config from '../config/index.js';

// ‚úÖ CORRE√á√ÉO: __dirname para m√≥dulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class ClinicContextManager {
  // ‚úÖ CACHE EM MEM√ìRIA: JSONs carregados na inicializa√ß√£o
  static jsonContexts = new Map();

  /**
   * Inicializa o gerenciador de contexto
   */
  static async initialize() {
    try {
      console.log('üè• [ClinicContextManager] Inicializando...');
      
      // ‚úÖ CARREGAR APENAS JSONs da tela de cl√≠nicas
      await this.loadAllJsonContexts();
      
      console.log('‚úÖ [ClinicContextManager] Inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * Carrega todos os JSONs de contextualiza√ß√£o
   */
  static async loadAllJsonContexts() {
    try {
      console.log('üè• [ClinicContextManager] Inicializando...');
      console.log('üìÑ [ClinicContextManager] SISTEMA CONFIGURADO PARA USAR APENAS JSON DA TELA DE CL√çNICAS');
      
      // ‚úÖ FONTE √öNICA: JSON inserido na tela de cl√≠nicas (banco de dados)
      // ‚ùå N√ÉO USAR: Arquivos est√°ticos
      // ‚ùå N√ÉO USAR: Diret√≥rios de configura√ß√£o
      
      console.log('üìÑ [ClinicContextManager] JSONs ser√£o carregados dinamicamente do banco de dados');
      console.log('üìÑ [ClinicContextManager] quando necess√°rio atrav√©s de getClinicContext()');
      
      // ‚úÖ SISTEMA MULTICL√çNICAS: Sem arquivos locais hardcoded
      console.log('üìÑ [ClinicContextManager] Sistema configurado para JSONs din√¢micos do banco de dados');
      
      // ‚úÖ INICIALIZA√á√ÉO COMPLETA: Sistema pronto para carregar JSONs dinamicamente
      console.log('‚úÖ [ClinicContextManager] Sistema inicializado para JSON din√¢mico da tela de cl√≠nicas');
      
    } catch (error) {
      console.error('‚ùå [ClinicContextManager] Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * Obt√©m contexto de uma cl√≠nica espec√≠fica
   */
  static async getClinicContext(clinicKey) {
    try {
      console.log(`üîç [ClinicContextManager] Buscando contexto para: ${clinicKey}`);
      
      // ‚úÖ FONTE √öNICA: Buscar JSON do banco de dados (tela de cl√≠nicas)
      const supabase = config.getSupabaseClient();
      
      // ‚úÖ BUSCAR CL√çNICA NO BANCO DE DADOS
      let { data: clinic, error } = await supabase
        .from('clinics')
        .select('*')
        .eq('name', clinicKey)
        .single();
      
      // ‚úÖ SE N√ÉO ENCONTRAR, TENTAR BUSCA POR NOME SIMILAR
      if (error && error.code === 'PGRST116') {
        console.log(`üîç [ClinicContextManager] Tentando busca por nome similar para: ${clinicKey}`);
        
        const { data: clinics, error: searchError } = await supabase
          .from('clinics')
          .select('*')
          .ilike('name', `%${clinicKey}%`);
        
        if (!searchError && clinics && clinics.length > 0) {
          clinic = clinics[0];
          error = null;
          console.log(`‚úÖ [ClinicContextManager] Cl√≠nica encontrada por busca similar: ${clinic.name}`);
        }
      }
      
      // ‚úÖ SE N√ÉO ENCONTRAR, TENTAR BUSCA POR NOME EXATO (case insensitive)
      if (error && error.code === 'PGRST116') {
        console.log(`üîç [ClinicContextManager] Tentando busca case insensitive para: ${clinicKey}`);
        
        const { data: clinics, error: searchError } = await supabase
          .from('clinics')
          .select('*')
          .ilike('name', clinicKey);
        
        if (!searchError && clinics && clinics.length > 0) {
          clinic = clinics[0];
          error = null;
          console.log(`‚úÖ [ClinicContextManager] Cl√≠nica encontrada por busca case insensitive: ${clinic.name}`);
        }
      }
      
      // ‚úÖ DEBUG: Mostrar todas as cl√≠nicas dispon√≠veis
      if (error) {
        console.log(`üîç [ClinicContextManager] Buscando todas as cl√≠nicas para debug...`);
        const { data: allClinics, error: allError } = await supabase
          .from('clinics')
          .select('name, id, has_contextualization, contextualization_json');
        
        if (!allError && allClinics) {
          console.log(`üîç [ClinicContextManager] Cl√≠nicas dispon√≠veis:`, allClinics.map(c => ({
            name: c.name, id: c.id, has_contextualization: c.has_contextualization
          })));
        }
      }
      
      // ‚úÖ SISTEMA MULTICL√çNICAS: Sem fallbacks hardcoded
      if (error || !clinic) {
        console.error(`‚ùå [ClinicContextManager] Cl√≠nica ${clinicKey} n√£o encontrada no banco de dados`);
        throw new Error(`Cl√≠nica ${clinicKey} n√£o encontrada no banco de dados. Configure a cl√≠nica na tela de cl√≠nicas.`);
      }
      
      // ‚úÖ DEBUG: Mostrar dados da cl√≠nica encontrada
      console.log(`üîç [ClinicContextManager] Cl√≠nica encontrada:`, {
        name: clinic.name,
        id: clinic.id,
        hasContextualization: clinic.has_contextualization,
        hasJson: !!clinic.contextualization_json,
        jsonKeys: clinic.contextualization_json ? Object.keys(clinic.contextualization_json) : 'null',
        jsonSize: clinic.contextualization_json ? JSON.stringify(clinic.contextualization_json).length : 0
      });
      
      // ‚ùå SEM FALLBACKS HARDCODED - SE N√ÉO TEM JSON, ERRO
      if (!clinic.contextualization_json || Object.keys(clinic.contextualization_json).length === 0) {
        console.error(`‚ùå [ClinicContextManager] Cl√≠nica ${clinicKey} n√£o tem JSON de contextualiza√ß√£o`);
        console.error(`‚ùå [ClinicContextManager] Dados da cl√≠nica:`, {
          name: clinic.name,
          id: clinic.id,
          hasContextualization: clinic.has_contextualization,
          contextualizationJson: clinic.contextualization_json
        });
        throw new Error(`Cl√≠nica ${clinicKey} n√£o tem JSON de contextualiza√ß√£o configurado`);
      }
      
      console.log(`‚úÖ [ClinicContextManager] JSON encontrado para ${clinicKey} no banco de dados`);
      console.log(`‚úÖ [ClinicContextManager] Estrutura do JSON:`, Object.keys(clinic.contextualization_json));
      
      // ‚úÖ EXTRAIR DADOS DO JSON DO BANCO (FONTE √öNICA)
      const extractedData = this.extractClinicDataFromJson(clinic.contextualization_json, clinicKey);
      
      console.log(`‚úÖ [ClinicContextManager] Dados extra√≠dos para ${clinicKey}:`, {
        hasBasicInfo: !!extractedData.basicInfo,
        hasServices: !!extractedData.services && extractedData.services.length > 0,
        hasProfessionals: !!extractedData.professionals && extractedData.professionals.length > 0,
        hasWorkingHours: !!extractedData.workingHours && Object.keys(extractedData.workingHours).length > 0,
        hasAgentConfig: !!extractedData.agentConfig,
        servicesCount: extractedData.services?.length || 0,
        professionalsCount: extractedData.professionals?.length || 0
      });
      
      return extractedData;
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao obter contexto para ${clinicKey}:`, error);
      // ‚ùå SEM FALLBACKS - PROPAGAR ERRO
      throw error;
    }
  }

  /**
   * Extrai dados estruturados do JSON da cl√≠nica
   */
  static extractClinicDataFromJson(jsonContext, clinicKey) {
    try {
      const clinica = jsonContext.clinica || {};
      const agente = jsonContext.agente_ia || {};
      
      console.log(`üîç [ClinicContextManager] Extraindo dados para ${clinicKey}:`);
      console.log(`   - Tem clinica: ${!!clinica}`);
      console.log(`   - Tem agente_ia: ${!!agente}`);
      console.log(`   - Tem configuracao: ${!!agente.configuracao}`);
      
      // ‚úÖ SCHEMA DIN√ÇMICO COMPLETO - Extrair TODA informa√ß√£o do JSON
      const localizacao = clinica.localizacao || {};
      const contatos = clinica.contatos || {};
      const servicos = jsonContext.servicos || {};
      const profissionais = jsonContext.profissionais || [];
      
      // ‚úÖ Construir endere√ßo completo
      let enderecoCompleto = '';
      if (localizacao.endereco_principal) {
        const end = localizacao.endereco_principal;
        enderecoCompleto = `${end.logradouro || ''}, ${end.numero || ''}${end.complemento ? ` - ${end.complemento}` : ''}, ${end.bairro || ''}, ${end.cidade || ''} - ${end.estado || ''}, CEP: ${end.cep || ''}`.trim();
      }
      
      // ‚úÖ Extrair telefone principal
      const telefone = contatos.telefone_principal || contatos.whatsapp || '';
      
      // ‚úÖ Extrair servi√ßos COMPLETOS
      const servicosList = [];
      if (servicos.consultas) {
        servicosList.push(...servicos.consultas.map(s => s.nome));
      }
      if (servicos.exames) {
        servicosList.push(...servicos.exames.map(s => s.nome));
      }
      if (servicos.procedimentos) {
        servicosList.push(...servicos.procedimentos.map(s => s.nome));
      }
      
      // ‚úÖ Extrair profissionais COMPLETOS
      const profissionaisList = profissionais.map(p => p.nome_completo || p.nome_exibicao || p.nome);
      
      console.log('‚úÖ [ClinicContextManager] Dados extra√≠dos:', {
        nome: clinica.informacoes_basicas?.nome || clinicKey,
        endereco: enderecoCompleto,
        telefone: telefone,
        servicos: servicosList.length,
        profissionais: profissionaisList.length
      });
      
      return {
        // ‚úÖ IDENTIFICA√á√ÉO
        id: clinicKey,
        key: clinicKey,
        name: clinica.informacoes_basicas?.nome || clinicKey,
        
        // ‚úÖ INFORMA√á√ïES B√ÅSICAS DO JSON
        basicInfo: {
          nome: clinica.informacoes_basicas?.nome || clinicKey,
          tipo: clinica.informacoes_basicas?.tipo || 'Cl√≠nica',
          especialidade: clinica.informacoes_basicas?.especialidade || 'Geral',
          descricao: clinica.informacoes_basicas?.descricao || '',
          missao: clinica.informacoes_basicas?.missao || '',
          valores: clinica.informacoes_basicas?.valores || [],
          diferenciais: clinica.informacoes_basicas?.diferenciais || []
        },
        
        // ‚úÖ ENDERE√áO DO JSON
        address: {
          rua: localizacao.endereco_principal?.logradouro || '',
          numero: localizacao.endereco_principal?.numero || '',
          complemento: localizacao.endereco_principal?.complemento || '',
          bairro: localizacao.endereco_principal?.bairro || '',
          cidade: localizacao.endereco_principal?.cidade || '',
          estado: localizacao.endereco_principal?.estado || '',
          cep: localizacao.endereco_principal?.cep || '',
          completo: enderecoCompleto
        },
        
        // ‚úÖ CONTATOS DO JSON
        contacts: {
          telefone: telefone,
          whatsapp: contatos.whatsapp || '',
          email: contatos.email_principal || '',
          website: contatos.website || '',
          emails: contatos.emails_departamentos || {}
        },
        
        // ‚úÖ HOR√ÅRIOS DO JSON
        workingHours: clinica.horario_funcionamento || {},
        
        // ‚úÖ PROFISSIONAIS DO JSON - SCHEMA COMPLETO
        professionals: profissionaisList,
        professionalsDetails: jsonContext.profissionais || [],
        
        // ‚úÖ SERVI√áOS DO JSON - SCHEMA COMPLETO
        services: servicosList,
        servicesDetails: jsonContext.servicos || {},
        
        // ‚úÖ CONFIGURA√á√ïES DO AGENTE IA
        agentConfig: {
          nome: agente.configuracao?.nome || 'Assistente Virtual',
          personalidade: agente.configuracao?.personalidade || 'Profissional e prestativo',
          tom_comunicacao: agente.configuracao?.tom_comunicacao || 'Formal mas acess√≠vel',
          nivel_formalidade: agente.configuracao?.nivel_formalidade || 'M√©dio',
          saudacao_inicial: agente.configuracao?.saudacao_inicial || `Ol√°! Sou o assistente virtual da ${clinica.informacoes_basicas?.nome || clinicKey}. Como posso ajud√°-lo hoje?`,
          mensagem_despedida: agente.configuracao?.mensagem_despedida || 'Obrigado por escolher nossa cl√≠nica. At√© breve!',
          mensagem_fora_horario: agente.configuracao?.mensagem_fora_horario || 'No momento estamos fora do hor√°rio de atendimento. Retornaremos seu contato no pr√≥ximo hor√°rio comercial.'
        },
        
        agentBehavior: agente.comportamento || {
          proativo: true,
          oferece_sugestoes: true,
          solicita_feedback: true,
          escalacao_automatica: true,
          limite_tentativas: 3,
          contexto_conversa: true
        },
        
        agentRestrictions: agente.restricoes || {
          nao_pode_diagnosticar: true,
          nao_pode_prescrever: true,
          emergencias_cardiacas: []
        },
        
        // ‚úÖ DADOS ADICIONAIS COMPLETOS
        specialties: clinica.informacoes_basicas?.especialidades_secundarias || [],
        paymentMethods: jsonContext.formas_pagamento || {},
        insurance: jsonContext.convenios || [],
        insuranceDetails: jsonContext.convenios || [],
        bookingPolicies: jsonContext.politicas?.agendamento || {},
        servicePolicies: jsonContext.politicas?.atendimento || {},
        additionalInfo: jsonContext.informacoes_adicionais || {},
        structure: jsonContext.estrutura_fisica || {},
        metadata: jsonContext.metadados || {},
        
        // ‚úÖ CONFIGURA√á√ÉO GOOGLE CALENDAR (OBRIGAT√ìRIA)
        googleCalendar: {
          enabled: true, // SEMPRE habilitado para cl√≠nicas com JSON
          calendarId: 'primary', // Calend√°rio principal
          timezone: 'America/Sao_Paulo',
          appointmentRules: {
            minimumAdvanceHours: jsonContext.politicas?.agendamento?.antecedencia_minima_horas || 24,
            maximumAdvanceDays: jsonContext.politicas?.agendamento?.antecedencia_maxima_dias || 90,
            slotDuration: 30, // minutos padr√£o
            maxSlotsPerDay: 4 // m√°ximo 4 slots por dia conforme solicitado
          }
        },
        
        // ‚úÖ METADADOS
        hasJsonContext: true,
        source: 'JSON_FILE',
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao extrair dados do JSON para ${clinicKey}:`, error);
      return this.getDefaultContext(clinicKey);
    }
  }

  // ‚ùå M√âTODO REMOVIDO: getDefaultContext era fallback hardcoded (NUNCA PEDIDO)

  /**
   * Lista todas as cl√≠nicas dispon√≠veis (APENAS dos JSONs)
   */
  static getAllClinics() {
    return Array.from(this.jsonContexts.keys()).map(key => ({
      key: key,
      name: this.jsonContexts.get(key)?.clinica?.informacoes_basicas?.nome || key
    }));
  }

  /**
   * Verifica se uma cl√≠nica tem contextualiza√ß√£o JSON
   */
  static hasJsonContext(clinicKey) {
    return this.jsonContexts.has(clinicKey);
  }

  /**
   * üîß NOVA FUN√á√ÉO: Identifica cl√≠nica baseado no n√∫mero do WhatsApp
   * Esta fun√ß√£o mapeia n√∫meros de WhatsApp para cl√≠nicas
   */
  static async getClinicByWhatsApp(phoneNumber) {
    try {
      console.log(`üîç [ClinicContextManager] Mapeando WhatsApp: ${phoneNumber}`);
      
      // ‚úÖ NORMALIZAR N√öMERO DE TELEFONE
      const normalizedPhone = phoneNumber.replace(/\D/g, '');
      const fullPhone = normalizedPhone.startsWith('55') ? `+${normalizedPhone}` : `+55${normalizedPhone}`;
      
      console.log(`üîç [ClinicContextManager] N√∫mero normalizado: ${fullPhone}`);
      
      // ‚úÖ BUSCAR CL√çNICA NO BANCO DE DADOS POR N√öMERO DE WHATSAPP
      const supabase = config.getSupabaseClient();
      
      // ‚úÖ BUSCAR TODAS AS CL√çNICAS PARA DEBUG
      const { data: allClinics, error: allClinicsError } = await supabase
        .from('clinics')
        .select('name, whatsapp_phone, id');
      
      if (allClinicsError) {
        console.error(`‚ùå [ClinicContextManager] Erro ao buscar todas as cl√≠nicas:`, allClinicsError);
      } else {
        console.log(`üîç [ClinicContextManager] Cl√≠nicas dispon√≠veis:`, allClinics.map(c => ({
          name: c.name,
          whatsapp: c.whatsapp_phone,
          id: c.id
        })));
      }
      
      // ‚úÖ BUSCAR CL√çNICA ESPEC√çFICA
      const { data: clinic, error } = await supabase
        .from('clinics')
        .select('name, whatsapp_phone, id')
        .eq('whatsapp_phone', fullPhone)
        .single();
      
      if (error && error.code !== 'PGRST116') {
        console.error(`‚ùå [ClinicContextManager] Erro ao buscar cl√≠nica por WhatsApp:`, error);
        return null;
      }
      
      if (clinic) {
        console.log(`‚úÖ [ClinicContextManager] Cl√≠nica encontrada para ${phoneNumber}: ${clinic.name} (ID: ${clinic.id})`);
        return clinic.name;
      } else {
              // ‚úÖ SEM FALLBACKS HARDCODED - Sistema multicl√≠nicas
      console.log(`‚ö†Ô∏è [ClinicContextManager] N√∫mero ${phoneNumber} n√£o mapeado para nenhuma cl√≠nica no banco`);
      return null;
      }
      
    } catch (error) {
      console.error(`‚ùå [ClinicContextManager] Erro ao mapear WhatsApp ${phoneNumber}:`, error);
      return null; // SEM FALLBACK HARDCODED
    }
  }

  /**
   * Obt√©m estat√≠sticas de uso
   */
  static getStats() {
    return {
      totalJsonContexts: this.jsonContexts.size,
      totalClinics: this.jsonContexts.size,
      availableClinics: Array.from(this.jsonContexts.keys()),
      cacheSize: this.jsonContexts.size
    };
  }
}

export { ClinicContextManager };
