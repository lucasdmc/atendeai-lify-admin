/**
 * Sistema de Humaniza√ß√£o de Mensagens - AtendeAI Lify
 * Arquivo: services/humanizationHelpers.js
 * 
 * Sistema completo para humaniza√ß√£o de conversas em chatbots m√©dicos
 * - Detec√ß√£o emocional avan√ßada
 * - Temperatura din√¢mica baseada no contexto
 * - Varia√ß√µes lingu√≠sticas para evitar robotiza√ß√£o
 * - Formata√ß√£o otimizada para WhatsApp
 * - Personaliza√ß√£o baseada no perfil do usu√°rio
 */

import OpenAI from 'openai';

export default class HumanizationHelpers {
  
  /**
   * Calcula temperatura din√¢mica baseada no contexto conversacional
   * @param {Object} intent - Inten√ß√£o detectada pelo sistema
   * @param {Object} emotionalContext - Contexto emocional do usu√°rio
   * @param {Object} conversationState - Estado atual da conversa
   * @returns {number} Temperatura otimizada (0.3-0.95)
   */
  static calculateDynamicTemperature(intent, emotionalContext, conversationState) {
    console.log('üå°Ô∏è Calculando temperatura din√¢mica:', {
      intent: intent?.name || 'unknown',
      emotion: emotionalContext?.primary || 'neutral',
      state: conversationState?.phase || 'initial'
    });

    // Temperatura base por categoria de inten√ß√£o
    let baseTemperature = 0.7;
    
    if (intent?.category) {
      switch (intent.category) {
        case 'conversation':
        case 'greeting':
          baseTemperature = 0.85; // Mais criativo para conversas
          break;
        case 'appointment':
        case 'scheduling':
          baseTemperature = 0.75; // Equilibrado para agendamentos
          break;
        case 'information':
        case 'medical_info':
          baseTemperature = 0.6; // Mais preciso para informa√ß√µes
          break;
        case 'support':
        case 'help':
          baseTemperature = 0.8; // Emp√°tico para suporte
          break;
        case 'emergency':
        case 'urgent':
          baseTemperature = 0.5; // Direto e claro para emerg√™ncias
          break;
        default:
          baseTemperature = 0.7;
      }
    }

    // Ajustes baseados no contexto emocional
    if (emotionalContext?.primary) {
      switch (emotionalContext.primary) {
        case 'anxiety':
        case 'worried':
          baseTemperature = Math.min(baseTemperature + 0.15, 0.9); // Mais emp√°tico
          break;
        case 'urgency':
        case 'emergency':
          baseTemperature = Math.max(baseTemperature - 0.2, 0.4); // Mais direto
          break;
        case 'frustration':
        case 'angry':
          baseTemperature = Math.min(baseTemperature + 0.1, 0.85); // Mais compreensivo
          break;
        case 'satisfaction':
        case 'happy':
          baseTemperature = Math.min(baseTemperature + 0.05, 0.8); // Ligeiramente mais caloroso
          break;
        case 'confusion':
        case 'lost':
          baseTemperature = Math.max(baseTemperature - 0.1, 0.5); // Mais claro e did√°tico
          break;
      }
    }

    // Ajustes baseados no estado da conversa
    if (conversationState) {
      if (conversationState.isFirstInteraction) {
        baseTemperature = Math.min(baseTemperature + 0.1, 0.9); // Mais acolhedor
      }
      if (conversationState.hasErrors) {
        baseTemperature = Math.min(baseTemperature + 0.1, 0.9); // Mais emp√°tico ap√≥s erros
      }
      if (conversationState.isRepeatedQuestion) {
        baseTemperature = Math.min(baseTemperature + 0.15, 0.95); // Mais variado para evitar repeti√ß√£o
      }
      if (conversationState.phase === 'advanced') {
        baseTemperature = Math.max(baseTemperature - 0.05, 0.6); // Mais eficiente em conversas longas
      }
    }

    const finalTemperature = Math.max(0.3, Math.min(0.95, baseTemperature));
    
    console.log('üå°Ô∏è Temperatura calculada:', {
      base: baseTemperature,
      final: finalTemperature,
      reasoning: this.getTemperatureReasoning(intent, emotionalContext, conversationState)
    });

    return finalTemperature;
  }

  /**
   * Fornece explica√ß√£o para a temperatura calculada
   */
  static getTemperatureReasoning(intent, emotionalContext, conversationState) {
    const reasons = [];
    
    if (intent?.category === 'emergency') reasons.push('emerg√™ncia detectada');
    if (emotionalContext?.primary === 'anxiety') reasons.push('usu√°rio ansioso');
    if (conversationState?.isFirstInteraction) reasons.push('primeira intera√ß√£o');
    if (conversationState?.hasErrors) reasons.push('erros anteriores');
    
    return reasons.length > 0 ? reasons.join(', ') : 'configura√ß√£o padr√£o';
  }

  /**
   * Detecta contexto emocional da mensagem do usu√°rio
   * @param {string} message - Mensagem do usu√°rio
   * @param {Object} memory - Mem√≥ria da conversa
   * @returns {Object} Contexto emocional detectado
   */
  static async detectEmotionalContext(message, memory = {}) {
    try {
      console.log('üé≠ Detectando contexto emocional para:', message.substring(0, 50) + '...');
      
      // An√°lise por palavras-chave (r√°pida)
      const keywordAnalysis = this.analyzeEmotionalKeywords(message);
      
      // An√°lise contextual com hist√≥rico
      const contextualAnalysis = this.analyzeEmotionalContext(message, memory);
      
      // An√°lise LLM para casos complexos ou baixa confian√ßa
      let llmAnalysis = null;
      if (keywordAnalysis.confidence < 0.7 || contextualAnalysis.complexity > 0.8) {
        llmAnalysis = await this.performLLMEmotionalAnalysis(message, memory);
      }
      
      // Combinar an√°lises para resultado final
      const finalContext = this.combineEmotionalAnalyses(
        keywordAnalysis, 
        contextualAnalysis, 
        llmAnalysis
      );
      
      console.log('üé≠ Contexto emocional detectado:', {
        primary: finalContext.primary,
        confidence: finalContext.confidence,
        intensity: finalContext.intensity
      });
      
      return finalContext;
      
    } catch (error) {
      console.error('‚ùå Erro na detec√ß√£o emocional:', error);
      return { 
        primary: 'neutral', 
        confidence: 0.5, 
        intensity: 0.5,
        error: error.message 
      };
    }
  }

  /**
   * An√°lise emocional baseada em palavras-chave e padr√µes
   */
  static analyzeEmotionalKeywords(message) {
    const emotionalPatterns = {
      anxiety: {
        keywords: [
          'preocupado', 'ansioso', 'nervoso', 'medo', 'receio',
          'apreensivo', 'inquieto', 'tenso', 'aflito', 'angustiado',
          'inseguro', 'assustado', 'temeroso'
        ],
        phrases: [
          'estou preocupado', 'tenho medo', 'fico ansioso',
          'me deixa nervoso', 'estou receoso', 'n√£o sei o que fazer',
          'estou com medo', 'me sinto inseguro'
        ],
        weight: 0.9
      },
      urgency: {
        keywords: [
          'urgente', 'r√°pido', 'hoje', 'agora', 'imediato',
          'pressa', 'emerg√™ncia', 'logo', 'quanto antes',
          'j√°', 'rapidinho', 'depressa'
        ],
        phrases: [
          '√© urgente', 'preciso hoje', 'o mais r√°pido poss√≠vel',
          'tenho pressa', '√© uma emerg√™ncia', 'n√£o pode esperar',
          'preciso agora', '√© para j√°'
        ],
        weight: 0.95
      },
      frustration: {
        keywords: [
          'n√£o funciona', 'problema', 'dif√≠cil', 'complicado',
          'irritado', 'chateado', 'cansado', 'desistir',
          'ruim', 'p√©ssimo', 'horr√≠vel', 'in√∫til'
        ],
        phrases: [
          'n√£o est√° funcionando', 'est√° dif√≠cil', 'n√£o consigo',
          'estou cansado de', 'vou desistir', 'isso √© um problema',
          'que complica√ß√£o', 'n√£o aguento mais'
        ],
        weight: 0.85
      },
      satisfaction: {
        keywords: [
          'obrigado', '√≥timo', 'perfeito', 'excelente',
          'maravilhoso', 'adorei', 'gostei', 'satisfeito',
          'bom', 'legal', 'bacana', 'show'
        ],
        phrases: [
          'muito obrigado', 'ficou √≥timo', 'adorei o atendimento',
          'estou satisfeito', 'superou expectativas', 'muito bom',
          'gostei muito', 'est√° perfeito'
        ],
        weight: 0.8
      },
      confusion: {
        keywords: [
          'n√£o entendi', 'confuso', 'd√∫vida', 'como assim',
          'n√£o sei', 'perdido', 'explicar melhor',
          'n√£o compreendi', 'meio perdido'
        ],
        phrases: [
          'n√£o entendi bem', 'estou confuso', 'pode explicar',
          'n√£o sei como', 'estou perdido', 'n√£o compreendi',
          'me explica melhor', 'como funciona'
        ],
        weight: 0.75
      },
      pain: {
        keywords: [
          'dor', 'doendo', 'machuca', 'sofrendo',
          'incomoda', 'lateja', 'queima', 'arde'
        ],
        phrases: [
          'estou com dor', 'est√° doendo', 'sinto dor',
          'd√≥i muito', 'n√£o aguento a dor'
        ],
        weight: 0.9
      }
    };

    const lowerMessage = message.toLowerCase();
    const detectedEmotions = {};

    Object.entries(emotionalPatterns).forEach(([emotion, pattern]) => {
      let score = 0;
      let matches = 0;

      // Verificar palavras-chave
      pattern.keywords.forEach(keyword => {
        if (lowerMessage.includes(keyword)) {
          score += pattern.weight;
          matches++;
        }
      });

      // Verificar frases (peso maior)
      pattern.phrases.forEach(phrase => {
        if (lowerMessage.includes(phrase)) {
          score += pattern.weight * 1.5;
          matches++;
        }
      });

      if (matches > 0) {
        detectedEmotions[emotion] = {
          score: score,
          matches: matches,
          confidence: Math.min(score / 2, 1)
        };
      }
    });

    // Encontrar emo√ß√£o prim√°ria
    const primaryEmotion = Object.entries(detectedEmotions)
      .sort(([,a], [,b]) => b.score - a.score)[0];

    if (!primaryEmotion) {
      return { 
        primary: 'neutral', 
        confidence: 0.8, 
        intensity: 0.5,
        method: 'keyword_analysis'
      };
    }

    return {
      primary: primaryEmotion[0],
      confidence: primaryEmotion[1].confidence,
      intensity: Math.min(primaryEmotion[1].score / 3, 1),
      allEmotions: detectedEmotions,
      method: 'keyword_analysis'
    };
  }

  /**
   * An√°lise contextual considerando hist√≥rico da conversa
   */
  static analyzeEmotionalContext(message, memory) {
    const analysis = {
      complexity: 0.5,
      hasHistory: memory?.history?.length > 0,
      recentEmotions: [],
      contextualFactors: []
    };

    if (memory?.history?.length > 0) {
      // Analisar √∫ltimas 3 mensagens para padr√µes emocionais
      const recentMessages = memory.history.slice(-3);
      
      recentMessages.forEach(msg => {
        if (msg.role === 'user') {
          const quickAnalysis = this.analyzeEmotionalKeywords(msg.content);
          if (quickAnalysis.primary !== 'neutral') {
            analysis.recentEmotions.push(quickAnalysis.primary);
          }
        }
      });

      // Verificar se h√° padr√£o de frustra√ß√£o crescente
      if (analysis.recentEmotions.filter(e => e === 'frustration').length >= 2) {
        analysis.contextualFactors.push('escalating_frustration');
        analysis.complexity = 0.9;
      }

      // Verificar se h√° repeti√ß√£o de perguntas
      const userMessages = recentMessages.filter(m => m.role === 'user');
      if (userMessages.length >= 2) {
        const similarity = this.calculateMessageSimilarity(
          userMessages[userMessages.length - 1].content,
          userMessages[userMessages.length - 2].content
        );
        if (similarity > 0.7) {
          analysis.contextualFactors.push('repeated_question');
          analysis.complexity = 0.8;
        }
      }
    }

    // Verificar indicadores de urg√™ncia m√©dica
    const urgencyIndicators = [
      'dor no peito', 'falta de ar', 'tontura', 'desmaio',
      'sangramento', 'febre alta', 'v√¥mito', 'dor forte'
    ];
    
    if (urgencyIndicators.some(indicator => 
      message.toLowerCase().includes(indicator))) {
      analysis.contextualFactors.push('medical_urgency');
      analysis.complexity = 0.9;
    }

    return analysis;
  }

  /**
   * An√°lise LLM para casos complexos
   */
  static async performLLMEmotionalAnalysis(message, memory) {
    try {
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
        baseURL: process.env.OPENAI_API_BASE
      });
      
      const recentHistory = memory?.history?.slice(-3) || [];
      const historyText = recentHistory
        .map(h => `${h.role}: ${h.content}`)
        .join('\n');

      const prompt = `Analise o contexto emocional desta mensagem de um paciente contatando uma cl√≠nica m√©dica.

Mensagem atual: "${message}"

Hist√≥rico recente da conversa:
${historyText || 'Sem hist√≥rico anterior'}

Retorne um JSON com:
{
  "primary_emotion": "anxiety|urgency|frustration|satisfaction|confusion|pain|neutral",
  "intensity": 0.0-1.0,
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o breve",
  "medical_urgency": true/false,
  "response_tone": "empathetic|reassuring|efficient|celebratory|clarifying|professional|urgent"
}

Foque no contexto m√©dico - pacientes podem estar preocupados com sa√∫de, frustrados com processos, ou com urg√™ncia sobre sintomas.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
        max_tokens: 200,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) {
        throw new Error('Resposta vazia da API');
      }

      const analysis = JSON.parse(response);

      return {
        primary: analysis.primary_emotion,
        confidence: analysis.confidence,
        intensity: analysis.intensity,
        reasoning: analysis.reasoning,
        medicalUrgency: analysis.medical_urgency,
        recommendedTone: analysis.response_tone,
        method: 'llm_analysis'
      };

    } catch (error) {
      console.error('‚ùå Erro na an√°lise LLM emocional:', error);
      return null;
    }
  }

  /**
   * Combina diferentes an√°lises emocionais
   */
  static combineEmotionalAnalyses(keywordAnalysis, contextualAnalysis, llmAnalysis) {
    // Se temos an√°lise LLM com alta confian√ßa, prioriz√°-la
    if (llmAnalysis && llmAnalysis.confidence > 0.8) {
      return {
        ...llmAnalysis,
        contextualFactors: contextualAnalysis.contextualFactors
      };
    }

    // Se an√°lise por palavras-chave tem alta confian√ßa, us√°-la
    if (keywordAnalysis.confidence > 0.8) {
      return {
        ...keywordAnalysis,
        contextualFactors: contextualAnalysis.contextualFactors
      };
    }

    // Combinar an√°lises com pesos
    const finalAnalysis = { ...keywordAnalysis };
    
    // Ajustar baseado em fatores contextuais
    if (contextualAnalysis.contextualFactors.includes('escalating_frustration')) {
      finalAnalysis.primary = 'frustration';
      finalAnalysis.intensity = Math.min(finalAnalysis.intensity + 0.3, 1);
    }
    
    if (contextualAnalysis.contextualFactors.includes('medical_urgency')) {
      finalAnalysis.primary = 'urgency';
      finalAnalysis.intensity = Math.min(finalAnalysis.intensity + 0.4, 1);
    }

    // Usar an√°lise LLM como backup se dispon√≠vel
    if (llmAnalysis && finalAnalysis.confidence < 0.6) {
      return {
        ...llmAnalysis,
        contextualFactors: contextualAnalysis.contextualFactors
      };
    }

    return {
      ...finalAnalysis,
      contextualFactors: contextualAnalysis.contextualFactors
    };
  }

  /**
   * Calcula similaridade entre mensagens
   */
  static calculateMessageSimilarity(msg1, msg2) {
    const words1 = msg1.toLowerCase().split(/\s+/);
    const words2 = msg2.toLowerCase().split(/\s+/);
    
    const commonWords = words1.filter(word => 
      words2.includes(word) && word.length > 2
    );
    
    const totalUniqueWords = new Set([...words1, ...words2]).size;
    
    return commonWords.length / totalUniqueWords;
  }

  /**
   * Sistema de varia√ß√µes lingu√≠sticas para evitar robotiza√ß√£o
   */
  static getConversationalVariations() {
    return {
      greetings: {
        first_time: [
          "Oi! üòä Eu sou o assistente virtual da {clinicName}!",
          "Ol√°! Tudo bem? Sou o assistente da {clinicName}!",
          "Oi, como vai? Assistente da {clinicName} aqui!",
          "Ol√°! Prazer em conhec√™-lo! Sou da {clinicName}.",
          "Oi! üëã Assistente da {clinicName} aqui para ajudar!"
        ],
        returning: [
          "Oi de novo! Como posso ajudar hoje?",
          "Ol√°! Que bom te ver por aqui novamente!",
          "Oi! Como voc√™ est√°? Em que posso ajudar?",
          "Ol√°! Espero que esteja bem! Como posso ajudar?",
          "Oi! Sempre um prazer falar com voc√™!"
        ],
        time_based: {
          morning: [
            "Bom dia! ‚òÄÔ∏è Como posso ajudar hoje?",
            "Oi! Bom dia! Em que posso ajud√°-lo?",
            "Bom dia! Espero que tenha acordado bem!"
          ],
          afternoon: [
            "Boa tarde! Como est√° seu dia?",
            "Oi! Boa tarde! Como posso ajudar?",
            "Boa tarde! Em que posso ser √∫til?"
          ],
          evening: [
            "Boa noite! Como posso ajudar?",
            "Oi! Boa noite! Em que posso ajud√°-lo?",
            "Boa noite! Espero que tenha tido um bom dia!"
          ]
        }
      },
      appointment_offers: {
        casual: [
          "Quer agendar uma consulta?",
          "Precisa marcar um hor√°rio?",
          "Vamos agendar sua consulta?",
          "Que tal marcarmos sua consulta?",
          "Posso ajudar com um agendamento?"
        ],
        empathetic: [
          "Vou te ajudar a agendar sua consulta!",
          "Claro! Vamos cuidar do seu agendamento!",
          "Fico feliz em ajudar com sua consulta!",
          "Vamos encontrar o melhor hor√°rio para voc√™!",
          "Ser√° um prazer agendar sua consulta!"
        ],
        urgent: [
          "Vou verificar os hor√°rios mais pr√≥ximos!",
          "Entendo a urg√™ncia, vamos agendar rapidinho!",
          "Vou encontrar o primeiro hor√°rio dispon√≠vel!",
          "Vamos resolver isso o quanto antes!"
        ]
      },
      confirmations: {
        positive: [
          "Perfeito! ‚úÖ",
          "√ìtimo! üëç",
          "Excelente!",
          "Maravilha!",
          "Combinado! ü§ù",
          "Show!",
          "Beleza!"
        ],
        understanding: [
          "Entendi!",
          "Compreendo!",
          "Certo!",
          "Ah, sim!",
          "Perfeito, entendi!",
          "Claro!",
          "Sim, entendi!"
        ]
      },
      empathy_expressions: {
        anxiety: [
          "Entendo sua preocupa√ß√£o...",
          "Compreendo que deve estar ansioso...",
          "√â natural se sentir assim...",
          "Vamos resolver isso juntos...",
          "Sei que pode ser preocupante...",
          "Compreendo sua ansiedade..."
        ],
        frustration: [
          "Pe√ßo desculpas pela dificuldade...",
          "Entendo sua frustra√ß√£o...",
          "Vamos resolver isso de forma mais simples...",
          "Compreendo que deve ser chato...",
          "Sinto muito pelo inconveniente...",
          "Vou tentar facilitar para voc√™..."
        ],
        urgency: [
          "Entendo que √© urgente...",
          "Vou priorizar seu caso...",
          "Compreendo a pressa...",
          "Vamos resolver rapidamente...",
          "Sei que n√£o pode esperar...",
          "Vou agilizar para voc√™..."
        ],
        pain: [
          "Sinto muito que esteja sentindo dor...",
          "Compreendo que deve estar incomodando...",
          "Vamos cuidar disso rapidamente...",
          "Entendo que deve estar sofrendo...",
          "Vou te ajudar o mais r√°pido poss√≠vel..."
        ]
      },
      transitions: [
        "Agora,",
        "Ent√£o,",
        "Bem,",
        "Certo,",
        "Perfeito,",
        "√ìtimo,",
        "Beleza,"
      ],
      closings: [
        "Em que mais posso ajudar?",
        "Precisa de mais alguma coisa?",
        "Tem mais alguma d√∫vida?",
        "Posso ajudar com mais alguma coisa?",
        "Mais alguma coisa que posso fazer por voc√™?"
      ]
    };
  }

  /**
   * Seleciona varia√ß√£o apropriada baseada no contexto
   */
  static selectVariation(category, subcategory, context = {}) {
    const variations = this.getConversationalVariations();
    let options = variations[category];
    
    if (subcategory && options[subcategory]) {
      options = options[subcategory];
    }
    
    if (!options || !Array.isArray(options)) {
      return null;
    }

    // Evitar repeti√ß√µes recentes
    const usedVariations = context.memory?.usedVariations || [];
    const availableOptions = options.filter(option => 
      !usedVariations.includes(option)
    );

    const finalOptions = availableOptions.length > 0 ? availableOptions : options;
    
    // Sele√ß√£o inteligente baseada no contexto emocional
    let selectedIndex;
    if (context.emotionalContext?.primary === 'anxiety' && finalOptions.length > 2) {
      // Para ansiedade, preferir op√ß√µes mais emp√°ticas (√∫ltimas da lista)
      selectedIndex = Math.floor(Math.random() * 2) + Math.max(0, finalOptions.length - 2);
    } else if (context.emotionalContext?.primary === 'urgency' && finalOptions.length > 1) {
      // Para urg√™ncia, preferir op√ß√µes mais diretas (primeiras da lista)
      selectedIndex = Math.floor(Math.random() * Math.min(2, finalOptions.length));
    } else {
      selectedIndex = Math.floor(Math.random() * finalOptions.length);
    }

    const selected = finalOptions[selectedIndex];
    
    // Registrar uso para evitar repeti√ß√£o
    if (!context.memory) context.memory = {};
    if (!context.memory.usedVariations) context.memory.usedVariations = [];
    
    context.memory.usedVariations.push(selected);
    
    // Manter apenas √∫ltimas 15 varia√ß√µes
    if (context.memory.usedVariations.length > 15) {
      context.memory.usedVariations = context.memory.usedVariations.slice(-15);
    }

    return selected;
  }

  /**
   * Formata resposta para otimiza√ß√£o WhatsApp
   */
  static formatForWhatsApp(response, context = {}) {
    console.log('üì± Formatando para WhatsApp...');
    
    let formattedResponse = response;
    
    // 1. Limitar comprimento da mensagem
    formattedResponse = this.limitMessageLength(formattedResponse);
    
    // 2. Adicionar emojis contextuais
    formattedResponse = this.addContextualEmojis(formattedResponse, context);
    
    // 3. Otimizar quebras de linha
    formattedResponse = this.optimizeLineBreaks(formattedResponse);
    
    // 4. Adicionar elementos visuais
    formattedResponse = this.addVisualElements(formattedResponse);
    
    // 5. Verifica√ß√£o e corre√ß√£o final
    formattedResponse = this.finalFormatCheck(formattedResponse);
    
    console.log('üì± Formata√ß√£o WhatsApp conclu√≠da');
    return formattedResponse;
  }

  /**
   * Limita comprimento da mensagem para WhatsApp
   */
  static limitMessageLength(response, maxLength = 450) {
    if (response.length <= maxLength) {
      return response;
    }
    
    // Tentar quebrar por senten√ßas
    const sentences = response.split(/[.!?]+/);
    let truncated = '';
    
    for (const sentence of sentences) {
      const potentialLength = truncated.length + sentence.length + 1;
      if (potentialLength > maxLength - 50) {
        break;
      }
      truncated += sentence.trim() + '. ';
    }
    
    // Se ficou muito curto, usar substring
    if (truncated.length < 100) {
      truncated = response.substring(0, maxLength - 50);
      // Tentar terminar em palavra completa
      const lastSpace = truncated.lastIndexOf(' ');
      if (lastSpace > truncated.length - 20) {
        truncated = truncated.substring(0, lastSpace);
      }
    }
    
    // Adicionar indica√ß√£o de continua√ß√£o se necess√°rio
    if (truncated.length < response.length) {
      truncated = truncated.trim();
      if (!truncated.endsWith('.') && !truncated.endsWith('!') && !truncated.endsWith('?')) {
        truncated += '.';
      }
      truncated += '\n\nüí¨ Quer saber mais alguma coisa?';
    }
    
    return truncated.trim();
  }

  /**
   * Adiciona emojis contextuais apropriados
   */
  static addContextualEmojis(response, context) {
    let formattedResponse = response;
    
    // Emojis baseados no contexto emocional
    if (context.emotionalContext?.primary) {
      const emojiMap = {
        anxiety: 'ü§ó',
        satisfaction: 'üòä',
        urgency: '‚ö°',
        confusion: 'üí°',
        pain: 'ü©∫',
        frustration: 'üòå'
      };
      
      const emoji = emojiMap[context.emotionalContext.primary];
      if (emoji && !formattedResponse.includes(emoji)) {
        // Adicionar emoji na sauda√ß√£o se houver
        if (formattedResponse.toLowerCase().match(/^(oi|ol√°|bom dia|boa tarde|boa noite)/)) {
          formattedResponse = formattedResponse.replace(
            /^(oi|ol√°|bom dia|boa tarde|boa noite)/i, 
            `$1 ${emoji}`
          );
        }
      }
    }
    
    // Emojis contextuais para palavras espec√≠ficas
    const emojiReplacements = [
      { pattern: /\b(endere√ßo|localiza√ß√£o|onde fica)\b/gi, emoji: 'üìç' },
      { pattern: /\b(telefone|contato|ligar)\b/gi, emoji: 'üìû' },
      { pattern: /\b(hor√°rio|funcionamento|aberto)\b/gi, emoji: 'üïí' },
      { pattern: /\b(agendamento|consulta|marcar)\b/gi, emoji: 'üìÖ' },
      { pattern: /\b(doutor|m√©dico|doutora)\b/gi, emoji: 'üë®‚Äç‚öïÔ∏è' },
      { pattern: /\b(exame|teste)\b/gi, emoji: 'üî¨' },
      { pattern: /\b(rem√©dio|medicamento)\b/gi, emoji: 'üíä' }
    ];
    
    emojiReplacements.forEach(({ pattern, emoji }) => {
      formattedResponse = formattedResponse.replace(pattern, `${emoji} $&`);
    });
    
    return formattedResponse;
  }

  /**
   * Otimiza quebras de linha para mobile
   */
  static optimizeLineBreaks(response) {
    return response
      // Remover quebras excessivas
      .replace(/\n{3,}/g, '\n\n')
      // Adicionar quebra antes de listas
      .replace(/(\w)\n([‚Ä¢\-\d])/g, '$1\n\n$2')
      // Adicionar quebra ap√≥s perguntas
      .replace(/\?\s*([A-Z])/g, '?\n\n$1')
      // Adicionar quebra antes de informa√ß√µes importantes
      .replace(/([.!])\s*(Endere√ßo|Telefone|Hor√°rio|Importante|Aten√ß√£o)/g, '$1\n\n$2');
  }

  /**
   * Adiciona elementos visuais para melhor legibilidade
   */
  static addVisualElements(response) {
    return response
      // Converter listas simples em bullets
      .replace(/^- /gm, '‚Ä¢ ')
      // Converter listas numeradas em emojis
      .replace(/^(\d+)\.\s/gm, '$1Ô∏è‚É£ ')
      // Destacar informa√ß√µes importantes
      .replace(/\b(importante|aten√ß√£o|obs|nota):/gi, '‚ö†Ô∏è $&')
      // Destacar valores monet√°rios
      .replace(/R\$\s*(\d+(?:,\d{2})?)/g, 'üí∞ R$ $1');
  }

  /**
   * Verifica√ß√£o e corre√ß√£o final da formata√ß√£o
   */
  static finalFormatCheck(response) {
    return response
      // Normalizar espa√ßos
      .replace(/[ \t]+/g, ' ')
      // Corrigir espa√ßamento antes de pontua√ß√£o
      .replace(/\s+([.!?])/g, '$1')
      // Adicionar espa√ßo ap√≥s pontua√ß√£o quando necess√°rio
      .replace(/([.!?])([A-Z])/g, '$1 $2')
      // Remover espa√ßos no in√≠cio e fim
      .trim();
  }

  /**
   * Aplica personaliza√ß√£o baseada no perfil do usu√°rio
   */
  static personalizeResponse(response, userProfile = {}, conversationHistory = []) {
    let personalizedResponse = response;

    // Personaliza√ß√£o por nome
    if (userProfile?.name) {
      personalizedResponse = this.addNamePersonalization(personalizedResponse, userProfile.name);
    }

    // Personaliza√ß√£o por hist√≥rico
    if (conversationHistory.length > 0) {
      personalizedResponse = this.addHistoryPersonalization(personalizedResponse, conversationHistory);
    }

    // Personaliza√ß√£o por prefer√™ncias (se dispon√≠vel)
    if (userProfile?.preferences) {
      personalizedResponse = this.addPreferencePersonalization(personalizedResponse, userProfile.preferences);
    }

    return personalizedResponse;
  }

  /**
   * Adiciona personaliza√ß√£o por nome
   */
  static addNamePersonalization(response, name) {
    const firstName = name.split(' ')[0];
    
    const namePatterns = [
      {
        pattern: /^(oi|ol√°)(!|\s)/i,
        replacement: `$1, ${firstName}$2`
      },
      {
        pattern: /(como posso ajudar|em que posso ajudar)(\?)?$/i,
        replacement: `$1 voc√™, ${firstName}$2`
      },
      {
        pattern: /^(perfeito|√≥timo|excelente)(!|\s)/i,
        replacement: `$1, ${firstName}$2`
      }
    ];

    let personalizedResponse = response;
    
    // Aplicar apenas um padr√£o para evitar repeti√ß√£o excessiva do nome
    for (const { pattern, replacement } of namePatterns) {
      if (pattern.test(personalizedResponse)) {
        personalizedResponse = personalizedResponse.replace(pattern, replacement);
        break; // Aplicar apenas o primeiro padr√£o que combinar
      }
    }

    return personalizedResponse;
  }

  /**
   * Adiciona personaliza√ß√£o baseada no hist√≥rico
   */
  static addHistoryPersonalization(response, history) {
    const patterns = this.analyzeHistoryPatterns(history);
    let personalizedResponse = response;

    if (patterns.hasScheduledBefore) {
      personalizedResponse = personalizedResponse.replace(
        /vou te ajudar a agendar/i,
        'vou te ajudar a agendar novamente'
      );
    }

    if (patterns.hadIssues) {
      personalizedResponse = 'Espero que desta vez corra tudo bem! ' + personalizedResponse;
    }

    if (patterns.isFrequentUser) {
      personalizedResponse = personalizedResponse.replace(
        /^(oi|ol√°)/i,
        '$1! Que bom te ver por aqui novamente'
      );
    }

    if (patterns.hasAskedSameQuestion) {
      personalizedResponse = 'Como mencionei antes, ' + personalizedResponse.toLowerCase();
    }

    return personalizedResponse;
  }

  /**
   * Adiciona personaliza√ß√£o por prefer√™ncias
   */
  static addPreferencePersonalization(response, preferences) {
    let personalizedResponse = response;

    if (preferences.formalTreatment) {
      personalizedResponse = personalizedResponse
        .replace(/\bvoc√™\b/g, 'o senhor/a senhora')
        .replace(/\bteu\b/g, 'seu')
        .replace(/\boi\b/gi, 'Ol√°');
    }

    if (preferences.minimalEmojis) {
      personalizedResponse = personalizedResponse.replace(/[üòäüòåü§óüëç‚úÖüéâ]/g, '');
    }

    return personalizedResponse;
  }

  /**
   * Analisa padr√µes no hist√≥rico da conversa
   */
  static analyzeHistoryPatterns(history) {
    const patterns = {
      hasScheduledBefore: false,
      hadIssues: false,
      isFrequentUser: false,
      hasAskedSameQuestion: false
    };

    if (!history || history.length === 0) {
      return patterns;
    }

    const userMessages = history.filter(h => h.role === 'user');
    
    // Verificar agendamentos anteriores
    patterns.hasScheduledBefore = userMessages.some(msg => 
      /agendar|marcar|consulta|hor√°rio/.test(msg.content.toLowerCase())
    );

    // Verificar problemas anteriores
    patterns.hadIssues = userMessages.some(msg => 
      /problema|erro|n√£o funciona|dif√≠cil|frustrado/.test(msg.content.toLowerCase())
    );

    // Verificar se √© usu√°rio frequente
    patterns.isFrequentUser = userMessages.length > 8;

    // Verificar perguntas repetidas
    if (userMessages.length >= 2) {
      const lastMessage = userMessages[userMessages.length - 1].content;
      const previousMessages = userMessages.slice(0, -1);
      
      patterns.hasAskedSameQuestion = previousMessages.some(msg => 
        this.calculateMessageSimilarity(lastMessage, msg.content) > 0.8
      );
    }

    return patterns;
  }

  /**
   * Calcula tokens √≥timos baseado no contexto
   */
  static calculateOptimalTokens(intent, emotionalContext) {
    let baseTokens = 350; // Padr√£o otimizado para WhatsApp
    
    // Ajustar por categoria de inten√ß√£o
    if (intent?.category) {
      switch (intent.category) {
        case 'appointment':
        case 'scheduling':
          baseTokens = 400; // Mais espa√ßo para agendamentos
          break;
        case 'information':
        case 'medical_info':
          baseTokens = 300; // Informa√ß√µes precisas e concisas
          break;
        case 'emergency':
        case 'urgent':
          baseTokens = 250; // Respostas diretas e r√°pidas
          break;
        case 'support':
        case 'help':
          baseTokens = 380; // Espa√ßo para explica√ß√µes detalhadas
          break;
      }
    }
    
    // Ajustar por contexto emocional
    if (emotionalContext?.primary) {
      switch (emotionalContext.primary) {
        case 'anxiety':
        case 'pain':
          baseTokens += 80; // Mais espa√ßo para empatia e tranquiliza√ß√£o
          break;
        case 'urgency':
          baseTokens -= 50; // Respostas mais diretas
          break;
        case 'confusion':
          baseTokens += 60; // Mais espa√ßo para explica√ß√µes claras
          break;
        case 'frustration':
          baseTokens += 40; // Espa√ßo para acalmar e resolver
          break;
      }
    }
    
    // Limites para WhatsApp
    return Math.max(200, Math.min(500, baseTokens));
  }

  /**
   * Gera resposta de erro humanizada
   */
  static generateHumanizedErrorResponse(error, context = {}) {
    const errorResponses = {
      general: [
        "Ops! Tive um pequeno problema t√©cnico. Pode tentar novamente? üòÖ",
        "Desculpe, algo deu errado aqui. Vamos tentar de novo?",
        "Eita! Parece que tive uma falha. Pode repetir sua mensagem?",
        "Opa! Algo n√£o funcionou como esperado. Tenta mais uma vez?"
      ],
      api_error: [
        "Estou com dificuldade para processar sua mensagem. Pode tentar novamente?",
        "Houve um probleminha na comunica√ß√£o. Vamos tentar de novo?",
        "Ops! Falha na conex√£o. Pode repetir, por favor?"
      ],
      timeout: [
        "Demorei um pouco para responder. Pode tentar novamente?",
        "Ops! Levei mais tempo que o esperado. Vamos tentar de novo?",
        "Desculpe a demora! Pode repetir sua mensagem?"
      ]
    };
    
    // Determinar tipo de erro
    let errorType = 'general';
    if (error.message?.includes('timeout')) errorType = 'timeout';
    if (error.message?.includes('API') || error.message?.includes('network')) errorType = 'api_error';
    
    const responses = errorResponses[errorType];
    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];
    
    // Adicionar contexto emocional se o usu√°rio estava ansioso
    if (context.emotionalContext?.primary === 'anxiety') {
      return "Calma, n√£o se preocupe! " + selectedResponse + " Estou aqui para ajudar! ü§ó";
    }
    
    if (context.emotionalContext?.primary === 'urgency') {
      return "Desculpe pela demora! " + selectedResponse + " Vou resolver rapidinho! ‚ö°";
    }
    
    return selectedResponse;
  }

  /**
   * Valida e sanitiza entrada do usu√°rio
   */
  static sanitizeUserInput(input) {
    if (typeof input !== 'string') {
      return '';
    }
    
    return input
      .trim()
      .substring(0, 1000) // Limitar tamanho
      .replace(/[<>]/g, '') // Remover caracteres potencialmente perigosos
      .replace(/\s+/g, ' '); // Normalizar espa√ßos
  }

  /**
   * Detecta idioma da mensagem (b√°sico)
   */
  static detectLanguage(message) {
    const portugueseIndicators = [
      'oi', 'ol√°', 'bom dia', 'boa tarde', 'boa noite',
      'obrigado', 'obrigada', 'por favor', 'desculpa',
      'n√£o', 'sim', 'como', 'quando', 'onde', 'que'
    ];
    
    const lowerMessage = message.toLowerCase();
    const matches = portugueseIndicators.filter(indicator => 
      lowerMessage.includes(indicator)
    ).length;
    
    return matches >= 2 ? 'pt-BR' : 'unknown';
  }

  /**
   * Gera estat√≠sticas de uso para an√°lise
   */
  static generateUsageStats(interactions = []) {
    const stats = {
      totalInteractions: interactions.length,
      emotionDistribution: {},
      temperatureAverage: 0,
      responseTimeAverage: 0,
      satisfactionScore: 0
    };

    if (interactions.length === 0) {
      return stats;
    }

    // Distribui√ß√£o emocional
    interactions.forEach(interaction => {
      const emotion = interaction.emotionalContext?.primary || 'neutral';
      stats.emotionDistribution[emotion] = (stats.emotionDistribution[emotion] || 0) + 1;
    });

    // Temperatura m√©dia
    const temperatures = interactions
      .map(i => i.temperature)
      .filter(t => typeof t === 'number');
    
    if (temperatures.length > 0) {
      stats.temperatureAverage = temperatures.reduce((sum, temp) => sum + temp, 0) / temperatures.length;
    }

    // Tempo de resposta m√©dio
    const responseTimes = interactions
      .map(i => i.responseTime)
      .filter(t => typeof t === 'number');
    
    if (responseTimes.length > 0) {
      stats.responseTimeAverage = responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length;
    }

    return stats;
  }
}

// Export padr√£o para ES modules

