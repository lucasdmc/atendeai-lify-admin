// ========================================
// TESTE DOS SERVI√áOS ROBUSTOS AI
// ========================================

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configurar dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '.env') });

console.log('üîß TESTANDO SERVI√áOS ROBUSTOS AI');
console.log('====================================');

// Verificar configura√ß√µes
console.log('üìã 1. VERIFICANDO CONFIGURA√á√ïES');
console.log('‚îÄ'.repeat(50));

console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('ANTHROPIC_API_KEY:', process.env.ANTHROPIC_API_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('WHATSAPP_META_ACCESS_TOKEN:', process.env.WHATSAPP_META_ACCESS_TOKEN ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

// Testar importa√ß√£o dos servi√ßos robustos
console.log('');
console.log('üìã 2. TESTANDO IMPORTA√á√ÉO DOS SERVI√áOS');
console.log('‚îÄ'.repeat(50));

try {
  // Testar importa√ß√£o do LLMOrchestratorService
  const { LLMOrchestratorService } = await import('./src/services/ai/llmOrchestratorService.js');
  console.log('‚úÖ LLMOrchestratorService importado com sucesso');
  
  // Testar importa√ß√£o do AIOrchestrator
  const { AIOrchestrator } = await import('./src/services/ai/ai-orchestrator.js');
  console.log('‚úÖ AIOrchestrator importado com sucesso');
  
  // Testar importa√ß√£o dos outros servi√ßos
  const { IntentRecognitionService } = await import('./src/services/ai/intentRecognitionService.js');
  console.log('‚úÖ IntentRecognitionService importado com sucesso');
  
  const { RAGEngineService } = await import('./src/services/ai/ragEngineService.js');
  console.log('‚úÖ RAGEngineService importado com sucesso');
  
  const { ConversationMemoryService } = await import('./src/services/ai/conversationMemoryService.js');
  console.log('‚úÖ ConversationMemoryService importado com sucesso');
  
} catch (error) {
  console.error('‚ùå Erro ao importar servi√ßos robustos:', error.message);
  console.error('Stack:', error.stack);
}

// Testar processamento de mensagem
console.log('');
console.log('üìã 3. TESTANDO PROCESSAMENTO DE MENSAGEM');
console.log('‚îÄ'.repeat(50));

try {
  const { LLMOrchestratorService } = await import('./src/services/ai/llmOrchestratorService.js');
  
  const testRequest = {
    phoneNumber: '5511999999999',
    message: 'Ol√°, gostaria de agendar uma consulta',
    conversationId: 'test-conversation-123',
    userId: 'test-user'
  };
  
  console.log('üß™ Testando processamento de mensagem...');
  const response = await LLMOrchestratorService.processMessage(testRequest);
  
  console.log('‚úÖ Processamento bem-sucedido!');
  console.log('Resposta:', response.response);
  console.log('Intent:', response.intent);
  console.log('Tools used:', response.toolsUsed);
  
} catch (error) {
  console.error('‚ùå Erro no processamento:', error.message);
  console.error('Stack:', error.stack);
}

// Testar webhook atual
console.log('');
console.log('üìã 4. VERIFICANDO WEBHOOK ATUAL');
console.log('‚îÄ'.repeat(50));

const webhookContent = await import('fs').then(fs => fs.readFileSync('./routes/webhook.js', 'utf8'));

if (webhookContent.includes('processMessageWithAIDirect')) {
  console.log('‚ö†Ô∏è  WEBHOOK EST√Å USANDO IMPLEMENTA√á√ÉO SIMPLIFICADA!');
  console.log('   O webhook n√£o est√° usando os servi√ßos robustos.');
  console.log('   Est√° usando processMessageWithAIDirect (vers√£o mockada)');
} else {
  console.log('‚úÖ Webhook parece estar usando servi√ßos robustos');
}

if (webhookContent.includes('LLMOrchestratorService.processMessage')) {
  console.log('‚úÖ Webhook est√° usando LLMOrchestratorService');
} else {
  console.log('‚ùå Webhook N√ÉO est√° usando LLMOrchestratorService');
}

console.log('');
console.log('üìã 5. RECOMENDA√á√ïES');
console.log('‚îÄ'.repeat(50));

console.log('üîß Para corrigir o problema:');
console.log('1. Modificar routes/webhook.js para usar LLMOrchestratorService');
console.log('2. Remover as fun√ß√µes processMessageWithAIDirect e processMessageWithAIRobust');
console.log('3. Importar e usar os servi√ßos robustos diretamente');
console.log('4. Verificar se todas as depend√™ncias est√£o instaladas');

console.log('');
console.log('‚úÖ Teste conclu√≠do!'); 