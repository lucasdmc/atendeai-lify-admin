// ========================================
// APPOINTMENT CONFIRMATION SERVICE (JavaScript)
// Vers√£o compat√≠vel com Node.js para webhook
// ========================================

import { AppointmentService } from './appointmentService.js';

export class AppointmentConfirmationService {
  static pendingConfirmations = new Map();

  /**
   * Agenda uma confirma√ß√£o de consulta
   */
  static async scheduleConfirmation(appointment) {
    try {
      console.log('üìÖ [AppointmentConfirmationService] Agendando confirma√ß√£o para:', appointment.id);
      
      // Calcular data para envio da confirma√ß√£o (3 dias antes)
      const appointmentDate = new Date(appointment.date);
      const confirmationDate = new Date(appointmentDate);
      confirmationDate.setDate(confirmationDate.getDate() - 3);

      // Verificar se a confirma√ß√£o deve ser enviada hoje
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const confirmationDay = new Date(confirmationDate);
      confirmationDay.setHours(0, 0, 0, 0);

      if (confirmationDay.getTime() === today.getTime()) {
        // Enviar confirma√ß√£o imediatamente
        await this.sendConfirmationMessage(appointment);
      } else {
        // Agendar para o futuro
        this.pendingConfirmations.set(appointment.id, {
          appointment,
          confirmationDate,
          sent: false
        });
      }

      console.log('‚úÖ [AppointmentConfirmationService] Confirma√ß√£o agendada com sucesso');
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao agendar confirma√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Processa confirma√ß√µes pendentes
   */
  static async processPendingConfirmations() {
    try {
      console.log('üîÑ [AppointmentConfirmationService] Processando confirma√ß√µes pendentes...');
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      for (const [appointmentId, confirmation] of this.pendingConfirmations.entries()) {
        const confirmationDay = new Date(confirmation.confirmationDate);
        confirmationDay.setHours(0, 0, 0, 0);

        if (confirmationDay.getTime() === today.getTime() && !confirmation.sent) {
          console.log(`üì§ [AppointmentConfirmationService] Enviando confirma√ß√£o para agendamento: ${appointmentId}`);
          
          await this.sendConfirmationMessage(confirmation.appointment);
          
          // Marcar como enviada
          confirmation.sent = true;
          this.pendingConfirmations.set(appointmentId, confirmation);
        }
      }

      console.log('‚úÖ [AppointmentConfirmationService] Confirma√ß√µes processadas');
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao processar confirma√ß√µes:', error);
    }
  }

  /**
   * Envia mensagem de confirma√ß√£o
   */
  static async sendConfirmationMessage(appointment) {
    try {
      console.log('üì§ [AppointmentConfirmationService] Enviando confirma√ß√£o para:', appointment.patientPhone);
      
      const message = this.createConfirmationMessage(appointment);
      
      // Em produ√ß√£o, integrar com WhatsApp API
      console.log('üì± [AppointmentConfirmationService] Mensagem de confirma√ß√£o:', message);
      
      // Simular envio
      const result = {
        appointmentId: appointment.id,
        patientPhone: appointment.patientPhone,
        message,
        sentAt: new Date().toISOString(),
        status: 'sent'
      };

      console.log('‚úÖ [AppointmentConfirmationService] Confirma√ß√£o enviada:', result);
      return result;
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao enviar confirma√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Cria mensagem de confirma√ß√£o
   */
  static createConfirmationMessage(appointment) {
    const appointmentDate = new Date(appointment.date);
    const formattedDate = appointmentDate.toLocaleDateString('pt-BR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    return `üîî Confirma√ß√£o de Consulta\n\n` +
           `Ol√° ${appointment.patientName}!\n\n` +
           `Sua consulta est√° marcada para:\n` +
           `üìÖ ${formattedDate}\n` +
           `‚è∞ ${appointment.startTime} - ${appointment.endTime}\n` +
           `üë®‚Äç‚öïÔ∏è ${appointment.doctor.nome_exibicao}\n` +
           `üè• ${appointment.clinicName || 'nossa cl√≠nica'}\n\n` +
           `Por favor, confirme sua presen√ßa respondendo:\n` +
           `‚úÖ Sim, confirmo\n` +
           `‚ùå Preciso remarcar\n\n` +
           `üìç Lembre-se de chegar 15 minutos antes do hor√°rio.`;
  }

  /**
   * Processa resposta de confirma√ß√£o
   */
  static async processConfirmationResponse(message, patientPhone) {
    try {
      console.log('üì• [AppointmentConfirmationService] Processando resposta de confirma√ß√£o:', message);
      
      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('sim') || lowerMessage.includes('confirmo') || lowerMessage.includes('‚úÖ')) {
        return this.handleConfirmationAccepted(patientPhone);
      } else if (lowerMessage.includes('n√£o') || lowerMessage.includes('remarcar') || lowerMessage.includes('‚ùå')) {
        return this.handleConfirmationRejected(patientPhone);
      } else {
        return this.createResponse(
          'Por favor, responda com:\n' +
          '‚úÖ Sim, confirmo\n' +
          '‚ùå Preciso remarcar',
          'waiting_confirmation',
          { patientPhone }
        );
      }
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao processar resposta:', error);
      return this.createResponse(
        'Desculpe, ocorreu um erro. Tente novamente.',
        'error',
        { patientPhone }
      );
    }
  }

  /**
   * Processa confirma√ß√£o aceita
   */
  static async handleConfirmationAccepted(patientPhone) {
    try {
      console.log('‚úÖ [AppointmentConfirmationService] Confirma√ß√£o aceita por:', patientPhone);
      
      // Em produ√ß√£o, atualizar status no banco de dados
      
      return this.createResponse(
        '‚úÖ Perfeito! Sua consulta est√° confirmada.\n\n' +
        'üìç Lembre-se de:\n' +
        '‚Ä¢ Chegar 15 minutos antes do hor√°rio\n' +
        '‚Ä¢ Trazer documentos de identifica√ß√£o\n' +
        '‚Ä¢ Trazer carteirinha do conv√™nio (se aplic√°vel)\n\n' +
        'At√© l√°! üòä',
        'confirmed',
        { patientPhone }
      );
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao processar confirma√ß√£o aceita:', error);
      throw error;
    }
  }

  /**
   * Processa confirma√ß√£o rejeitada
   */
  static async handleConfirmationRejected(patientPhone) {
    try {
      console.log('‚ùå [AppointmentConfirmationService] Confirma√ß√£o rejeitada por:', patientPhone);
      
      return this.createResponse(
        'Entendi que voc√™ precisa remarcar sua consulta.\n\n' +
        'Para reagendar, entre em contato conosco:\n' +
        'üìû (47) 3333-4444\n' +
        'üìß agendamento@cardioprime.com.br\n\n' +
        'Ou responda "agendar" para iniciar um novo agendamento.',
        'rejected',
        { patientPhone }
      );
      
    } catch (error) {
      console.error('üí• [AppointmentConfirmationService] Erro ao processar confirma√ß√£o rejeitada:', error);
      throw error;
    }
  }

  /**
   * Cria resposta padronizada
   */
  static createResponse(message, status, data) {
    return {
      message,
      status,
      data
    };
  }

  /**
   * Obt√©m confirma√ß√µes pendentes
   */
  static getPendingConfirmations() {
    return Array.from(this.pendingConfirmations.values());
  }

  /**
   * Remove confirma√ß√£o pendente
   */
  static removePendingConfirmation(appointmentId) {
    this.pendingConfirmations.delete(appointmentId);
  }
} 