// Teste espec√≠fico para debugar o problema em produ√ß√£o
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://niakqdolcdwxtrkbqmdi.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pYWtxZG9sY2R3eHRya2JxbWRpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4MjU1OSwiZXhwIjoyMDY1NzU4NTU5fQ.SY8A3ReAs_D7SFBp99PpSe8rpm1hbWMv4b2q-c_VS5M';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testProductionDebug() {
  try {
    console.log('üß™ Debugando problema em produ√ß√£o...');
    
    // Simular exatamente o que acontece no webhook
    const phoneNumber = '554730915628'; // display_phone_number do webhook
    const patientPhone = '554797192447';
    const message = 'Gostaria de realizar um agendamento';
    
    console.log('üìã Par√¢metros do webhook:');
    console.log('  - display_phone_number:', phoneNumber);
    console.log('  - patient_phone:', patientPhone);
    console.log('  - message:', message);
    
    // 1. Buscar cl√≠nica pelo n√∫mero do WhatsApp (como no webhook)
    console.log('\nüîç 1. Buscando cl√≠nica pelo n√∫mero do WhatsApp...');
    
    // Tentar diferentes formatos do n√∫mero
    const numberFormats = [
      phoneNumber, // 554730915628
      `+${phoneNumber}`, // +554730915628
      phoneNumber.substring(2), // 4730915628 (sem 55)
      `+55${phoneNumber.substring(2)}` // +554730915628
    ];
    
    let clinicFound = null;
    
    for (const numberFormat of numberFormats) {
      console.log(`  Tentando formato: ${numberFormat}`);
      
      const { data: clinic, error } = await supabase
        .from('clinics')
        .select('*')
        .eq('whatsapp_phone', numberFormat)
        .single();
      
      if (!error && clinic) {
        console.log(`  ‚úÖ Cl√≠nica encontrada: ${clinic.name}`);
        console.log(`  üìã ID: ${clinic.id}`);
        console.log(`  üì± WhatsApp: ${clinic.whatsapp_phone}`);
        clinicFound = clinic;
        break;
      } else {
        console.log(`  ‚ùå N√£o encontrada: ${error?.message}`);
      }
    }
    
    if (!clinicFound) {
      console.log('\n‚ùå Nenhuma cl√≠nica encontrada pelos n√∫meros testados');
      
      // 2. Tentar buscar por conversas anteriores
      console.log('\nüîç 2. Buscando por conversas anteriores...');
      const { data: conversations, error: convError } = await supabase
        .from('whatsapp_conversations_improved')
        .select('clinic_id')
        .eq('patient_phone_number', patientPhone)
        .order('last_message_at', { ascending: false })
        .limit(1)
        .single();
      
      if (!convError && conversations) {
        console.log(`  ‚úÖ Conversa encontrada, clinic_id: ${conversations.clinic_id}`);
        
        // Buscar dados da cl√≠nica pelo ID da conversa
        const { data: clinicFromConv, error: clinicError } = await supabase
          .from('clinics')
          .select('*')
          .eq('id', conversations.clinic_id)
          .single();
        
        if (!clinicError && clinicFromConv) {
          console.log(`  ‚úÖ Cl√≠nica encontrada via conversa: ${clinicFromConv.name}`);
          clinicFound = clinicFromConv;
        }
      } else {
        console.log('  ‚ùå Nenhuma conversa encontrada');
      }
    }
    
    if (clinicFound) {
      console.log('\n‚úÖ Cl√≠nica encontrada! Testando processamento...');
      
      // 3. Testar se os dados da cl√≠nica est√£o dispon√≠veis
      console.log('\nüîç 3. Verificando dados da cl√≠nica...');
      console.log(`  üìã Tem contextualiza√ß√£o: ${!!clinicFound.contextualization_json}`);
      console.log(`  üìã Has contextualization: ${clinicFound.has_contextualization}`);
      
      if (clinicFound.contextualization_json) {
        console.log('  ‚úÖ Dados de contextualiza√ß√£o dispon√≠veis');
        
        // 4. Simular processamento
        console.log('\nüìù 4. Simulando processamento...');
        const simulatedResponse = {
          message: 'Perfeito! Vou ajud√°-lo a agendar sua consulta. Primeiro, preciso de algumas informa√ß√µes:\n\nüìù Qual √© o seu nome completo?',
          nextStep: 'collecting_name',
          requiresInput: true
        };
        
        console.log('  ‚úÖ Resposta simulada:', simulatedResponse.message);
      } else {
        console.log('  ‚ùå Dados de contextualiza√ß√£o n√£o dispon√≠veis');
      }
    } else {
      console.log('\n‚ùå PROBLEMA: Nenhuma cl√≠nica encontrada');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testProductionDebug();
